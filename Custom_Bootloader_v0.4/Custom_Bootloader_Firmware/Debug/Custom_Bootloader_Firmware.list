
Custom_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  0800210c  0800210c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080068c4  080068c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  00010098  2**0
                  CONTENTS
  4 .ARM          00000000  08006d80  08006d80  00010098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d80  08006d80  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00006d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006d88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000098  08006e20  00010098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08006e20  00010754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7f6  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220b  00000000  00000000  0001a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0001cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000759  00000000  00000000  0001d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187a8  00000000  00000000  0001dc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdbf  00000000  00000000  000363b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086321  00000000  00000000  00043178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d20  00000000  00000000  000c949c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000cc1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800210c <__do_global_dtors_aux>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4c05      	ldr	r4, [pc, #20]	; (8002124 <__do_global_dtors_aux+0x18>)
 8002110:	7823      	ldrb	r3, [r4, #0]
 8002112:	b933      	cbnz	r3, 8002122 <__do_global_dtors_aux+0x16>
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__do_global_dtors_aux+0x1c>)
 8002116:	b113      	cbz	r3, 800211e <__do_global_dtors_aux+0x12>
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <__do_global_dtors_aux+0x20>)
 800211a:	f3af 8000 	nop.w
 800211e:	2301      	movs	r3, #1
 8002120:	7023      	strb	r3, [r4, #0]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	20000098 	.word	0x20000098
 8002128:	00000000 	.word	0x00000000
 800212c:	080068ac 	.word	0x080068ac

08002130 <frame_dummy>:
 8002130:	b508      	push	{r3, lr}
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <frame_dummy+0x10>)
 8002134:	b11b      	cbz	r3, 800213e <frame_dummy+0xe>
 8002136:	4903      	ldr	r1, [pc, #12]	; (8002144 <frame_dummy+0x14>)
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <frame_dummy+0x18>)
 800213a:	f3af 8000 	nop.w
 800213e:	bd08      	pop	{r3, pc}
 8002140:	00000000 	.word	0x00000000
 8002144:	2000009c 	.word	0x2000009c
 8002148:	080068ac 	.word	0x080068ac

0800214c <init_firmware_update_module>:

ETX_OTA_Status init_firmware_update_module(ETX_OTA_hw_Protocol hardware_protocol,
											UART_HandleTypeDef *huart,
											firmware_update_config_data_t *fw_config,
											HM10_GPIO_def_t *GPIO_is_hm10_default_settings_Pin)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
    #if ETX_OTA_VERBOSE
        printf("Initializing the Firmware Update Module...\r\n");
    #endif

    /* Persist the requested hardware protocol into which the ETX OTA Protocol will be used on. */
    ETX_OTA_hardware_protocol = hardware_protocol;
 800215c:	4a46      	ldr	r2, [pc, #280]	; (8002278 <init_firmware_update_module+0x12c>)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	7013      	strb	r3, [r2, #0]

    /* Persist the pointer to the UART into which the ETX OTA Protocol will be used on. */
    p_huart = huart;
 8002162:	4a46      	ldr	r2, [pc, #280]	; (800227c <init_firmware_update_module+0x130>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the Firmware Update Configurations sub-module to the one that was given. */
    p_fw_config = fw_config;
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <init_firmware_update_module+0x134>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the GPIO Definition Type of the GPIO Pin from which it can be requested to reset the Configuration Settings of the HM-10 BT Device to its default settings. */
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings_Pin;
 800216e:	4a45      	ldr	r2, [pc, #276]	; (8002284 <init_firmware_update_module+0x138>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6013      	str	r3, [r2, #0]

    /* Validate the requested hardware protocol to be used and, if required, initialized it. */
    switch (hardware_protocol)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d076      	beq.n	8002268 <init_firmware_update_module+0x11c>
 800217a:	2b01      	cmp	r3, #1
 800217c:	d172      	bne.n	8002264 <init_firmware_update_module+0x118>

            /* Initializing the HM-10 Bluetooth module. */
			#if ETX_OTA_VERBOSE
				printf("Initializing the HM-10 Bluetooth module...\r\n");
			#endif
            init_hm10_module(p_huart);
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <init_firmware_update_module+0x130>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 ff0a 	bl	8002f9c <init_hm10_module>

            /* Resetting the Configuration Settings of the HM-10 BT Device to its Default Settings, but only if user is requesting it. */
            if (HAL_GPIO_ReadPin(p_GPIO_is_hm10_default_settings->GPIO_Port, p_GPIO_is_hm10_default_settings->GPIO_Pin) == GPIO_PIN_SET)
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <init_firmware_update_module+0x138>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <init_firmware_update_module+0x138>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f002 fd51 	bl	8004c40 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d163      	bne.n	800226c <init_firmware_update_module+0x120>
					printf("MCU has been requested to reset the configuration settings of the HM-10 BT Device to its default settings.\r\n");
					printf("Resetting configuration settings of the HM-10 BT Device...\r\n");
				#endif

				/* Sending test command to HM-10 BT Device to make sure that it is not in a Bluetooth Connection for the next steps to be made and to make sure that it is currently in working condition. */
				ret = disconnect_hm10_from_bt_address();
 80021a4:	f001 fb04 	bl	80037b0 <disconnect_hm10_from_bt_address>
 80021a8:	4603      	mov	r3, r0
 80021aa:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (ret == HM10_BT_Connection_Status_Unknown)
 80021ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <init_firmware_update_module+0x6a>
				{
					#if ETX_OTA_VERBOSE
						printf("ERROR: Something went wrong whenever sending the initial Test Command sent to the HM-10 BT Device(Bluetooth Connection Status Code returned = %d).\r\n", ret);
					#endif
					return ETX_OTA_EC_ERR;
 80021b2:	2304      	movs	r3, #4
 80021b4:	e05c      	b.n	8002270 <init_firmware_update_module+0x124>
				}

                /* Restore all the HM-10 Setup values to factory setup. */
                ret = send_hm10_renew_cmd();
 80021b6:	f000 ff71 	bl	800309c <send_hm10_renew_cmd>
 80021ba:	4603      	mov	r3, r0
 80021bc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <init_firmware_update_module+0x7c>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The HM-10 BT device could not be restored to its factory setup via the AT+RENEW Command (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021c4:	2304      	movs	r3, #4
 80021c6:	e053      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting BT Name in HM-10 BT Device. */
                /** <b>Local variable default_ble_name:</b> Used to hold the Default BT Name of the HM-10 BT Device as given by @ref HM10_DEFAULT_BLE_NAME . */
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <init_firmware_update_module+0x13c>)
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	210c      	movs	r1, #12
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 ffd0 	bl	8003180 <set_hm10_name>
 80021e0:	4603      	mov	r3, r0
 80021e2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <init_firmware_update_module+0xa2>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The BT Name of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021ea:	2304      	movs	r3, #4
 80021ec:	e040      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting Role in BT Device. */
                ret = set_hm10_role(HM10_DEFAULT_ROLE);
 80021ee:	2030      	movs	r0, #48	; 0x30
 80021f0:	f001 f88e 	bl	8003310 <set_hm10_role>
 80021f4:	4603      	mov	r3, r0
 80021f6:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <init_firmware_update_module+0xb6>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Role of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021fe:	2304      	movs	r3, #4
 8002200:	e036      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting a Pin in the BT Device. */
                /** <b>Local variable default_pin_code:</b> Used to hold the Default Pin Code of the HM-10 BT Device as given by @ref HM10_DEFAULT_PIN . */
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 8002202:	4a22      	ldr	r2, [pc, #136]	; (800228c <init_firmware_update_module+0x140>)
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220c:	6018      	str	r0, [r3, #0]
 800220e:	3304      	adds	r3, #4
 8002210:	8019      	strh	r1, [r3, #0]
                ret = set_hm10_pin(default_pin_code);
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f8fc 	bl	8003414 <set_hm10_pin>
 800221c:	4603      	mov	r3, r0
 800221e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <init_firmware_update_module+0xde>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8002226:	2304      	movs	r3, #4
 8002228:	e022      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting a Pin Code Mode in the BT Device. */
                ret = set_hm10_pin_code_mode(HM10_DEFAULT_PIN_CODE_MODE);
 800222a:	2030      	movs	r0, #48	; 0x30
 800222c:	f001 f9bc 	bl	80035a8 <set_hm10_pin_code_mode>
 8002230:	4603      	mov	r3, r0
 8002232:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <init_firmware_update_module+0xf2>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin Code Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800223a:	2304      	movs	r3, #4
 800223c:	e018      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting the Module Work Mode in the BT Device. */
                ret = set_hm10_module_work_mode(HM10_DEFAULT_MODULE_WORK_MODE);
 800223e:	2030      	movs	r0, #48	; 0x30
 8002240:	f001 fa34 	bl	80036ac <set_hm10_module_work_mode>
 8002244:	4603      	mov	r3, r0
 8002246:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <init_firmware_update_module+0x106>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Module Work Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800224e:	2304      	movs	r3, #4
 8002250:	e00e      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Resetting the BT Device. */
                ret = send_hm10_reset_cmd();
 8002252:	f000 feb1 	bl	8002fb8 <send_hm10_reset_cmd>
 8002256:	4603      	mov	r3, r0
 8002258:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 800225a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <init_firmware_update_module+0x120>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: Could not reset the HM-10 BT device (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8002260:	2304      	movs	r3, #4
 8002262:	e005      	b.n	8002270 <init_firmware_update_module+0x124>
            break;
        default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: The requested Hardware Protocol %d is not recognized by the ETX OTA Protocol.\r\n", hardware_protocol);
			#endif
            return ETX_OTA_EC_ERR;
 8002264:	2304      	movs	r3, #4
 8002266:	e003      	b.n	8002270 <init_firmware_update_module+0x124>
            break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <init_firmware_update_module+0x122>
            break;
 800226c:	bf00      	nop
    }

    return ETX_OTA_EC_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004cc 	.word	0x200004cc
 800227c:	200004c8 	.word	0x200004c8
 8002280:	200004c4 	.word	0x200004c4
 8002284:	200004d0 	.word	0x200004d0
 8002288:	080068c4 	.word	0x080068c4
 800228c:	080068d0 	.word	0x080068d0

08002290 <firmware_image_download_and_install>:

ETX_OTA_Status firmware_image_download_and_install()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref FirmUpdConf_Status or a @ref ETX_OTA_Status function type. */
	ETX_OTA_Status ret;

	/* Reset the global variables related to: 1) The Header data of a received Firmware Image and 2) The ETX OTA Process State. */
	etx_ota_fw_received_size = 0U;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <firmware_image_download_and_install+0xbc>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
	etx_ota_state            = ETX_OTA_STATE_START;
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <firmware_image_download_and_install+0xc0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
	do
	{
		#if ETX_OTA_VERBOSE
			printf("Waiting for an ETX OTA Packet from the host...\r\n");
		#endif
		ret = etx_ota_receive_packet(Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE);
 80022a2:	f240 4109 	movw	r1, #1033	; 0x409
 80022a6:	482b      	ldr	r0, [pc, #172]	; (8002354 <firmware_image_download_and_install+0xc4>)
 80022a8:	f000 f856 	bl	8002358 <etx_ota_receive_packet>
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
		switch (ret)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d036      	beq.n	8002324 <firmware_image_download_and_install+0x94>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	dc39      	bgt.n	800232e <firmware_image_download_and_install+0x9e>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <firmware_image_download_and_install+0x34>
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d02e      	beq.n	8002320 <firmware_image_download_and_install+0x90>
 80022c2:	e034      	b.n	800232e <firmware_image_download_and_install+0x9e>
		{
		  case ETX_OTA_EC_OK:
			/* Since the ETX OTA Packet was received successfully, proceed into processing that data correspondingly. */
			ret = etx_ota_process_data(Rx_Buffer);
 80022c4:	4823      	ldr	r0, [pc, #140]	; (8002354 <firmware_image_download_and_install+0xc4>)
 80022c6:	f000 f9f5 	bl	80026b4 <etx_ota_process_data>
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
			switch (ret)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d823      	bhi.n	800231c <firmware_image_download_and_install+0x8c>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <firmware_image_download_and_install+0x4c>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	080022fb 	.word	0x080022fb
 80022e4:	08002305 	.word	0x08002305
 80022e8:	08002309 	.word	0x08002309
 80022ec:	08002313 	.word	0x08002313
			{
			  case ETX_OTA_EC_OK:
				  #if ETX_OTA_VERBOSE
				  	  printf("DONE: The current ETX OTA Packet was processed successfully. Therefore, sending ACK...\r\n");
				  #endif
				  etx_ota_send_resp(ETX_OTA_ACK);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 facf 	bl	8002894 <etx_ota_send_resp>
				  break;
 80022f6:	bf00      	nop
				  #if ETX_OTA_VERBOSE
				  	  printf("ERROR: The ETX OTA Exception code %d that has been generated is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
				  #endif
				  return ret;
			}
			break;
 80022f8:	e01e      	b.n	8002338 <firmware_image_download_and_install+0xa8>
				  etx_ota_send_resp(ETX_OTA_ACK);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 faca 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_STOP;
 8002300:	2301      	movs	r3, #1
 8002302:	e01e      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  return ETX_OTA_EC_ERR;
 8002304:	2304      	movs	r3, #4
 8002306:	e01c      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fac3 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_NA;
 800230e:	2303      	movs	r3, #3
 8002310:	e017      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fabe 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_ERR;
 8002318:	2304      	movs	r3, #4
 800231a:	e012      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  return ret;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	e010      	b.n	8002342 <firmware_image_download_and_install+0xb2>

		  case ETX_OTA_EC_NR:
			  #if ETX_OTA_VERBOSE
			  	  printf("DONE: No response from host.\r\n");
			  #endif
			  return ETX_OTA_EC_NR;
 8002320:	2302      	movs	r3, #2
 8002322:	e00e      	b.n	8002342 <firmware_image_download_and_install+0xb2>

		  case ETX_OTA_EC_ERR:
			  #if ETX_OTA_VERBOSE
			  	  printf("ERROR: An Error Exception Code has been generated during the ETX OTA process. Therefore, sending NACK...\r\n");
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 8002324:	2001      	movs	r0, #1
 8002326:	f000 fab5 	bl	8002894 <etx_ota_send_resp>
			  return ETX_OTA_EC_ERR;
 800232a:	2304      	movs	r3, #4
 800232c:	e009      	b.n	8002342 <firmware_image_download_and_install+0xb2>
		  default:
			  /* The "default" case should not be called. */
			  #if ETX_OTA_VERBOSE
			  	  printf("ERROR: The ETX OTA Exception code %d that has been generated either should not have been generated or is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fab0 	bl	8002894 <etx_ota_send_resp>
			  return ret;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	e004      	b.n	8002342 <firmware_image_download_and_install+0xb2>
		}
	}
	while (etx_ota_state != ETX_OTA_STATE_IDLE);
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <firmware_image_download_and_install+0xc0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1b0      	bne.n	80022a2 <firmware_image_download_and_install+0x12>

	return ETX_OTA_EC_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004c0 	.word	0x200004c0
 8002350:	200004bd 	.word	0x200004bd
 8002354:	200000b4 	.word	0x200000b4

08002358 <etx_ota_receive_packet>:

static ETX_OTA_Status etx_ota_receive_packet(uint8_t *buf, uint16_t max_len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable len:</b> Current index against which the bytes of the current ETX OTA Packet have been fetched. */
	uint16_t len = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	83fb      	strh	r3, [r7, #30]
	uint32_t rec_data_crc;

	#if ETX_OTA_VERBOSE
		printf("Waiting to receive an ETX OTA Packet from the host...\r\n");
	#endif
	switch (ETX_OTA_hardware_protocol)
 8002368:	4ba2      	ldr	r3, [pc, #648]	; (80025f4 <etx_ota_receive_packet+0x29c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <etx_ota_receive_packet+0x20>
 8002370:	2b01      	cmp	r3, #1
 8002372:	f000 80d2 	beq.w	800251a <etx_ota_receive_packet+0x1c2>
 8002376:	e174      	b.n	8002662 <etx_ota_receive_packet+0x30a>
	{
		case ETX_OTA_hw_Protocol_UART:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002378:	4b9f      	ldr	r3, [pc, #636]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	18d1      	adds	r1, r2, r3
 8002382:	f242 3328 	movw	r3, #9000	; 0x2328
 8002386:	2201      	movs	r2, #1
 8002388:	f003 f96d 	bl	8005666 <HAL_UART_Receive>
 800238c:	4603      	mov	r3, r0
 800238e:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8002390:	8a7b      	ldrh	r3, [r7, #18]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fbdb 	bl	8002b50 <HAL_ret_handler>
 800239a:	4603      	mov	r3, r0
 800239c:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800239e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <etx_ota_receive_packet+0x54>
			{
				return ret;
 80023a6:	8a7b      	ldrh	r3, [r7, #18]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e17f      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			if (buf[len++] != ETX_OTA_SOF)
 80023ac:	8bfb      	ldrh	r3, [r7, #30]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	83fa      	strh	r2, [r7, #30]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2baa      	cmp	r3, #170	; 0xaa
 80023bc:	d001      	beq.n	80023c2 <etx_ota_receive_packet+0x6a>
			{
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
				#endif
				return ETX_OTA_EC_ERR;
 80023be:	2304      	movs	r3, #4
 80023c0:	e174      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80023c2:	4b8d      	ldr	r3, [pc, #564]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	8bfb      	ldrh	r3, [r7, #30]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	18d1      	adds	r1, r2, r3
 80023cc:	f242 3328 	movw	r3, #9000	; 0x2328
 80023d0:	2201      	movs	r2, #1
 80023d2:	f003 f948 	bl	8005666 <HAL_UART_Receive>
 80023d6:	4603      	mov	r3, r0
 80023d8:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80023da:	8a7b      	ldrh	r3, [r7, #18]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fbb6 	bl	8002b50 <HAL_ret_handler>
 80023e4:	4603      	mov	r3, r0
 80023e6:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80023e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <etx_ota_receive_packet+0x9e>
			{
				return ret;
 80023f0:	8a7b      	ldrh	r3, [r7, #18]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	e15a      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			switch (buf[len++])
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	83fa      	strh	r2, [r7, #30]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d901      	bls.n	800240c <etx_ota_receive_packet+0xb4>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 8002408:	2304      	movs	r3, #4
 800240a:	e14f      	b.n	80026ac <etx_ota_receive_packet+0x354>
					break;
 800240c:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800240e:	4b7a      	ldr	r3, [pc, #488]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	8bfb      	ldrh	r3, [r7, #30]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	18d1      	adds	r1, r2, r3
 8002418:	f242 3328 	movw	r3, #9000	; 0x2328
 800241c:	2202      	movs	r2, #2
 800241e:	f003 f922 	bl	8005666 <HAL_UART_Receive>
 8002422:	4603      	mov	r3, r0
 8002424:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8002426:	8a7b      	ldrh	r3, [r7, #18]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb90 	bl	8002b50 <HAL_ret_handler>
 8002430:	4603      	mov	r3, r0
 8002432:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002434:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <etx_ota_receive_packet+0xea>
			{
				return ret;
 800243c:	8a7b      	ldrh	r3, [r7, #18]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e134      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			data_len = *(uint16_t *)&buf[len];
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 800244c:	8bfb      	ldrh	r3, [r7, #30]
 800244e:	3302      	adds	r3, #2
 8002450:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	82fb      	strh	r3, [r7, #22]
 8002456:	e01f      	b.n	8002498 <etx_ota_receive_packet+0x140>
			{
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8002458:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	8bfb      	ldrh	r3, [r7, #30]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	83fa      	strh	r2, [r7, #30]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1899      	adds	r1, r3, r2
 8002468:	f242 3328 	movw	r3, #9000	; 0x2328
 800246c:	2201      	movs	r2, #1
 800246e:	f003 f8fa 	bl	8005666 <HAL_UART_Receive>
 8002472:	4603      	mov	r3, r0
 8002474:	827b      	strh	r3, [r7, #18]
				ret = HAL_ret_handler(ret);
 8002476:	8a7b      	ldrh	r3, [r7, #18]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb68 	bl	8002b50 <HAL_ret_handler>
 8002480:	4603      	mov	r3, r0
 8002482:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 8002484:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <etx_ota_receive_packet+0x13a>
				{
					return ret;
 800248c:	8a7b      	ldrh	r3, [r7, #18]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e10c      	b.n	80026ac <etx_ota_receive_packet+0x354>
			for (uint16_t i=0; i<data_len; i++)
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	3301      	adds	r3, #1
 8002496:	82fb      	strh	r3, [r7, #22]
 8002498:	8afa      	ldrh	r2, [r7, #22]
 800249a:	8bbb      	ldrh	r3, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3db      	bcc.n	8002458 <etx_ota_receive_packet+0x100>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024a0:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	18d1      	adds	r1, r2, r3
 80024aa:	f242 3328 	movw	r3, #9000	; 0x2328
 80024ae:	2204      	movs	r2, #4
 80024b0:	f003 f8d9 	bl	8005666 <HAL_UART_Receive>
 80024b4:	4603      	mov	r3, r0
 80024b6:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80024b8:	8a7b      	ldrh	r3, [r7, #18]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb47 	bl	8002b50 <HAL_ret_handler>
 80024c2:	4603      	mov	r3, r0
 80024c4:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80024c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <etx_ota_receive_packet+0x17c>
			{
				return ret;
 80024ce:	8a7b      	ldrh	r3, [r7, #18]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e0eb      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 80024d4:	8bfb      	ldrh	r3, [r7, #30]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 80024de:	8bfb      	ldrh	r3, [r7, #30]
 80024e0:	3304      	adds	r3, #4
 80024e2:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	8bfb      	ldrh	r3, [r7, #30]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	18d1      	adds	r1, r2, r3
 80024ee:	f242 3328 	movw	r3, #9000	; 0x2328
 80024f2:	2201      	movs	r2, #1
 80024f4:	f003 f8b7 	bl	8005666 <HAL_UART_Receive>
 80024f8:	4603      	mov	r3, r0
 80024fa:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80024fc:	8a7b      	ldrh	r3, [r7, #18]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fb25 	bl	8002b50 <HAL_ret_handler>
 8002506:	4603      	mov	r3, r0
 8002508:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800250a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a9 	beq.w	8002666 <etx_ota_receive_packet+0x30e>
			{
				return ret;
 8002514:	8a7b      	ldrh	r3, [r7, #18]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e0c8      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			break;
		case ETX_OTA_hw_Protocol_BT:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800251a:	8bfb      	ldrh	r3, [r7, #30]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	f242 3228 	movw	r2, #9000	; 0x2328
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f9e8 	bl	80038fc <get_hm10_ota_data>
 800252c:	4603      	mov	r3, r0
 800252e:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <etx_ota_receive_packet+0x1e6>
			{
				return ret;
 8002538:	8a7b      	ldrh	r3, [r7, #18]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e0b6      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			if (buf[len++] != ETX_OTA_SOF)
 800253e:	8bfb      	ldrh	r3, [r7, #30]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	83fa      	strh	r2, [r7, #30]
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2baa      	cmp	r3, #170	; 0xaa
 800254e:	d001      	beq.n	8002554 <etx_ota_receive_packet+0x1fc>
			{
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
				#endif
				return ETX_OTA_EC_ERR;
 8002550:	2304      	movs	r3, #4
 8002552:	e0ab      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002554:	8bfb      	ldrh	r3, [r7, #30]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	f242 3228 	movw	r2, #9000	; 0x2328
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f9cb 	bl	80038fc <get_hm10_ota_data>
 8002566:	4603      	mov	r3, r0
 8002568:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800256a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <etx_ota_receive_packet+0x220>
			{
				return ret;
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e099      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			switch (buf[len++])
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	83fa      	strh	r2, [r7, #30]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d901      	bls.n	800258e <etx_ota_receive_packet+0x236>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 800258a:	2304      	movs	r3, #4
 800258c:	e08e      	b.n	80026ac <etx_ota_receive_packet+0x354>
					break;
 800258e:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002590:	8bfb      	ldrh	r3, [r7, #30]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	f242 3228 	movw	r2, #9000	; 0x2328
 800259a:	2102      	movs	r1, #2
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f9ad 	bl	80038fc <get_hm10_ota_data>
 80025a2:	4603      	mov	r3, r0
 80025a4:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80025a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <etx_ota_receive_packet+0x25c>
			{
				return ret;
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e07b      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			data_len = *(uint16_t *)&buf[len];
 80025b4:	8bfb      	ldrh	r3, [r7, #30]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	3302      	adds	r3, #2
 80025c2:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	82bb      	strh	r3, [r7, #20]
 80025c8:	e01b      	b.n	8002602 <etx_ota_receive_packet+0x2aa>
			{
				ret = get_hm10_ota_data(&buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 80025ca:	8bfb      	ldrh	r3, [r7, #30]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	83fa      	strh	r2, [r7, #30]
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f98d 	bl	80038fc <get_hm10_ota_data>
 80025e2:	4603      	mov	r3, r0
 80025e4:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 80025e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <etx_ota_receive_packet+0x2a4>
				{
					return ret;
 80025ee:	8a7b      	ldrh	r3, [r7, #18]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e05b      	b.n	80026ac <etx_ota_receive_packet+0x354>
 80025f4:	200004cc 	.word	0x200004cc
 80025f8:	200004c8 	.word	0x200004c8
			for (uint16_t i=0; i<data_len; i++)
 80025fc:	8abb      	ldrh	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	82bb      	strh	r3, [r7, #20]
 8002602:	8aba      	ldrh	r2, [r7, #20]
 8002604:	8bbb      	ldrh	r3, [r7, #28]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3df      	bcc.n	80025ca <etx_ota_receive_packet+0x272>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800260a:	8bfb      	ldrh	r3, [r7, #30]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	f242 3228 	movw	r2, #9000	; 0x2328
 8002614:	2104      	movs	r1, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f970 	bl	80038fc <get_hm10_ota_data>
 800261c:	4603      	mov	r3, r0
 800261e:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <etx_ota_receive_packet+0x2d6>
			{
				return ret;
 8002628:	8a7b      	ldrh	r3, [r7, #18]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e03e      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 800262e:	8bfb      	ldrh	r3, [r7, #30]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	3304      	adds	r3, #4
 800263c:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	f242 3228 	movw	r2, #9000	; 0x2328
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f001 f956 	bl	80038fc <get_hm10_ota_data>
 8002650:	4603      	mov	r3, r0
 8002652:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <etx_ota_receive_packet+0x312>
			{
				return ret;
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e024      	b.n	80026ac <etx_ota_receive_packet+0x354>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 8002662:	2304      	movs	r3, #4
 8002664:	e022      	b.n	80026ac <etx_ota_receive_packet+0x354>
			break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <etx_ota_receive_packet+0x314>
			break;
 800266a:	bf00      	nop
	}

	/* Validate that the latest byte received corresponds to an ETX OTA End of Frame (EOF) byte. */
	if (buf[len++] != ETX_OTA_EOF)
 800266c:	8bfb      	ldrh	r3, [r7, #30]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	83fa      	strh	r2, [r7, #30]
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2bbb      	cmp	r3, #187	; 0xbb
 800267c:	d001      	beq.n	8002682 <etx_ota_receive_packet+0x32a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Expected to receive the EOF field value from the current ETX OTA Packet.\r\n");
		#endif
		return ETX_OTA_EC_ERR;
 800267e:	2304      	movs	r3, #4
 8002680:	e014      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	/* Calculate the 32-bit CRC only with respect to the contents of the "Data" field from the current ETX OTA Packet that has just been received. */
	cal_data_crc = crc32_mpeg2(&buf[ETX_OTA_DATA_FIELD_INDEX], data_len);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	8bba      	ldrh	r2, [r7, #28]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fa78 	bl	8002b80 <crc32_mpeg2>
 8002690:	60f8      	str	r0, [r7, #12]

	/* Validate that the Calculated CRC matches the Recorded CRC. */
	if (cal_data_crc != rec_data_crc)
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <etx_ota_receive_packet+0x346>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: CRC mismatch with current ETX OTA Packet [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
													   (unsigned int) cal_data_crc, (unsigned int) rec_data_crc);
		#endif
		return ETX_OTA_EC_ERR;
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	if (max_len < len)
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d201      	bcs.n	80026aa <etx_ota_receive_packet+0x352>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Received more data than expected (Expected = %d, Received = %d)\r\n", max_len, len);
		#endif
		return ETX_OTA_EC_ERR;
 80026a6:	2304      	movs	r3, #4
 80026a8:	e000      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	#if ETX_OTA_VERBOSE
		printf("ETX OTA Packet has been successfully received.\r\n");
	#endif
	return ETX_OTA_EC_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <etx_ota_process_data>:

static ETX_OTA_Status etx_ota_process_data(uint8_t *buf)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	/** <b>Local pointer cmd:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Command_Packet_t type. */
	ETX_OTA_Command_Packet_t *cmd = (ETX_OTA_Command_Packet_t *) buf;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	61fb      	str	r3, [r7, #28]

	/* Check if we received the ETX OTA Abort Command and, if true, stop the ETX OTA process. */
	#if ETX_OTA_VERBOSE
		printf("Processing data of the latest ETX OTA Packet...\r\n");
	#endif
	if (cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <etx_ota_process_data+0x20>
	{
		if (cmd->cmd == ETX_OTA_CMD_ABORT)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d101      	bne.n	80026d4 <etx_ota_process_data+0x20>
		{
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Abort command received. Stopping the process...\r\n");
			#endif
			return ETX_OTA_EC_STOP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d2      	b.n	800287a <etx_ota_process_data+0x1c6>
		}
	}

	switch (etx_ota_state)
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <etx_ota_process_data+0x1d0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	f200 80cd 	bhi.w	8002878 <etx_ota_process_data+0x1c4>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <etx_ota_process_data+0x30>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	080026fd 	.word	0x080026fd
 80026ec:	0800271b 	.word	0x0800271b
 80026f0:	080027c3 	.word	0x080027c3
 80026f4:	0800283b 	.word	0x0800283b
	{
		case ETX_OTA_STATE_IDLE:
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Process is in Idle State.\r\n");
			#endif
			return ETX_OTA_EC_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e0be      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_START:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd == ETX_OTA_CMD_START))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <etx_ota_process_data+0x62>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <etx_ota_process_data+0x62>
			{
				#if ETX_OTA_VERBOSE
					printf("DONE: Received ETX OTA Start Command.\r\n");
				#endif
				etx_ota_state = ETX_OTA_STATE_HEADER;
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <etx_ota_process_data+0x1d0>)
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e0b1      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA Start Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002716:	2304      	movs	r3, #4
 8002718:	e0af      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_HEADER:
			/** <b>Local pointer header:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Header_Packet_t type. */
			ETX_OTA_Header_Packet_t *header = (ETX_OTA_Header_Packet_t *) buf;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

			if (header->packet_type == ETX_OTA_PACKET_TYPE_HEADER)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d14b      	bne.n	80027be <etx_ota_process_data+0x10a>
			{
				/** <b>Local variable header_ret:</b> Return value of a @ref FirmUpdConf_Status function function type. */
				int16_t  header_ret;

				/* We validate that the Firmware Image to be received is either a Bootloader or an Application Firmware Image. */
				switch (header->meta_data.payload_type)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	7cdb      	ldrb	r3, [r3, #19]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d026      	beq.n	800277c <etx_ota_process_data+0xc8>
 800272e:	2b02      	cmp	r3, #2
 8002730:	dc26      	bgt.n	8002780 <etx_ota_process_data+0xcc>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <etx_ota_process_data+0x88>
 8002736:	2b01      	cmp	r3, #1
 8002738:	d010      	beq.n	800275c <etx_ota_process_data+0xa8>
 800273a:	e021      	b.n	8002780 <etx_ota_process_data+0xcc>
				{
					case ETX_OTA_Application_Firmware_Image:
						/* We validate the size of the Application Firmware Image to be received. */
						if (header->meta_data.package_size > ETX_OTA_APP_FW_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3fb0 	cmp.w	r3, #90112	; 0x16000
 8002744:	d901      	bls.n	800274a <etx_ota_process_data+0x96>
						{
							#if ETX_OTA_VERBOSE
								printf("ERROR: The given Application Firmware Image (of size %ld) exceeds the maximum bytes allowed (which is %d).\r\n", header->meta_data.package_size, ETX_OTA_APP_FW_SIZE);
							#endif
							return ETX_OTA_EC_NA;
 8002746:	2303      	movs	r3, #3
 8002748:	e097      	b.n	800287a <etx_ota_process_data+0x1c6>
						}
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_NOT_STORED_IN_APP_FW;
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <etx_ota_process_data+0x1d4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	759a      	strb	r2, [r3, #22]
						p_fw_config->is_bl_fw_install_pending = NOT_PENDING;
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	75da      	strb	r2, [r3, #23]
						break;
 800275a:	e013      	b.n	8002784 <etx_ota_process_data+0xd0>
					case ETX_OTA_Bootloader_Firmware_Image:
						/* We validate the size of the Bootloader Firmware Image to be received. */
						if (header->meta_data.package_size > ETX_OTA_BL_FW_SIZE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002764:	d901      	bls.n	800276a <etx_ota_process_data+0xb6>
						{
							#if ETX_OTA_VERBOSE
								printf("ERROR: The given Bootloader Firmware Image (of size %ld) exceeds the maximum bytes allowed (which is %d).\r\n", header->meta_data.package_size, ETX_OTA_BL_FW_SIZE);
							#endif
							return ETX_OTA_EC_NA;
 8002766:	2303      	movs	r3, #3
 8002768:	e087      	b.n	800287a <etx_ota_process_data+0x1c6>
						}
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_STORED_IN_APP_FW;
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <etx_ota_process_data+0x1d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2201      	movs	r2, #1
 8002770:	759a      	strb	r2, [r3, #22]
						p_fw_config->is_bl_fw_install_pending = IS_PENDING;
 8002772:	4b45      	ldr	r3, [pc, #276]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	75da      	strb	r2, [r3, #23]
						break;
 800277a:	e003      	b.n	8002784 <etx_ota_process_data+0xd0>
					case ETX_OTA_Custom_Data:
						#if ETX_OTA_VERBOSE
							printf("WARNING: Received an ETX OTA Custom Data request.\r\n");
						#endif
						return ETX_OTA_EC_NA;
 800277c:	2303      	movs	r3, #3
 800277e:	e07c      	b.n	800287a <etx_ota_process_data+0x1c6>
					default:
						#if ETX_OTA_VERBOSE
							printf("WARNING: A Firmware Image was expected to be received from the host, but a different request was received instead.\r\n");
						#endif
						return ETX_OTA_EC_NA;
 8002780:	2303      	movs	r3, #3
 8002782:	e07a      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				/* We write the newly received Firmware Image Header data into a new data block of the Flash Memory designated to the @ref firmware_update_config sub-module. */
				p_fw_config->App_fw_size = header->meta_data.package_size;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	6852      	ldr	r2, [r2, #4]
 800278c:	609a      	str	r2, [r3, #8]
				p_fw_config->App_fw_rec_crc = header->meta_data.package_crc;
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	60da      	str	r2, [r3, #12]
				header_ret = firmware_update_configurations_write(p_fw_config);
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <etx_ota_process_data+0x1d4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fa97 	bl	8002cd0 <firmware_update_configurations_write>
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
				if (header_ret != FIRM_UPDT_CONF_EC_OK)
 80027a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <etx_ota_process_data+0x100>
				{
					#if ETX_OTA_VERBOSE
						printf("EXCEPTION CODE %d: The data was not written into the Firmware Update Configurations sub-module.\r\n", header_ret);
					#endif
					return header_ret;
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e062      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				#if ETX_OTA_VERBOSE
					printf("Received ETX OTA Header with a Firmware Size of %ld bytes.\r\n", p_fw_config->App_fw_size);
				#endif
				etx_ota_state = ETX_OTA_STATE_DATA;
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <etx_ota_process_data+0x1d0>)
 80027b6:	2203      	movs	r2, #3
 80027b8:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e05d      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Header Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 80027be:	2304      	movs	r3, #4
 80027c0:	e05b      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_DATA:
			/** <b>Local pointer data:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Data_Packet_t type. */
			ETX_OTA_Data_Packet_t *data = (ETX_OTA_Data_Packet_t *) buf;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	617b      	str	r3, [r7, #20]
			/** <b>Local variable data_ret:</b> Return value of a @ref ETX_OTA_Status function. */
			uint16_t data_ret;

			if (data->packet_type == ETX_OTA_PACKET_TYPE_DATA)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d133      	bne.n	8002836 <etx_ota_process_data+0x182>
			{
				/* Validate that the Payload received from the current ETX OTA Packet is perfectly divisible by 4 bytes (i.e., one word). */
				if ((data->data_len)%4 != 0)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	885b      	ldrh	r3, [r3, #2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <etx_ota_process_data+0x12e>
				{
					#if ETX_OTA_VERBOSE
						printf("ERROR: The size of the currently received Payload is not perfectly divisible by 4 bytes (i.e., one word).\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 80027de:	2304      	movs	r3, #4
 80027e0:	e04b      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				/* Write the ETX OTA Data Type Packet to the Flash Memory location of the Application Firmware. */
				data_ret = write_data_to_flash_app(buf+ETX_OTA_DATA_FIELD_INDEX, data->data_len, etx_ota_fw_received_size==0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1d18      	adds	r0, r3, #4
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	885b      	ldrh	r3, [r3, #2]
 80027ea:	b299      	uxth	r1, r3
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <etx_ota_process_data+0x1d8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f89a 	bl	8002934 <write_data_to_flash_app>
 8002800:	4603      	mov	r3, r0
 8002802:	827b      	strh	r3, [r7, #18]
				data_ret = HAL_ret_handler(data_ret);
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f9a1 	bl	8002b50 <HAL_ret_handler>
 800280e:	4603      	mov	r3, r0
 8002810:	827b      	strh	r3, [r7, #18]

				if (data_ret != HAL_OK)
 8002812:	8a7b      	ldrh	r3, [r7, #18]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <etx_ota_process_data+0x16a>
				{
					return data_ret;
 8002818:	8a7b      	ldrh	r3, [r7, #18]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e02d      	b.n	800287a <etx_ota_process_data+0x1c6>
								printf("[%ld/%ld] parts of the Application Firmware Image are now installed into our MCU/MPU...\r\n", (etx_ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE+1), p_fw_config->App_fw_size/ETX_OTA_DATA_MAX_SIZE+1);
							}
						}
					}
				#endif
				if (etx_ota_fw_received_size >= p_fw_config->App_fw_size)
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <etx_ota_process_data+0x1d8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d802      	bhi.n	8002832 <etx_ota_process_data+0x17e>
				{
					/* received the full data. Therefore, move to the End State of the ETX OTA Process. */
					etx_ota_state = ETX_OTA_STATE_END;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <etx_ota_process_data+0x1d0>)
 800282e:	2204      	movs	r2, #4
 8002830:	701a      	strb	r2, [r3, #0]
				}
				return ETX_OTA_EC_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e021      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Data Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002836:	2304      	movs	r3, #4
 8002838:	e01f      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_END:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd==ETX_OTA_CMD_END))
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <etx_ota_process_data+0x1c0>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <etx_ota_process_data+0x1c0>
			{
				/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Application Firmware Image that has just been installed into our MCU/MPU. */
				uint32_t cal_crc = crc32_mpeg2((uint8_t *) ETX_APP_FLASH_ADDR, p_fw_config->App_fw_size);
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <etx_ota_process_data+0x1d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4619      	mov	r1, r3
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <etx_ota_process_data+0x1dc>)
 8002854:	f000 f994 	bl	8002b80 <crc32_mpeg2>
 8002858:	61b8      	str	r0, [r7, #24]
					else
					{
						printf("Validating the received Application Firmware Image...\r\n");
					}
				#endif
				if (cal_crc != p_fw_config->App_fw_rec_crc)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <etx_ota_process_data+0x1d4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <etx_ota_process_data+0x1b6>
						{
							printf("The 32-bit CRC of the installed Application Firmware Image mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
															(unsigned int) cal_crc, (unsigned int) p_fw_config->App_fw_rec_crc);
						}
					#endif
					return ETX_OTA_EC_ERR;
 8002866:	2304      	movs	r3, #4
 8002868:	e007      	b.n	800287a <etx_ota_process_data+0x1c6>
					else
					{
						printf("DONE: 32-bit CRC of the installed Application Firmware Image has been successfully validated.\r\n");
					}
				#endif
				etx_ota_state = ETX_OTA_STATE_IDLE;
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <etx_ota_process_data+0x1d0>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e002      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA End Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002874:	2304      	movs	r3, #4
 8002876:	e000      	b.n	800287a <etx_ota_process_data+0x1c6>
		default:
			/* Should not come here */
			#if ETX_OTA_VERBOSE
				printf("ERROR: The current ETX OTA State %d is unrecognized by our MCU/MPU.\r\n", etx_ota_state);
			#endif
			return ETX_OTA_EC_ERR;
 8002878:	2304      	movs	r3, #4
			break;
	}
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200004bd 	.word	0x200004bd
 8002888:	200004c4 	.word	0x200004c4
 800288c:	200004c0 	.word	0x200004c0
 8002890:	08008000 	.word	0x08008000

08002894 <etx_ota_send_resp>:

//#pragma GCC diagnostic ignored "-Wstringop-overflow=" // This pragma definition will tell the compiler to ignore an expected Compilation Warning (due to a code functionality that it is strictly needed to work that way) that gives using the HAL_CRC_Calculate() function inside the etx_ota_send_resp() function,. which states the following: 'HAL_CRC_Calculate' accessing 4 bytes in a region of size 1.
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	ETX_OTA_Status  ret;

	ETX_OTA_Response_Packet_t response =
 800289e:	23aa      	movs	r3, #170	; 0xaa
 80028a0:	733b      	strb	r3, [r7, #12]
 80028a2:	2303      	movs	r3, #3
 80028a4:	737b      	strb	r3, [r7, #13]
 80028a6:	2301      	movs	r3, #1
 80028a8:	81fb      	strh	r3, [r7, #14]
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	743b      	strb	r3, [r7, #16]
 80028ae:	2300      	movs	r3, #0
 80028b0:	747b      	strb	r3, [r7, #17]
 80028b2:	2300      	movs	r3, #0
 80028b4:	74bb      	strb	r3, [r7, #18]
 80028b6:	2300      	movs	r3, #0
 80028b8:	74fb      	strb	r3, [r7, #19]
 80028ba:	2300      	movs	r3, #0
 80028bc:	753b      	strb	r3, [r7, #20]
 80028be:	23bb      	movs	r3, #187	; 0xbb
 80028c0:	757b      	strb	r3, [r7, #21]
		.data_len    	= 1U,
		.status      	= response_status,
		.crc			= 0U,
		.eof         	= ETX_OTA_EOF
	};
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	3304      	adds	r3, #4
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f958 	bl	8002b80 <crc32_mpeg2>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 3011 	str.w	r3, [r7, #17]

	switch (ETX_OTA_hardware_protocol)
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <etx_ota_send_resp+0x98>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <etx_ota_send_resp+0x50>
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d012      	beq.n	8002908 <etx_ota_send_resp+0x74>
 80028e2:	e01c      	b.n	800291e <etx_ota_send_resp+0x8a>
	{
		case ETX_OTA_hw_Protocol_UART:
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <etx_ota_send_resp+0x9c>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f107 010c 	add.w	r1, r7, #12
 80028ec:	f242 3328 	movw	r3, #9000	; 0x2328
 80028f0:	220a      	movs	r2, #10
 80028f2:	f002 fe35 	bl	8005560 <HAL_UART_Transmit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
			ret = HAL_ret_handler(ret);
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f927 	bl	8002b50 <HAL_ret_handler>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]
			break;
 8002906:	e00c      	b.n	8002922 <etx_ota_send_resp+0x8e>
		case ETX_OTA_hw_Protocol_BT:
			ret = send_hm10_ota_data((uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	f242 3228 	movw	r2, #9000	; 0x2328
 8002910:	210a      	movs	r1, #10
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ffd2 	bl	80038bc <send_hm10_ota_data>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
			break;
 800291c:	e001      	b.n	8002922 <etx_ota_send_resp+0x8e>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 800291e:	2304      	movs	r3, #4
 8002920:	e000      	b.n	8002924 <etx_ota_send_resp+0x90>
	}

	return ret;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200004cc 	.word	0x200004cc
 8002930:	200004c8 	.word	0x200004c8

08002934 <write_data_to_flash_app>:

static ETX_OTA_Status write_data_to_flash_app(uint8_t *data, uint16_t data_len, bool is_first_block)
{
 8002934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002938:	b08c      	sub	sp, #48	; 0x30
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	uint8_t  ret;
	/**	<b>Local variable p_data:</b> Pointer to the data at which the \p data param points to but in \c uint32_t Type. */
	uint32_t *p_data = (uint32_t *) data;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash Memory of our MCU/MPU. */
	ret = HAL_FLASH_Unlock();
 800294a:	f001 fe65 	bl	8004618 <HAL_FLASH_Unlock>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f8f9 	bl	8002b50 <HAL_ret_handler>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(ret != HAL_OK)
 8002964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <write_data_to_flash_app+0x3e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; ETX OTA Exception code %d.\r\n", ret);
		#endif
		return ret;
 800296c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002970:	e0e4      	b.n	8002b3c <write_data_to_flash_app+0x208>
	}

	/* Erase Flash Memory dedicated to our MCU/MPU's Application Firmware but only if the current ETX OTA Data Type Packet being processed is the first one. */
	if (is_first_block)
 8002972:	787b      	ldrb	r3, [r7, #1]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <write_data_to_flash_app+0x88>
			printf("Erasing the Flash Memory pages designated to the Application Firmware of our MCU/MPU...\r\n");
		#endif
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t page_error;

		EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.Banks        = FLASH_BANK_1;
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress  = ETX_APP_FLASH_ADDR;
 8002980:	4b71      	ldr	r3, [pc, #452]	; (8002b48 <write_data_to_flash_app+0x214>)
 8002982:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbPages      = ETX_APP_FLASH_PAGES_SIZE;
 8002984:	2358      	movs	r3, #88	; 0x58
 8002986:	61bb      	str	r3, [r7, #24]

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002988:	f107 0208 	add.w	r2, r7, #8
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 ff28 	bl	80047e8 <HAL_FLASHEx_Erase>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ret = HAL_ret_handler(ret);
 800299e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f8d4 	bl	8002b50 <HAL_ret_handler>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != HAL_OK)
 80029ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <write_data_to_flash_app+0x88>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: Flash Memory pages of the Application Firmware of our MCU/MPU could not be erased; ETX OTA Exception code %d.\r\n", ret);
			#endif
			return ret;
 80029b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ba:	e0bf      	b.n	8002b3c <write_data_to_flash_app+0x208>
			printf("DONE: Flash Memory pages designated to the Application Firmware of our MCU/MPU have been successfully erased.\r\n");
		#endif
	}

	/**	<b>Local variable word_data:</b> Array of 4 bytes (i.e., 1 word) initialized with the zeros (i.e., 0x00 in each byte) to then overwrite them if needed with the remaining bytes of the last word from the Application Firmware Image. */
	uint8_t word_data[4] = {0x00, 0x00, 0x00, 0x00};
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
	/** <b>Local variable data_len_minus_one_word:</b> Holds the length in bytes of the "Data" field from the current ETX OTA Data Type Packet, except for the last four bytes. */
	uint16_t data_len_minus_one_word = data_len - 4;
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	3b04      	subs	r3, #4
 80029c4:	843b      	strh	r3, [r7, #32]
	/** <b>Local variable remaining_data_len_of_last_word:</b> Should contain the remaining bytes of the last word from the Application Firmware Image that are pending to be written into our MCU/MPU's Flash Memory. */
	uint8_t remaining_data_len_of_last_word;
	/**	<b>Local variable bytes_flashed:</b> Indicator of how many bytes of the current ETX OTA Packet's Payload have been written into the designated Flash Memory of the Application Firmware. */
	uint16_t bytes_flashed = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if (data_len > 4)
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d959      	bls.n	8002a84 <write_data_to_flash_app+0x150>
	{
		/* Write the entire Application Firmware Image into our MCU/MPU's Flash Memory, except for the last word (i.e., the last four bytes). */
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 80029d0:	e02f      	b.n	8002a32 <write_data_to_flash_app+0xfe>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <write_data_to_flash_app+0x218>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80029da:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
									(ETX_APP_FLASH_ADDR + etx_ota_fw_received_size),
									p_data[bytes_flashed/4]);
 80029de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80029ec:	2200      	movs	r2, #0
 80029ee:	4698      	mov	r8, r3
 80029f0:	4691      	mov	r9, r2
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	2002      	movs	r0, #2
 80029f8:	f001 fd9e 	bl	8004538 <HAL_FLASH_Program>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			ret = HAL_ret_handler(ret);
 8002a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8a2 	bl	8002b50 <HAL_ret_handler>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if (ret == HAL_OK)
 8002a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <write_data_to_flash_app+0xf2>
			{
				etx_ota_fw_received_size += 4;
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e002      	b.n	8002a2c <write_data_to_flash_app+0xf8>
			else
			{
				#if ETX_OTA_VERBOSE
					printf("EXCEPTION CODE %d: The Firmware Image data was not successfully written into our MCU/MPU.\r\n", ret);
				#endif
				return ret;
 8002a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2a:	e087      	b.n	8002b3c <write_data_to_flash_app+0x208>
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 8002a2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a2e:	3304      	adds	r3, #4
 8002a30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002a34:	8c3b      	ldrh	r3, [r7, #32]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3cb      	bcc.n	80029d2 <write_data_to_flash_app+0x9e>
			}
		}

		/* Populate the remaining bytes of the Application Firmware Image that is currently being written into our MCU/MPU's Flash Memory via the \c word_data variable. */
		// NOTE: This way, if there are unused bytes in the \c word _data variable after filling it with the remaining bytes of the Application Firmware Image, these will be left with the values that the Flash Memory recognizes as Reset Values.
		remaining_data_len_of_last_word = data_len - bytes_flashed;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a4e:	e012      	b.n	8002a76 <write_data_to_flash_app+0x142>
		{
			word_data[i] = data[bytes_flashed + i];
 8002a50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a56:	4413      	add	r3, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	3330      	adds	r3, #48	; 0x30
 8002a66:	443b      	add	r3, r7
 8002a68:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a70:	3301      	adds	r3, #1
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a76:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3e6      	bcc.n	8002a50 <write_data_to_flash_app+0x11c>
 8002a82:	e01c      	b.n	8002abe <write_data_to_flash_app+0x18a>
	}
	else
	{
		/* Populate the remaining bytes of the Application Firmware Image that is currently being written into our MCU/MPU's Flash Memory via the \c word_data variable. */
		// NOTE: This way, if there are unused bytes in the \c word _data variable after filling it with the remaining bytes of the Application Firmware Image, these will be left with the values that the Flash Memory recognizes as Reset Values.
		remaining_data_len_of_last_word = data_len;
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a90:	e00f      	b.n	8002ab2 <write_data_to_flash_app+0x17e>
		{
			word_data[i] = data[i];
 8002a92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	3330      	adds	r3, #48	; 0x30
 8002aa2:	443b      	add	r3, r7
 8002aa4:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002aac:	3301      	adds	r3, #1
 8002aae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ab2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3e9      	bcc.n	8002a92 <write_data_to_flash_app+0x15e>
		}
	}

	/* Write the remaining bytes of the Application Firmware Image into the Flash Memory designated pages to our MCU/MPU's Application Firmware. */
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002ac6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
							(ETX_APP_FLASH_ADDR + etx_ota_fw_received_size),
							*((uint32_t *) word_data));
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	681b      	ldr	r3, [r3, #0]
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	461c      	mov	r4, r3
 8002ad4:	4615      	mov	r5, r2
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	2002      	movs	r0, #2
 8002adc:	f001 fd2c 	bl	8004538 <HAL_FLASH_Program>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f830 	bl	8002b50 <HAL_ret_handler>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret == HAL_OK)
 8002af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <write_data_to_flash_app+0x204>
	{
		bytes_flashed += remaining_data_len_of_last_word;
 8002afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b06:	4413      	add	r3, r2
 8002b08:	85bb      	strh	r3, [r7, #44]	; 0x2c
		etx_ota_fw_received_size += remaining_data_len_of_last_word;
 8002b0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002b16:	6013      	str	r3, [r2, #0]
		#endif
		return ret;
	}

	/* Lock the Flash Memory, just like it originally was before calling this @ref write_data_to_flash_app function. */
	ret = HAL_FLASH_Lock();
 8002b18:	f001 fda4 	bl	8004664 <HAL_FLASH_Lock>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f812 	bl	8002b50 <HAL_ret_handler>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be locked; ETX OTA Exception code %d.\r\n", ret);
		#endif
	}

	return ret;
 8002b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b36:	e001      	b.n	8002b3c <write_data_to_flash_app+0x208>
		return ret;
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3730      	adds	r7, #48	; 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b46:	bf00      	nop
 8002b48:	08008000 	.word	0x08008000
 8002b4c:	200004c0 	.word	0x200004c0

08002b50 <HAL_ret_handler>:

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d006      	beq.n	8002b6e <HAL_ret_handler+0x1e>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dd06      	ble.n	8002b72 <HAL_ret_handler+0x22>
 8002b64:	3b02      	subs	r3, #2
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d803      	bhi.n	8002b72 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return ETX_OTA_EC_NR;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return ETX_OTA_EC_ERR;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e000      	b.n	8002b74 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <crc32_mpeg2>:
        0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
        0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4,
};												/**< @brief Global 32-bit CRC (MPEG-2) Lookup Table. */

uint32_t crc32_mpeg2(uint8_t *p_data, uint32_t data_length)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
    /** <b>Local variable checksum:</b> Will hold the resulting checksum of the 32-bit CRC Hash Function to be calculated. @note A checksum is any sort of mathematical operation that it is performed on data to represent its number of bits in a transmission message. This is usually used by programmers to detect high-level errors within data transmissions. The way this is used is prior to transmission, such that every piece of data or file can be assigned a checksum value after running a cryptographic has function, which in this particular case, the has function is 32-bit CRC. */
    uint32_t checksum = 0xFFFFFFFF;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	617b      	str	r3, [r7, #20]

    /* Validate the length of the data from which it is being requested to calculate the 32-bit CRC. */
    if (data_length == 0xFFFFFFFF)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d101      	bne.n	8002b9c <crc32_mpeg2+0x1c>
    {
    	return checksum;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	e01c      	b.n	8002bd6 <crc32_mpeg2+0x56>
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e014      	b.n	8002bcc <crc32_mpeg2+0x4c>
    {
        uint8_t top = (uint8_t) (checksum >> 24);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	0e1b      	lsrs	r3, r3, #24
 8002ba6:	73fb      	strb	r3, [r7, #15]
        top ^= p_data[i];
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	73fb      	strb	r3, [r7, #15]
        checksum = (checksum << 8) ^ crc_table[top];
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4908      	ldr	r1, [pc, #32]	; (8002be0 <crc32_mpeg2+0x60>)
 8002bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bc2:	4053      	eors	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i<data_length; i++)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3e6      	bcc.n	8002ba2 <crc32_mpeg2+0x22>
    }
    return checksum;
 8002bd4:	697b      	ldr	r3, [r7, #20]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	08006920 	.word	0x08006920

08002be4 <firmware_update_configurations_init>:
 * @date September 26, 2023.
 */
static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

FirmUpdConf_Status firmware_update_configurations_init()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Data Block to which the @ref p_most_recent_val pointer points to. */
	uint32_t cal_crc;
	/** <b>Local variable p_next_val:</b> Firmware Update Configurations Block pointer that should point to the Firmware Update Configurations Block located right after the one with the most recently written value (i.e., right after the Data Block to which the @ref p_most_recent_val pointer points to). */
	firmware_update_config_t *p_next_val;

	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <firmware_update_configurations_init+0xa8>)
 8002bee:	601a      	str	r2, [r3, #0]

	/* Cycle through flash until an erased value is found. */
	#if ETX_OTA_VERBOSE
		printf("Initializing Firmware Update Configurations sub-module...\r\n");
	#endif
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <firmware_update_configurations_init+0xac>)
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e02b      	b.n	8002c4e <firmware_update_configurations_init+0x6a>
	{
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	7fdb      	ldrb	r3, [r3, #31]
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d121      	bne.n	8002c42 <firmware_update_configurations_init+0x5e>
		{
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	7fdb      	ldrb	r3, [r3, #31]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11c      	bne.n	8002c42 <firmware_update_configurations_init+0x5e>
			{
				/* Calculate and verify the 32-bit CRC of @ref p_most_recent_val . If validation is successful, then proceed normally. Otherwise, ignore the current Data Block that @ref p_most_recent_val is pointing towards to and keep searching. */
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	221c      	movs	r2, #28
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffb4 	bl	8002b80 <crc32_mpeg2>
 8002c18:	60b8      	str	r0, [r7, #8]
				if(cal_crc != p_most_recent_val->crc32)
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d018      	beq.n	8002c58 <firmware_update_configurations_init+0x74>
				{
					/* Since the Flash Memory has been identified to be corrupted, erase the contents of the two Flash Memory pages of the Firmware Update Configurations sub-module. */
					#if ETX_OTA_VERBOSE
						printf("WARNING: One of the Flash Memory pages designated to the Firmware Update Configurations sub-module has been identified to be corrupted.\r\n");
					#endif
					ret = restore_firm_updt_config_flash_memory();
 8002c26:	f000 f909 	bl	8002e3c <restore_firm_updt_config_flash_memory>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
					if (ret != FIRM_UPDT_CONF_EC_OK)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <firmware_update_configurations_init+0x54>
					{
						#if ETX_OTA_VERBOSE
							printf("ERROR: The Firmware Update Configurations sub-module could not be initialized.\r\n");
						#endif
						return FIRM_UPDT_CONF_EC_CRPT;
 8002c34:	2305      	movs	r3, #5
 8002c36:	e022      	b.n	8002c7e <firmware_update_configurations_init+0x9a>
					}

					/* We define that there is no data in the Flash Memory pages of the Firmware Update Configurations sub-module. */
					p_most_recent_val = NULL;
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

					#if ETX_OTA_VERBOSE
						printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
					#endif
					return FIRM_UPDT_CONF_EC_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e01d      	b.n	8002c7e <firmware_update_configurations_init+0x9a>
				}
				break;
			}
		}
		p_most_recent_val = p_next_val;
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6013      	str	r3, [r2, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <firmware_update_configurations_init+0xb0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d3cf      	bcc.n	8002bf6 <firmware_update_configurations_init+0x12>
 8002c56:	e000      	b.n	8002c5a <firmware_update_configurations_init+0x76>
				break;
 8002c58:	bf00      	nop
	}

	/* If the end of the for-loop is reached and if last location is erased, then there is currently no data in the Firmware Update Configuration's designated Flash Memory pages. */
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <firmware_update_configurations_init+0xb0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d107      	bne.n	8002c72 <firmware_update_configurations_init+0x8e>
	{
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	7fdb      	ldrb	r3, [r3, #31]
 8002c68:	2bff      	cmp	r3, #255	; 0xff
 8002c6a:	d102      	bne.n	8002c72 <firmware_update_configurations_init+0x8e>
		{
			p_most_recent_val = NULL;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
		}
	}

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8002c72:	f000 f903 	bl	8002e7c <prep_page_swap>
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
		#endif
	}

	return ret;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	b2db      	uxtb	r3, r3
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200004d4 	.word	0x200004d4
 8002c8c:	0801efe0 	.word	0x0801efe0
 8002c90:	0801e000 	.word	0x0801e000
 8002c94:	0801f000 	.word	0x0801f000

08002c98 <firmware_update_configurations_read>:

FirmUpdConf_Status firmware_update_configurations_read(firmware_update_config_data_t *p_data)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	firmware_update_config_t *p_current_val = p_most_recent_val;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <firmware_update_configurations_read+0x30>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
	if (p_current_val == NULL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <firmware_update_configurations_read+0x18>
	{
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <firmware_update_configurations_read+0x34>)
 8002cae:	60fb      	str	r3, [r7, #12]
	}

	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2218      	movs	r2, #24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f003 f8d3 	bl	8005e64 <memcpy>

	return FIRM_UPDT_CONF_EC_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200004d4 	.word	0x200004d4
 8002ccc:	0801e000 	.word	0x0801e000

08002cd0 <firmware_update_configurations_write>:

FirmUpdConf_Status firmware_update_configurations_write(firmware_update_config_data_t *p_data)
{
 8002cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd4:	b090      	sub	sp, #64	; 0x40
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function. */
	uint16_t ret;
	/**	<b>Local variable new_val_struct:</b> New Data Block into which we will pass the data that wants to be written and where we will also set the corresponding flag and CRC32 values for it. */
	firmware_update_config_t new_val_struct;
	/**	<b>Local pointer p_new_val_struct:</b> Pointer to the \c new_val_struct data but in \c uint32_t Type. */
	uint32_t *p_new_val_struct = (uint32_t *) &new_val_struct;
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
	/**	<b>Local pointer p_next_val:</b> @ref firmware_update_config_t Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <firmware_update_configurations_write+0x160>)
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* We pass the received data into a new Data Block structure and we calculate and also set its corresponding 32-bit CRC. */
	new_val_struct.flags.is_erased = FLASH_BLOCK_NOT_ERASED;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	new_val_struct.flags.reserved1 = DATA_BLOCK_8BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002cea:	23ff      	movs	r3, #255	; 0xff
 8002cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf4:	853b      	strh	r3, [r7, #40]	; 0x28
	p_data->reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfc:	741a      	strb	r2, [r3, #16]
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	745a      	strb	r2, [r3, #17]
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	749a      	strb	r2, [r3, #18]
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	74da      	strb	r2, [r3, #19]
	p_data->reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
 8002d16:	751a      	strb	r2, [r3, #20]
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	755a      	strb	r2, [r3, #21]
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f107 0410 	add.w	r4, r7, #16
 8002d24:	461d      	mov	r5, r3
 8002d26:	6828      	ldr	r0, [r5, #0]
 8002d28:	6869      	ldr	r1, [r5, #4]
 8002d2a:	68aa      	ldr	r2, [r5, #8]
 8002d2c:	68eb      	ldr	r3, [r5, #12]
 8002d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d30:	6928      	ldr	r0, [r5, #16]
 8002d32:	6969      	ldr	r1, [r5, #20]
 8002d34:	c403      	stmia	r4!, {r0, r1}
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002d36:	231c      	movs	r3, #28
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff1c 	bl	8002b80 <crc32_mpeg2>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]

	/* We calculate the next available address. */
	if (p_most_recent_val != NULL)
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <firmware_update_configurations_write+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <firmware_update_configurations_write+0x98>
	{
		p_next_val = p_most_recent_val + 1;
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <firmware_update_configurations_write+0x164>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3320      	adds	r3, #32
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5e:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <firmware_update_configurations_write+0x168>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <firmware_update_configurations_write+0x98>
		{
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <firmware_update_configurations_write+0x160>)
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
	}
	/**	<b>Local pointer p_next_val_in_words:</b> 32-bits Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	uint32_t *p_next_val_in_words = (uint32_t *) p_next_val;
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30

	/* We unlock our MCU/MPU's Flash Memory to be able to write in it. */
	ret = HAL_FLASH_Unlock();
 8002d6c:	f001 fc54 	bl	8004618 <HAL_FLASH_Unlock>
 8002d70:	4603      	mov	r3, r0
 8002d72:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ret = HAL_ret_handler(ret);
 8002d74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f8f7 	bl	8002f6c <HAL_ret_handler>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (ret != HAL_OK)
 8002d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <firmware_update_configurations_write+0xbe>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e04a      	b.n	8002e24 <firmware_update_configurations_write+0x154>
	}

	/* Write the new Firmware Update Configuration's Data Block into the corresponding Flash Memory address. */
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002d94:	e027      	b.n	8002de6 <firmware_update_configurations_write+0x116>
	{
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
								(uint32_t) (p_next_val_in_words + words_written),
 8002d96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	4413      	add	r3, r2
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002da0:	4619      	mov	r1, r3
							    p_new_val_struct[words_written]);
 8002da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002daa:	4413      	add	r3, r2
 8002dac:	681b      	ldr	r3, [r3, #0]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002dae:	2200      	movs	r2, #0
 8002db0:	4698      	mov	r8, r3
 8002db2:	4691      	mov	r9, r2
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	2002      	movs	r0, #2
 8002dba:	f001 fbbd 	bl	8004538 <HAL_FLASH_Program>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		ret = HAL_ret_handler(ret);
 8002dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f8d0 	bl	8002f6c <HAL_ret_handler>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (ret != HAL_OK)
 8002dd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <firmware_update_configurations_write+0x10c>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: Flash Write Error.\r\n");
			#endif
			return ret;
 8002dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e023      	b.n	8002e24 <firmware_update_configurations_write+0x154>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002ddc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002de0:	3301      	adds	r3, #1
 8002de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002de6:	2208      	movs	r2, #8
 8002de8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d3d2      	bcc.n	8002d96 <firmware_update_configurations_write+0xc6>
		}
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8002df0:	f001 fc38 	bl	8004664 <HAL_FLASH_Lock>
 8002df4:	4603      	mov	r3, r0
 8002df6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ret = HAL_ret_handler(ret);
 8002df8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f8b5 	bl	8002f6c <HAL_ret_handler>
 8002e02:	4603      	mov	r3, r0
 8002e04:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (ret != HAL_OK)
 8002e06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <firmware_update_configurations_write+0x142>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002e0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e008      	b.n	8002e24 <firmware_update_configurations_write+0x154>
	}

	/* Update the @ref p_most_recent_val pointer to the most recent Data Block of the Firmware Update Configurations sub-module. */
	p_most_recent_val = p_next_val;
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <firmware_update_configurations_write+0x164>)
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	6013      	str	r3, [r2, #0]

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8002e18:	f000 f830 	bl	8002e7c <prep_page_swap>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested data was successfully written into the Firmware Update Configurations sub-module.\r\n");
	#endif
	return ret;
 8002e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e22:	b2db      	uxtb	r3, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3740      	adds	r7, #64	; 0x40
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e2e:	bf00      	nop
 8002e30:	0801e000 	.word	0x0801e000
 8002e34:	200004d4 	.word	0x200004d4
 8002e38:	0801f000 	.word	0x0801f000

08002e3c <restore_firm_updt_config_flash_memory>:

static FirmUpdConf_Status restore_firm_updt_config_flash_memory()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	uint16_t ret;

	#if ETX_OTA_VERBOSE
		printf("Erasing all Flash Memory pages from the Firmware Update Configurations sub-module to restore their functionalities...\r\n");
	#endif
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <restore_firm_updt_config_flash_memory+0x38>)
 8002e44:	f000 f84e 	bl	8002ee4 <page_erase>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	80fb      	strh	r3, [r7, #6]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <restore_firm_updt_config_flash_memory+0x1c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 1 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e009      	b.n	8002e6c <restore_firm_updt_config_flash_memory+0x30>
	}
	page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002e58:	4807      	ldr	r0, [pc, #28]	; (8002e78 <restore_firm_updt_config_flash_memory+0x3c>)
 8002e5a:	f000 f843 	bl	8002ee4 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <restore_firm_updt_config_flash_memory+0x2e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 2 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e000      	b.n	8002e6c <restore_firm_updt_config_flash_memory+0x30>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The Flash Memory pages from the Firmware Update Configurations sub-module have been restored to its original factory form.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	0801e000 	.word	0x0801e000
 8002e78:	0801e800 	.word	0x0801e800

08002e7c <prep_page_swap>:

static FirmUpdConf_Status prep_page_swap()
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	#if ETX_OTA_VERBOSE
		printf("Preparing the Firmware Update Configurations sub-module for a possible future page swap...\r\n");
	#endif

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <prep_page_swap+0x58>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <prep_page_swap+0x5c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d109      	bne.n	8002ea0 <prep_page_swap+0x24>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <prep_page_swap+0x60>)
 8002e8e:	7fdb      	ldrb	r3, [r3, #31]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <prep_page_swap+0x24>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 2...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002e94:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <prep_page_swap+0x64>)
 8002e96:	f000 f825 	bl	8002ee4 <page_erase>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 8002e9e:	e012      	b.n	8002ec6 <prep_page_swap+0x4a>
			#if ETX_OTA_VERBOSE
				printf("DONE: The Firmware Update Configuration's page 2 was successfully erased.\r\n");
			#endif
		}
	}
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <prep_page_swap+0x58>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <prep_page_swap+0x64>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10b      	bne.n	8002ec2 <prep_page_swap+0x46>
			(p_most_recent_val-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <prep_page_swap+0x58>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3b20      	subs	r3, #32
 8002eb0:	7fdb      	ldrb	r3, [r3, #31]
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <prep_page_swap+0x46>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 1...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002eb6:	4808      	ldr	r0, [pc, #32]	; (8002ed8 <prep_page_swap+0x5c>)
 8002eb8:	f000 f814 	bl	8002ee4 <page_erase>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 8002ec0:	e001      	b.n	8002ec6 <prep_page_swap+0x4a>
			#endif
		}
	}
	else
	{
		ret = FIRM_UPDT_CONF_EC_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: No page swap preparations required at the moment.\r\n");
		#endif
	}

	return ret;
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	b2db      	uxtb	r3, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200004d4 	.word	0x200004d4
 8002ed8:	0801e000 	.word	0x0801e000
 8002edc:	0801efe0 	.word	0x0801efe0
 8002ee0:	0801e800 	.word	0x0801e800

08002ee4 <page_erase>:

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
		printf("Erasing the Flash memory page that starts at address 0x%08X...\r\n", (unsigned int) page_start_addr);
	#endif
	HAL_StatusTypeDef ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 8002eec:	f001 fb94 	bl	8004618 <HAL_FLASH_Unlock>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f838 	bl	8002f6c <HAL_ret_handler>
 8002efc:	4603      	mov	r3, r0
 8002efe:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <page_erase+0x26>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	e02c      	b.n	8002f64 <page_erase+0x80>
	}

	/* Erase desired Flash Memory page. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = 1U;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002f1a:	f107 0208 	add.w	r2, r7, #8
 8002f1e:	f107 030c 	add.w	r3, r7, #12
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fc5f 	bl	80047e8 <HAL_FLASHEx_Erase>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f81b 	bl	8002f6c <HAL_ret_handler>
 8002f36:	4603      	mov	r3, r0
 8002f38:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <page_erase+0x60>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested Flash Memory page at address 0x%08X could not be erased; Firmware Update Configurations Exception code %d.\r\n", (unsigned int) page_start_addr, ret);
		#endif
		return ret;
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	e00f      	b.n	8002f64 <page_erase+0x80>
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8002f44:	f001 fb8e 	bl	8004664 <HAL_FLASH_Lock>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f80c 	bl	8002f6c <HAL_ret_handler>
 8002f54:	4603      	mov	r3, r0
 8002f56:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <page_erase+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	e000      	b.n	8002f64 <page_erase+0x80>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested Flash Memory page was successfully erased.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_ret_handler>:

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d006      	beq.n	8002f8a <HAL_ret_handler+0x1e>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dd06      	ble.n	8002f8e <HAL_ret_handler+0x22>
 8002f80:	3b02      	subs	r3, #2
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d803      	bhi.n	8002f8e <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e000      	b.n	8002f90 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
	...

08002f9c <init_hm10_module>:
 * @date October 17, 2023.
 */
static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

void init_hm10_module(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	p_huart = huart;
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <init_hm10_module+0x18>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	200004d8 	.word	0x200004d8

08002fb8 <send_hm10_reset_cmd>:

	return HM10_EC_OK;
}

HM10_Status send_hm10_reset_cmd()
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8002fbe:	f000 fcbd 	bl	800393c <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Reset Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Reset Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fc4:	2241      	movs	r2, #65	; 0x41
 8002fc6:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fca:	2254      	movs	r2, #84	; 0x54
 8002fcc:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fd0:	222b      	movs	r2, #43	; 0x2b
 8002fd2:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fd6:	2252      	movs	r2, #82	; 0x52
 8002fd8:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'E';
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fdc:	2245      	movs	r2, #69	; 0x45
 8002fde:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'S';
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fe2:	2253      	movs	r2, #83	; 0x53
 8002fe4:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fe8:	2245      	movs	r2, #69	; 0x45
 8002fea:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = 'T';
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002fee:	2254      	movs	r2, #84	; 0x54
 8002ff0:	71da      	strb	r2, [r3, #7]

	/* Send the HM-10 Device's Reset Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <send_hm10_reset_cmd+0xdc>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	4924      	ldr	r1, [pc, #144]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 8002ffe:	f002 faaf 	bl	8005560 <HAL_UART_Transmit>
 8003002:	4603      	mov	r3, r0
 8003004:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fcb0 	bl	8003970 <HAL_ret_handler>
 8003010:	4603      	mov	r3, r0
 8003012:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 8003014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <send_hm10_reset_cmd+0x6a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Reset Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e031      	b.n	8003086 <send_hm10_reset_cmd+0xce>
	}

	/* Receive the HM-10 Device's Reset Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <send_hm10_reset_cmd+0xdc>)
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800302a:	2208      	movs	r2, #8
 800302c:	4918      	ldr	r1, [pc, #96]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 800302e:	f002 fb1a 	bl	8005666 <HAL_UART_Receive>
 8003032:	4603      	mov	r3, r0
 8003034:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fc98 	bl	8003970 <HAL_ret_handler>
 8003040:	4603      	mov	r3, r0
 8003042:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 8003044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <send_hm10_reset_cmd+0x9a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e019      	b.n	8003086 <send_hm10_reset_cmd+0xce>
	}

	/* Validate the HM-10 Device's Reset Response. */
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	e00e      	b.n	8003076 <send_hm10_reset_cmd+0xbe>
	{
		if (TxRx_Buffer[i] != HM10_Reset_resp[i])
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <send_hm10_reset_cmd+0xd8>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	490d      	ldr	r1, [pc, #52]	; (8003098 <send_hm10_reset_cmd+0xe0>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	440b      	add	r3, r1
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <send_hm10_reset_cmd+0xb8>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 800306c:	2304      	movs	r3, #4
 800306e:	e00a      	b.n	8003086 <send_hm10_reset_cmd+0xce>
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b07      	cmp	r3, #7
 800307a:	dded      	ble.n	8003058 <send_hm10_reset_cmd+0xa0>
	#if ETX_OTA_VERBOSE
		printf("DONE: A Reset Command has been successfully sent to the HM-10 BT Device.\r\n");
	#endif

	/* Generating Delay to allow the HM-10 BT Device to finish resetting correctly before any other action is request to it. */
	HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 800307c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003080:	f001 f938 	bl	80042f4 <HAL_Delay>

	return HM10_EC_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200004dc 	.word	0x200004dc
 8003094:	200004d8 	.word	0x200004d8
 8003098:	20000018 	.word	0x20000018

0800309c <send_hm10_renew_cmd>:

HM10_Status send_hm10_renew_cmd()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80030a2:	f000 fc4b 	bl	800393c <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Renew Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Renew Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030a8:	2241      	movs	r2, #65	; 0x41
 80030aa:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030ae:	2254      	movs	r2, #84	; 0x54
 80030b0:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030b4:	222b      	movs	r2, #43	; 0x2b
 80030b6:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'R';
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030ba:	2252      	movs	r2, #82	; 0x52
 80030bc:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'E';
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030c0:	2245      	movs	r2, #69	; 0x45
 80030c2:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'N';
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030c6:	224e      	movs	r2, #78	; 0x4e
 80030c8:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030cc:	2245      	movs	r2, #69	; 0x45
 80030ce:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = 'W';
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030d2:	2257      	movs	r2, #87	; 0x57
 80030d4:	71da      	strb	r2, [r3, #7]

    /* Send the HM-10 Device's Renew Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <send_hm10_renew_cmd+0xdc>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030de:	2208      	movs	r2, #8
 80030e0:	4924      	ldr	r1, [pc, #144]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 80030e2:	f002 fa3d 	bl	8005560 <HAL_UART_Transmit>
 80030e6:	4603      	mov	r3, r0
 80030e8:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fc3e 	bl	8003970 <HAL_ret_handler>
 80030f4:	4603      	mov	r3, r0
 80030f6:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 80030f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <send_hm10_renew_cmd+0x6a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Renew Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e031      	b.n	800316a <send_hm10_renew_cmd+0xce>
    }

    /* Receive the HM-10 Device's Renew Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <send_hm10_renew_cmd+0xdc>)
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800310e:	2208      	movs	r2, #8
 8003110:	4918      	ldr	r1, [pc, #96]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 8003112:	f002 faa8 	bl	8005666 <HAL_UART_Receive>
 8003116:	4603      	mov	r3, r0
 8003118:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fc26 	bl	8003970 <HAL_ret_handler>
 8003124:	4603      	mov	r3, r0
 8003126:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 8003128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <send_hm10_renew_cmd+0x9a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	e019      	b.n	800316a <send_hm10_renew_cmd+0xce>
    }

    /* Validate the HM-10 Device's Renew Response. */
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	e00e      	b.n	800315a <send_hm10_renew_cmd+0xbe>
    {
        if (TxRx_Buffer[i] != HM10_Renew_resp[i])
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <send_hm10_renew_cmd+0xd8>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	490d      	ldr	r1, [pc, #52]	; (800317c <send_hm10_renew_cmd+0xe0>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	440b      	add	r3, r1
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <send_hm10_renew_cmd+0xb8>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_EC_ERR;
 8003150:	2304      	movs	r3, #4
 8003152:	e00a      	b.n	800316a <send_hm10_renew_cmd+0xce>
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b07      	cmp	r3, #7
 800315e:	dded      	ble.n	800313c <send_hm10_renew_cmd+0xa0>
	#if ETX_OTA_VERBOSE
        printf("DONE: A Renew Command has been successfully sent to the HM-10 BT Device.\r\n");
    #endif

    /* Generating Delay to allow the HM-10 BT Device to finish renewing correctly before any other action is request to it. */
    HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8003160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003164:	f001 f8c6 	bl	80042f4 <HAL_Delay>

    return HM10_EC_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200004dc 	.word	0x200004dc
 8003178:	200004d8 	.word	0x200004d8
 800317c:	20000020 	.word	0x20000020

08003180 <set_hm10_name>:

HM10_Status set_hm10_name(uint8_t *hm10_name, uint8_t size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
	/* Validating given name. */
	if (size > HM10_MAX_BLE_NAME_SIZE)
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d901      	bls.n	8003196 <set_hm10_name+0x16>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested BT Name must not exceed a length of %d bytes (i.e., %d ASCII Characters).\r\n", HM10_MAX_BLE_NAME_SIZE, HM10_MAX_BLE_NAME_SIZE);
		#endif
		return HM10_EC_ERR;
 8003192:	2304      	movs	r3, #4
 8003194:	e0b1      	b.n	80032fa <set_hm10_name+0x17a>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 800319a:	f000 fbcf 	bl	800393c <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Name Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Name Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	73fa      	strb	r2, [r7, #15]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <set_hm10_name+0x184>)
 80031a8:	2141      	movs	r1, #65	; 0x41
 80031aa:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	73fa      	strb	r2, [r7, #15]
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <set_hm10_name+0x184>)
 80031b6:	2154      	movs	r1, #84	; 0x54
 80031b8:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	73fa      	strb	r2, [r7, #15]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <set_hm10_name+0x184>)
 80031c4:	212b      	movs	r1, #43	; 0x2b
 80031c6:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'N';
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	73fa      	strb	r2, [r7, #15]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <set_hm10_name+0x184>)
 80031d2:	214e      	movs	r1, #78	; 0x4e
 80031d4:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	73fa      	strb	r2, [r7, #15]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <set_hm10_name+0x184>)
 80031e0:	2141      	movs	r1, #65	; 0x41
 80031e2:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'M';
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	73fa      	strb	r2, [r7, #15]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b45      	ldr	r3, [pc, #276]	; (8003304 <set_hm10_name+0x184>)
 80031ee:	214d      	movs	r1, #77	; 0x4d
 80031f0:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	73fa      	strb	r2, [r7, #15]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b42      	ldr	r3, [pc, #264]	; (8003304 <set_hm10_name+0x184>)
 80031fc:	2145      	movs	r1, #69	; 0x45
 80031fe:	5499      	strb	r1, [r3, r2]

	/** <b>Local variable size_with_offset:</b> Either the total size in bytes stated at the \p size param plus the bytes populated in the Tx/Rx Buffer for only the Name Command, or the total size in bytes stated at the \p size param plus the bytes read from the Tx/Rx Buffer for only the Name Response. */
	uint8_t size_with_offset = size + bytes_populated_in_TxRx_Buffer;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	4413      	add	r3, r2
 8003206:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73bb      	strb	r3, [r7, #14]
 800320c:	e00c      	b.n	8003228 <set_hm10_name+0xa8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	441a      	add	r2, r3
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	73f9      	strb	r1, [r7, #15]
 800321a:	4619      	mov	r1, r3
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <set_hm10_name+0x184>)
 8003220:	545a      	strb	r2, [r3, r1]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8003222:	7bbb      	ldrb	r3, [r7, #14]
 8003224:	3301      	adds	r3, #1
 8003226:	73bb      	strb	r3, [r7, #14]
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	7afb      	ldrb	r3, [r7, #11]
 800322c:	429a      	cmp	r2, r3
 800322e:	d3ee      	bcc.n	800320e <set_hm10_name+0x8e>
	}

	/* Send the HM-10 Device's Set Name Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <set_hm10_name+0x188>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	b29a      	uxth	r2, r3
 8003238:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800323c:	4931      	ldr	r1, [pc, #196]	; (8003304 <set_hm10_name+0x184>)
 800323e:	f002 f98f 	bl	8005560 <HAL_UART_Transmit>
 8003242:	4603      	mov	r3, r0
 8003244:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 8003246:	893b      	ldrh	r3, [r7, #8]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fb90 	bl	8003970 <HAL_ret_handler>
 8003250:	4603      	mov	r3, r0
 8003252:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 8003254:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <set_hm10_name+0xe2>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Name Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e04b      	b.n	80032fa <set_hm10_name+0x17a>
	}

	/* Receive the HM-10 Device's Set Name Response. */
	bytes_populated_in_TxRx_Buffer = HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME + size;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	3307      	adds	r3, #7
 8003266:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <set_hm10_name+0x188>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	b29a      	uxth	r2, r3
 8003270:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003274:	4923      	ldr	r1, [pc, #140]	; (8003304 <set_hm10_name+0x184>)
 8003276:	f002 f9f6 	bl	8005666 <HAL_UART_Receive>
 800327a:	4603      	mov	r3, r0
 800327c:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fb74 	bl	8003970 <HAL_ret_handler>
 8003288:	4603      	mov	r3, r0
 800328a:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 800328c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <set_hm10_name+0x11a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e02f      	b.n	80032fa <set_hm10_name+0x17a>
	}

	/* Validate the HM-10 Device's Set Name Response. */
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Name Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Name Response (i.e., @ref HM10_Set_Name_resp_without_name_value ). */
	uint8_t bytes_compared = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	737b      	strb	r3, [r7, #13]
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 800329e:	e00c      	b.n	80032ba <set_hm10_name+0x13a>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Name_resp_without_name_value[bytes_compared])
 80032a0:	7b7b      	ldrb	r3, [r7, #13]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <set_hm10_name+0x184>)
 80032a4:	5cd2      	ldrb	r2, [r2, r3]
 80032a6:	7b7b      	ldrb	r3, [r7, #13]
 80032a8:	4918      	ldr	r1, [pc, #96]	; (800330c <set_hm10_name+0x18c>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <set_hm10_name+0x134>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80032b0:	2304      	movs	r3, #4
 80032b2:	e022      	b.n	80032fa <set_hm10_name+0x17a>
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 80032b4:	7b7b      	ldrb	r3, [r7, #13]
 80032b6:	3301      	adds	r3, #1
 80032b8:	737b      	strb	r3, [r7, #13]
 80032ba:	7b7b      	ldrb	r3, [r7, #13]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d9ef      	bls.n	80032a0 <set_hm10_name+0x120>
		}
	}
	size_with_offset = size + bytes_compared;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	7b7b      	ldrb	r3, [r7, #13]
 80032c4:	4413      	add	r3, r2
 80032c6:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	733b      	strb	r3, [r7, #12]
 80032cc:	e010      	b.n	80032f0 <set_hm10_name+0x170>
	{
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 80032ce:	7b7b      	ldrb	r3, [r7, #13]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	737a      	strb	r2, [r7, #13]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <set_hm10_name+0x184>)
 80032d8:	5c9a      	ldrb	r2, [r3, r2]
 80032da:	7b3b      	ldrb	r3, [r7, #12]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	440b      	add	r3, r1
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <set_hm10_name+0x16a>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80032e6:	2304      	movs	r3, #4
 80032e8:	e007      	b.n	80032fa <set_hm10_name+0x17a>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 80032ea:	7b3b      	ldrb	r3, [r7, #12]
 80032ec:	3301      	adds	r3, #1
 80032ee:	733b      	strb	r3, [r7, #12]
 80032f0:	7b7a      	ldrb	r2, [r7, #13]
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3ea      	bcc.n	80032ce <set_hm10_name+0x14e>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Name has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200004dc 	.word	0x200004dc
 8003308:	200004d8 	.word	0x200004d8
 800330c:	20000000 	.word	0x20000000

08003310 <set_hm10_role>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_role(HM10_Role ble_role)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
	/* Validating given role. */
	switch (ble_role)
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	3b30      	subs	r3, #48	; 0x30
 800331e:	2b01      	cmp	r3, #1
 8003320:	d901      	bls.n	8003326 <set_hm10_role+0x16>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: Requested BT Role %d is not recognized.\r\n", ble_role);
			#endif
			return HM10_EC_ERR;
 8003322:	2304      	movs	r3, #4
 8003324:	e06b      	b.n	80033fe <set_hm10_role+0xee>
			break;
 8003326:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8003328:	f000 fb08 	bl	800393c <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Role Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Role Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <set_hm10_role+0xf8>)
 800332e:	2241      	movs	r2, #65	; 0x41
 8003330:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <set_hm10_role+0xf8>)
 8003334:	2254      	movs	r2, #84	; 0x54
 8003336:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <set_hm10_role+0xf8>)
 800333a:	222b      	movs	r2, #43	; 0x2b
 800333c:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <set_hm10_role+0xf8>)
 8003340:	2252      	movs	r2, #82	; 0x52
 8003342:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'O';
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <set_hm10_role+0xf8>)
 8003346:	224f      	movs	r2, #79	; 0x4f
 8003348:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'L';
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <set_hm10_role+0xf8>)
 800334c:	224c      	movs	r2, #76	; 0x4c
 800334e:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <set_hm10_role+0xf8>)
 8003352:	2245      	movs	r2, #69	; 0x45
 8003354:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = ble_role;
 8003356:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <set_hm10_role+0xf8>)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Role Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <set_hm10_role+0xfc>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003364:	2208      	movs	r2, #8
 8003366:	4928      	ldr	r1, [pc, #160]	; (8003408 <set_hm10_role+0xf8>)
 8003368:	f002 f8fa 	bl	8005560 <HAL_UART_Transmit>
 800336c:	4603      	mov	r3, r0
 800336e:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 8003370:	89bb      	ldrh	r3, [r7, #12]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fafb 	bl	8003970 <HAL_ret_handler>
 800337a:	4603      	mov	r3, r0
 800337c:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 800337e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <set_hm10_role+0x7c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Role Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003386:	89bb      	ldrh	r3, [r7, #12]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e038      	b.n	80033fe <set_hm10_role+0xee>
	}

	/* Receive the HM-10 Device's Set Role Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_ROLE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <set_hm10_role+0xfc>)
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003394:	2208      	movs	r2, #8
 8003396:	491c      	ldr	r1, [pc, #112]	; (8003408 <set_hm10_role+0xf8>)
 8003398:	f002 f965 	bl	8005666 <HAL_UART_Receive>
 800339c:	4603      	mov	r3, r0
 800339e:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 80033a0:	89bb      	ldrh	r3, [r7, #12]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fae3 	bl	8003970 <HAL_ret_handler>
 80033aa:	4603      	mov	r3, r0
 80033ac:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 80033ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <set_hm10_role+0xac>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 80033b6:	89bb      	ldrh	r3, [r7, #12]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e020      	b.n	80033fe <set_hm10_role+0xee>
	}

	/* Validate the HM-10 Device's Set Role Response. */
	/** <b>Local variable role_resp_size_without_role_value:</b> Size in bytes of the Role Response from the HM-10 BT device but without considering the length of the requested role value. */
	uint8_t role_resp_size_without_role_value = HM10_ROLE_RESPONSE_SIZE - 1;
 80033bc:	2307      	movs	r3, #7
 80033be:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Role Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Role Response (i.e., @ref HM10_Set_Role_resp_without_role_value ). */
	uint8_t bytes_compared = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 80033c4:	e00e      	b.n	80033e4 <set_hm10_role+0xd4>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Role_resp_without_role_value[bytes_compared])
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <set_hm10_role+0xf8>)
 80033ca:	5cd2      	ldrb	r2, [r2, r3]
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <set_hm10_role+0x100>)
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	440b      	add	r3, r1
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d001      	beq.n	80033de <set_hm10_role+0xce>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80033da:	2304      	movs	r3, #4
 80033dc:	e00f      	b.n	80033fe <set_hm10_role+0xee>
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3301      	adds	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3ec      	bcc.n	80033c6 <set_hm10_role+0xb6>
		}
	}
	if (TxRx_Buffer[bytes_compared] != ble_role)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <set_hm10_role+0xf8>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <set_hm10_role+0xec>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
		#endif
		return HM10_EC_ERR;
 80033f8:	2304      	movs	r3, #4
 80033fa:	e000      	b.n	80033fe <set_hm10_role+0xee>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A Role has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200004dc 	.word	0x200004dc
 800340c:	200004d8 	.word	0x200004d8
 8003410:	20000008 	.word	0x20000008

08003414 <set_hm10_pin>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin(uint8_t *pin)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	/* Validating given pin. */
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 800341c:	2300      	movs	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e00c      	b.n	800343c <set_hm10_pin+0x28>
	{
		switch (pin[current_pin_character])
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	3b30      	subs	r3, #48	; 0x30
 800342c:	2b09      	cmp	r3, #9
 800342e:	d901      	bls.n	8003434 <set_hm10_pin+0x20>
				break;
			default:
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected a number character value in ASCII code on given pin value at index %d, but the following ASCII value was given instead: %c.\r\n", current_pin_character, pin[current_pin_character]);
				#endif
				return HM10_EC_ERR;
 8003430:	2304      	movs	r3, #4
 8003432:	e0ae      	b.n	8003592 <set_hm10_pin+0x17e>
				break;
 8003434:	bf00      	nop
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	3301      	adds	r3, #1
 800343a:	75fb      	strb	r3, [r7, #23]
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d9ef      	bls.n	8003422 <set_hm10_pin+0xe>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	75bb      	strb	r3, [r7, #22]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8003446:	f000 fa79 	bl	800393c <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Pin Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Pin Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800344a:	7dbb      	ldrb	r3, [r7, #22]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	75ba      	strb	r2, [r7, #22]
 8003450:	461a      	mov	r2, r3
 8003452:	4b52      	ldr	r3, [pc, #328]	; (800359c <set_hm10_pin+0x188>)
 8003454:	2141      	movs	r1, #65	; 0x41
 8003456:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 8003458:	7dbb      	ldrb	r3, [r7, #22]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	75ba      	strb	r2, [r7, #22]
 800345e:	461a      	mov	r2, r3
 8003460:	4b4e      	ldr	r3, [pc, #312]	; (800359c <set_hm10_pin+0x188>)
 8003462:	2154      	movs	r1, #84	; 0x54
 8003464:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 8003466:	7dbb      	ldrb	r3, [r7, #22]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	75ba      	strb	r2, [r7, #22]
 800346c:	461a      	mov	r2, r3
 800346e:	4b4b      	ldr	r3, [pc, #300]	; (800359c <set_hm10_pin+0x188>)
 8003470:	212b      	movs	r1, #43	; 0x2b
 8003472:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'P';
 8003474:	7dbb      	ldrb	r3, [r7, #22]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	75ba      	strb	r2, [r7, #22]
 800347a:	461a      	mov	r2, r3
 800347c:	4b47      	ldr	r3, [pc, #284]	; (800359c <set_hm10_pin+0x188>)
 800347e:	2150      	movs	r1, #80	; 0x50
 8003480:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8003482:	7dbb      	ldrb	r3, [r7, #22]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	75ba      	strb	r2, [r7, #22]
 8003488:	461a      	mov	r2, r3
 800348a:	4b44      	ldr	r3, [pc, #272]	; (800359c <set_hm10_pin+0x188>)
 800348c:	2141      	movs	r1, #65	; 0x41
 800348e:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 8003490:	7dbb      	ldrb	r3, [r7, #22]
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	75ba      	strb	r2, [r7, #22]
 8003496:	461a      	mov	r2, r3
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <set_hm10_pin+0x188>)
 800349a:	2153      	movs	r1, #83	; 0x53
 800349c:	5499      	strb	r1, [r3, r2]
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 800349e:	7dbb      	ldrb	r3, [r7, #22]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	75ba      	strb	r2, [r7, #22]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <set_hm10_pin+0x188>)
 80034a8:	2153      	movs	r1, #83	; 0x53
 80034aa:	5499      	strb	r1, [r3, r2]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	757b      	strb	r3, [r7, #21]
 80034b0:	e00c      	b.n	80034cc <set_hm10_pin+0xb8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 80034b2:	7d7b      	ldrb	r3, [r7, #21]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	441a      	add	r2, r3
 80034b8:	7dbb      	ldrb	r3, [r7, #22]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	75b9      	strb	r1, [r7, #22]
 80034be:	4619      	mov	r1, r3
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <set_hm10_pin+0x188>)
 80034c4:	545a      	strb	r2, [r3, r1]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80034c6:	7d7b      	ldrb	r3, [r7, #21]
 80034c8:	3301      	adds	r3, #1
 80034ca:	757b      	strb	r3, [r7, #21]
 80034cc:	7dbb      	ldrb	r3, [r7, #22]
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d9ef      	bls.n	80034b2 <set_hm10_pin+0x9e>
	}

	/* Send the HM-10 Device's Set Pin Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_PIN_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <set_hm10_pin+0x18c>)
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80034da:	220d      	movs	r2, #13
 80034dc:	492f      	ldr	r1, [pc, #188]	; (800359c <set_hm10_pin+0x188>)
 80034de:	f002 f83f 	bl	8005560 <HAL_UART_Transmit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 80034e6:	8a3b      	ldrh	r3, [r7, #16]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa40 	bl	8003970 <HAL_ret_handler>
 80034f0:	4603      	mov	r3, r0
 80034f2:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 80034f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <set_hm10_pin+0xee>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Pin Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 80034fc:	8a3b      	ldrh	r3, [r7, #16]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e047      	b.n	8003592 <set_hm10_pin+0x17e>
	}

	/* Receive the HM-10 Device's Set Pin Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_PIN_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003502:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <set_hm10_pin+0x18c>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800350a:	220d      	movs	r2, #13
 800350c:	4923      	ldr	r1, [pc, #140]	; (800359c <set_hm10_pin+0x188>)
 800350e:	f002 f8aa 	bl	8005666 <HAL_UART_Receive>
 8003512:	4603      	mov	r3, r0
 8003514:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 8003516:	8a3b      	ldrh	r3, [r7, #16]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa28 	bl	8003970 <HAL_ret_handler>
 8003520:	4603      	mov	r3, r0
 8003522:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 8003524:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <set_hm10_pin+0x11e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 800352c:	8a3b      	ldrh	r3, [r7, #16]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e02f      	b.n	8003592 <set_hm10_pin+0x17e>
	}

	/* Validate the HM-10 Device's Set Pin Response. */
	/** <b>Local variable pin_resp_size_without_pin_value:</b> Size in bytes of the Pin Response from the HM-10 BT device but without considering the length of the pin value. */
	uint8_t pin_resp_size_without_pin_value = HM10_PIN_RESPONSE_SIZE - HM10_PIN_VALUE_SIZE;
 8003532:	2307      	movs	r3, #7
 8003534:	73fb      	strb	r3, [r7, #15]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Pin Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Pin Response (i.e., @ref HM10_Set_Pin_resp_without_pin_value ). */
	uint8_t bytes_compared = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	753b      	strb	r3, [r7, #20]
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 800353a:	e00e      	b.n	800355a <set_hm10_pin+0x146>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Pin_resp_without_pin_value[bytes_compared])
 800353c:	7d3b      	ldrb	r3, [r7, #20]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <set_hm10_pin+0x188>)
 8003540:	5cd2      	ldrb	r2, [r2, r3]
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <set_hm10_pin+0x190>)
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	7d3b      	ldrb	r3, [r7, #20]
 8003548:	440b      	add	r3, r1
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <set_hm10_pin+0x140>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8003550:	2304      	movs	r3, #4
 8003552:	e01e      	b.n	8003592 <set_hm10_pin+0x17e>
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 8003554:	7d3b      	ldrb	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	753b      	strb	r3, [r7, #20]
 800355a:	7d3a      	ldrb	r2, [r7, #20]
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3ec      	bcc.n	800353c <set_hm10_pin+0x128>
		}
	}
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 8003562:	2300      	movs	r3, #0
 8003564:	74fb      	strb	r3, [r7, #19]
 8003566:	e010      	b.n	800358a <set_hm10_pin+0x176>
	{
		if (TxRx_Buffer[bytes_compared++] != pin[current_pin_character])
 8003568:	7d3b      	ldrb	r3, [r7, #20]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	753a      	strb	r2, [r7, #20]
 800356e:	461a      	mov	r2, r3
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <set_hm10_pin+0x188>)
 8003572:	5c9a      	ldrb	r2, [r3, r2]
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	440b      	add	r3, r1
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <set_hm10_pin+0x170>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8003580:	2304      	movs	r3, #4
 8003582:	e006      	b.n	8003592 <set_hm10_pin+0x17e>
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	3301      	adds	r3, #1
 8003588:	74fb      	strb	r3, [r7, #19]
 800358a:	7d3b      	ldrb	r3, [r7, #20]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d9eb      	bls.n	8003568 <set_hm10_pin+0x154>

	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Pin has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200004dc 	.word	0x200004dc
 80035a0:	200004d8 	.word	0x200004d8
 80035a4:	2000000c 	.word	0x2000000c

080035a8 <set_hm10_pin_code_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin_code_mode(HM10_Pin_Code_Mode pin_code_mode)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
	/* Validating given pin code mode. */
	switch (pin_code_mode)
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d003      	beq.n	80035c0 <set_hm10_pin_code_mode+0x18>
 80035b8:	2b32      	cmp	r3, #50	; 0x32
 80035ba:	d001      	beq.n	80035c0 <set_hm10_pin_code_mode+0x18>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: An invalid pin code mode value has been given: %c_ASCII.\r\n", pin_code_mode);
			#endif
			return HM10_EC_ERR;
 80035bc:	2304      	movs	r3, #4
 80035be:	e06b      	b.n	8003698 <set_hm10_pin_code_mode+0xf0>
			break;
 80035c0:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80035c2:	f000 f9bb 	bl	800393c <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Type Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Type Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035c8:	2241      	movs	r2, #65	; 0x41
 80035ca:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035ce:	2254      	movs	r2, #84	; 0x54
 80035d0:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035d4:	222b      	movs	r2, #43	; 0x2b
 80035d6:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'T';
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035da:	2254      	movs	r2, #84	; 0x54
 80035dc:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'Y';
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035e0:	2259      	movs	r2, #89	; 0x59
 80035e2:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'P';
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035e6:	2250      	movs	r2, #80	; 0x50
 80035e8:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035ec:	2245      	movs	r2, #69	; 0x45
 80035ee:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = pin_code_mode;
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Type Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80035f6:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <set_hm10_pin_code_mode+0xfc>)
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035fe:	2208      	movs	r2, #8
 8003600:	4927      	ldr	r1, [pc, #156]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 8003602:	f001 ffad 	bl	8005560 <HAL_UART_Transmit>
 8003606:	4603      	mov	r3, r0
 8003608:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 800360a:	89bb      	ldrh	r3, [r7, #12]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f9ae 	bl	8003970 <HAL_ret_handler>
 8003614:	4603      	mov	r3, r0
 8003616:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 8003618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <set_hm10_pin_code_mode+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Type Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003620:	89bb      	ldrh	r3, [r7, #12]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e038      	b.n	8003698 <set_hm10_pin_code_mode+0xf0>
	}

	/* Receive the HM-10 Device's Set Type Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_TYPE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <set_hm10_pin_code_mode+0xfc>)
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800362e:	2208      	movs	r2, #8
 8003630:	491b      	ldr	r1, [pc, #108]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 8003632:	f002 f818 	bl	8005666 <HAL_UART_Receive>
 8003636:	4603      	mov	r3, r0
 8003638:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 800363a:	89bb      	ldrh	r3, [r7, #12]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f996 	bl	8003970 <HAL_ret_handler>
 8003644:	4603      	mov	r3, r0
 8003646:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 8003648:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <set_hm10_pin_code_mode+0xae>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	e020      	b.n	8003698 <set_hm10_pin_code_mode+0xf0>
	}

	/* Validate the HM-10 Device's Set Type Response. */
	/** <b>Local variable type_resp_size_without_pin_mode_value:</b> Size in bytes of the Type Response from the HM-10 BT device but without considering the length of the Type value. */
	uint8_t type_resp_size_without_pin_mode_value = HM10_TYPE_RESPONSE_SIZE - 1;
 8003656:	2307      	movs	r3, #7
 8003658:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Type Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Type Response (i.e., @ref HM10_Set_Type_resp_without_type_value ). */
	uint8_t bytes_compared = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 800365e:	e00e      	b.n	800367e <set_hm10_pin_code_mode+0xd6>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Type_resp_without_type_value[bytes_compared])
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 8003664:	5cd2      	ldrb	r2, [r2, r3]
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <set_hm10_pin_code_mode+0x100>)
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	440b      	add	r3, r1
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <set_hm10_pin_code_mode+0xd0>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Type_resp_without_type_value[bytes_compared]);
			#endif
			return HM10_EC_ERR;
 8003674:	2304      	movs	r3, #4
 8003676:	e00f      	b.n	8003698 <set_hm10_pin_code_mode+0xf0>
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	3301      	adds	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	429a      	cmp	r2, r3
 8003684:	d3ec      	bcc.n	8003660 <set_hm10_pin_code_mode+0xb8>
		}
	}
	if (TxRx_Buffer[bytes_compared] != pin_code_mode)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <set_hm10_pin_code_mode+0xf8>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <set_hm10_pin_code_mode+0xee>
	{
		#if ETX_OTA_VERBOSE
		printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], pin_code_mode);
		#endif
		return HM10_EC_ERR;
 8003692:	2304      	movs	r3, #4
 8003694:	e000      	b.n	8003698 <set_hm10_pin_code_mode+0xf0>

	#if ETX_OTA_VERBOSE
		printf("DONE: The desired Pin Code Mode has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200004dc 	.word	0x200004dc
 80036a4:	200004d8 	.word	0x200004d8
 80036a8:	20000010 	.word	0x20000010

080036ac <set_hm10_module_work_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_module_work_mode(HM10_Module_Work_Mode module_work_mode)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
    /* Validating given module work mode. */
    switch (module_work_mode)
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	3b30      	subs	r3, #48	; 0x30
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <set_hm10_module_work_mode+0x16>
            break;
        default:
            #if ETX_OTA_VERBOSE
                printf("ERROR: An invalid module work mode value has been given: %c_ASCII.\r\n", module_work_mode);
            #endif
            return HM10_EC_ERR;
 80036be:	2304      	movs	r3, #4
 80036c0:	e06b      	b.n	800379a <set_hm10_module_work_mode+0xee>
            break;
 80036c2:	bf00      	nop

    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80036c4:	f000 f93a 	bl	800393c <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Set Mode Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Set Mode Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036ca:	2241      	movs	r2, #65	; 0x41
 80036cc:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036d0:	2254      	movs	r2, #84	; 0x54
 80036d2:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 80036d4:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036d6:	222b      	movs	r2, #43	; 0x2b
 80036d8:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'M';
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036dc:	224d      	movs	r2, #77	; 0x4d
 80036de:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'O';
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036e2:	224f      	movs	r2, #79	; 0x4f
 80036e4:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'D';
 80036e6:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036e8:	2244      	movs	r2, #68	; 0x44
 80036ea:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036ee:	2245      	movs	r2, #69	; 0x45
 80036f0:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = module_work_mode;
 80036f2:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	71d3      	strb	r3, [r2, #7]

    /* Send the HM-10 Device's Set Mode Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <set_hm10_module_work_mode+0xfc>)
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003700:	2208      	movs	r2, #8
 8003702:	4928      	ldr	r1, [pc, #160]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 8003704:	f001 ff2c 	bl	8005560 <HAL_UART_Transmit>
 8003708:	4603      	mov	r3, r0
 800370a:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 800370c:	89bb      	ldrh	r3, [r7, #12]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f92d 	bl	8003970 <HAL_ret_handler>
 8003716:	4603      	mov	r3, r0
 8003718:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 800371a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <set_hm10_module_work_mode+0x7c>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Set Mode Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 8003722:	89bb      	ldrh	r3, [r7, #12]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e038      	b.n	800379a <set_hm10_module_work_mode+0xee>
    }

    /* Receive the HM-10 Device's Set Mode Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_MODE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <set_hm10_module_work_mode+0xfc>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003730:	2208      	movs	r2, #8
 8003732:	491c      	ldr	r1, [pc, #112]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 8003734:	f001 ff97 	bl	8005666 <HAL_UART_Receive>
 8003738:	4603      	mov	r3, r0
 800373a:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 800373c:	89bb      	ldrh	r3, [r7, #12]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f915 	bl	8003970 <HAL_ret_handler>
 8003746:	4603      	mov	r3, r0
 8003748:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 800374a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <set_hm10_module_work_mode+0xac>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 8003752:	89bb      	ldrh	r3, [r7, #12]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e020      	b.n	800379a <set_hm10_module_work_mode+0xee>
    }

    /* Validate the HM-10 Device's Set Mode Response. */
    /** <b>Local variable mode_resp_size_without_module_work_mode_value:</b> Size in bytes of the Mode Response from the HM-10 BT device but without considering the length of the Module Work Mode value. */
    uint8_t mode_resp_size_without_module_work_mode_value = HM10_MODE_RESPONSE_SIZE - 1;
 8003758:	2307      	movs	r3, #7
 800375a:	72fb      	strb	r3, [r7, #11]
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Mode Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Mode Response (i.e., @ref HM10_Set_Mode_resp_without_module_work_mode_value ). */
    uint8_t bytes_compared = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 8003760:	e00e      	b.n	8003780 <set_hm10_module_work_mode+0xd4>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared])
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 8003766:	5cd2      	ldrb	r2, [r2, r3]
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <set_hm10_module_work_mode+0x100>)
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	440b      	add	r3, r1
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <set_hm10_module_work_mode+0xce>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared]);
            #endif
            return HM10_EC_ERR;
 8003776:	2304      	movs	r3, #4
 8003778:	e00f      	b.n	800379a <set_hm10_module_work_mode+0xee>
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	3301      	adds	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	429a      	cmp	r2, r3
 8003786:	d3ec      	bcc.n	8003762 <set_hm10_module_work_mode+0xb6>
        }
    }
    if (TxRx_Buffer[bytes_compared] != module_work_mode)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	4a06      	ldr	r2, [pc, #24]	; (80037a4 <set_hm10_module_work_mode+0xf8>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <set_hm10_module_work_mode+0xec>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], module_work_mode);
        #endif
        return HM10_EC_ERR;
 8003794:	2304      	movs	r3, #4
 8003796:	e000      	b.n	800379a <set_hm10_module_work_mode+0xee>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The desired Module Work Mode has been successfully set in the HM-10 BT Device.\r\n");
    #endif

    return HM10_EC_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200004dc 	.word	0x200004dc
 80037a8:	200004d8 	.word	0x200004d8
 80037ac:	20000014 	.word	0x20000014

080037b0 <disconnect_hm10_from_bt_address>:

    return HM10_EC_OK;
}

HM10_BT_Connection_Status disconnect_hm10_from_bt_address()
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80037b6:	f000 f8c1 	bl	800393c <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Lost-Connection Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Lost-Connection Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 80037bc:	2241      	movs	r2, #65	; 0x41
 80037be:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80037c0:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 80037c2:	2254      	movs	r2, #84	; 0x54
 80037c4:	705a      	strb	r2, [r3, #1]

    /* Send the HM-10 Device's Lost-Connection Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <disconnect_hm10_from_bt_address+0x104>)
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80037ce:	2202      	movs	r2, #2
 80037d0:	4937      	ldr	r1, [pc, #220]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 80037d2:	f001 fec5 	bl	8005560 <HAL_UART_Transmit>
 80037d6:	4603      	mov	r3, r0
 80037d8:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 80037da:	88bb      	ldrh	r3, [r7, #4]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f8c6 	bl	8003970 <HAL_ret_handler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 80037e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <disconnect_hm10_from_bt_address+0x44>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Lost-Connection Command to HM-10 BT Device has failed.\r\n");
        #endif
        return HM10_BT_Connection_Status_Unknown;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e059      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Receive the first part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <disconnect_hm10_from_bt_address+0x104>)
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80037fc:	2202      	movs	r2, #2
 80037fe:	492c      	ldr	r1, [pc, #176]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 8003800:	f001 ff31 	bl	8005666 <HAL_UART_Receive>
 8003804:	4603      	mov	r3, r0
 8003806:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 8003808:	88bb      	ldrh	r3, [r7, #4]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f8af 	bl	8003970 <HAL_ret_handler>
 8003812:	4603      	mov	r3, r0
 8003814:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 8003816:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <disconnect_hm10_from_bt_address+0x72>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return HM10_BT_Connection_Status_Unknown;
 800381e:	2300      	movs	r3, #0
 8003820:	e042      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the first part of the HM-10 Device's Lost-Connection Response. */
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Connection-Lost Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Connection-Lost Response (i.e., @ref HM10_OK_LOST_resp ). */
    uint8_t bytes_compared = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	71fb      	strb	r3, [r7, #7]
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 8003826:	e00c      	b.n	8003842 <disconnect_hm10_from_bt_address+0x92>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 800382c:	5cd2      	ldrb	r2, [r2, r3]
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	4921      	ldr	r1, [pc, #132]	; (80038b8 <disconnect_hm10_from_bt_address+0x108>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <disconnect_hm10_from_bt_address+0x8c>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 8003838:	2300      	movs	r3, #0
 800383a:	e035      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	3301      	adds	r3, #1
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d9ef      	bls.n	8003828 <disconnect_hm10_from_bt_address+0x78>
        }
    }

    /* Receive the second part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, &TxRx_Buffer[bytes_compared], HM10_OK_LOST_RESPONSE_SIZE_WITHOUT_THE_OK_PART, HM10_CUSTOM_HAL_TIMEOUT);
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <disconnect_hm10_from_bt_address+0x104>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 8003850:	1899      	adds	r1, r3, r2
 8003852:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003856:	2205      	movs	r2, #5
 8003858:	f001 ff05 	bl	8005666 <HAL_UART_Receive>
 800385c:	4603      	mov	r3, r0
 800385e:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 8003860:	88bb      	ldrh	r3, [r7, #4]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f883 	bl	8003970 <HAL_ret_handler>
 800386a:	4603      	mov	r3, r0
 800386c:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 800386e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <disconnect_hm10_from_bt_address+0xf0>
    {
        if (ret == HM10_EC_NR)
 8003876:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d101      	bne.n	8003882 <disconnect_hm10_from_bt_address+0xd2>
        {
            #if ETX_OTA_VERBOSE
                printf("WARNING: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
            #endif
            return HM10_BT_No_Connection;
 800387e:	2301      	movs	r3, #1
 8003880:	e012      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
            else
            {
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something went wrong when our MCU/MPU was waiting to receive the data (HM-10 Exception code = %d)\r\n", ret);
            }
        #endif
        return HM10_BT_Connection_Status_Unknown;
 8003882:	2300      	movs	r3, #0
 8003884:	e010      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the second part of the HM-10 Device's Lost-Connection Response. */
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <disconnect_hm10_from_bt_address+0x100>)
 800388a:	5cd2      	ldrb	r2, [r2, r3]
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <disconnect_hm10_from_bt_address+0x108>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <disconnect_hm10_from_bt_address+0xea>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 8003896:	2300      	movs	r3, #0
 8003898:	e006      	b.n	80038a8 <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	3301      	adds	r3, #1
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d9ef      	bls.n	8003886 <disconnect_hm10_from_bt_address+0xd6>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The HM-10 Device has been disconnected from an on-going Bluetooth Connection.\r\n");
    #endif

    return HM10_BT_Connection_Lost;
 80038a6:	2302      	movs	r3, #2
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200004dc 	.word	0x200004dc
 80038b4:	200004d8 	.word	0x200004d8
 80038b8:	20000028 	.word	0x20000028

080038bc <send_hm10_ota_data>:

HM10_Status send_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	460b      	mov	r3, r1
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Send the requested data Over the Air (OTA) via the HM-10 BT Device. */
	ret = HAL_UART_Transmit(p_huart, ble_ota_data, size, timeout);
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <send_hm10_ota_data+0x3c>)
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	897a      	ldrh	r2, [r7, #10]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	f001 fe44 	bl	8005560 <HAL_UART_Transmit>
 80038d8:	4603      	mov	r3, r0
 80038da:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 80038dc:	8afb      	ldrh	r3, [r7, #22]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f845 	bl	8003970 <HAL_ret_handler>
 80038e6:	4603      	mov	r3, r0
 80038e8:	82fb      	strh	r3, [r7, #22]

	return ret;
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	b2db      	uxtb	r3, r3
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200004d8 	.word	0x200004d8

080038fc <get_hm10_ota_data>:

HM10_Status get_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	460b      	mov	r3, r1
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, ble_ota_data, size, timeout);
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <get_hm10_ota_data+0x3c>)
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	897a      	ldrh	r2, [r7, #10]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	f001 fea7 	bl	8005666 <HAL_UART_Receive>
 8003918:	4603      	mov	r3, r0
 800391a:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 800391c:	8afb      	ldrh	r3, [r7, #22]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f825 	bl	8003970 <HAL_ret_handler>
 8003926:	4603      	mov	r3, r0
 8003928:	82fb      	strh	r3, [r7, #22]

	return ret;
 800392a:	8afb      	ldrh	r3, [r7, #22]
 800392c:	b2db      	uxtb	r3, r3
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200004d8 	.word	0x200004d8

0800393c <HAL_uart_rx_flush>:

static void HAL_uart_rx_flush()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function type. */
	HAL_StatusTypeDef  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_uart_rx_flush+0x2c>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800394a:	2201      	movs	r2, #1
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <HAL_uart_rx_flush+0x30>)
 800394e:	f001 fe8a 	bl	8005666 <HAL_UART_Receive>
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_TIMEOUT)
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d001      	beq.n	8003960 <HAL_uart_rx_flush+0x24>
	{
		HAL_uart_rx_flush();
 800395c:	f7ff ffee 	bl	800393c <HAL_uart_rx_flush>
	}
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200004d8 	.word	0x200004d8
 800396c:	200004dc 	.word	0x200004dc

08003970 <HAL_ret_handler>:

static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d006      	beq.n	800398e <HAL_ret_handler+0x1e>
 8003980:	2b00      	cmp	r3, #0
 8003982:	dd06      	ble.n	8003992 <HAL_ret_handler+0x22>
 8003984:	3b02      	subs	r3, #2
 8003986:	2b01      	cmp	r3, #1
 8003988:	d803      	bhi.n	8003992 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return HM10_EC_NR;
 800398a:	2302      	movs	r3, #2
 800398c:	e002      	b.n	8003994 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return HM10_EC_ERR;
 800398e:	2304      	movs	r3, #4
 8003990:	e000      	b.n	8003994 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8003992:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
	...

080039a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039a6:	f000 fc43 	bl	8004230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039aa:	f000 f86b 	bl	8003a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ae:	f000 f921 	bl	8003bf4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80039b2:	f000 f8a1 	bl	8003af8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80039b6:	f000 f8c9 	bl	8003b4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80039ba:	f000 f8f1 	bl	8003ba0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /** <b>Local variable is_app_fw_validation_ok:</b> Flag used to indicate whether the Application Firmware has been successfully validated via its CRC with a \c 1 or, otherwise with a \c 0 . */
  uint8_t is_app_fw_validation_ok = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	71bb      	strb	r3, [r7, #6]
  uint32_t current_tick;
  /** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref ETX_OTA_Status function type. */
  ETX_OTA_Status ret;

  /* Send a message from the Bootloader showing the current Bootloader version there. */
  printf("Starting Bootloader v%d.%d\r\n", BL_version[0], BL_version[1]);
 80039c2:	2300      	movs	r3, #0
 80039c4:	2204      	movs	r2, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	482a      	ldr	r0, [pc, #168]	; (8003a74 <main+0xd4>)
 80039ca:	f002 f88b 	bl	8005ae4 <iprintf>

  /* We initialize the Firmware Update Configurations sub-module and the ETX OTA Protocol module. */
  custom_firmware_update_config_init();
 80039ce:	f000 f987 	bl	8003ce0 <custom_firmware_update_config_init>
  custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol_BT, &huart3);
 80039d2:	4929      	ldr	r1, [pc, #164]	; (8003a78 <main+0xd8>)
 80039d4:	2001      	movs	r0, #1
 80039d6:	f000 f9b9 	bl	8003d4c <custom_init_etx_ota_protocol_module>

  /* Validate both the Bootloader and Application Firmwares in our MCU/MPU. */
  validate_bootloader_firmware();
 80039da:	f000 f9dd 	bl	8003d98 <validate_bootloader_firmware>
  validate_application_firmware(&is_app_fw_validation_ok);
 80039de:	1dbb      	adds	r3, r7, #6
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f9ff 	bl	8003de4 <validate_application_firmware>
   Check if a Firmware Image is received during the next @ref ETX_CUSTOM_HAL_TIMEOUT seconds and, if true, install it
   if it is an Application Firmware Image. Otherwise, jump the MCU/MPU into its Application Firmware. However, if there
   is no existing or valid Application Firmware installed in our MCU, then wait indefinitely to receive an Application
   Firmware Update via the ETX OTA Protocol.
   */
  end_tick = HAL_GetTick() + ETX_CUSTOM_HAL_TIMEOUT;
 80039e6:	f000 fc7b 	bl	80042e0 <HAL_GetTick>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 80039f0:	3328      	adds	r3, #40	; 0x28
 80039f2:	60bb      	str	r3, [r7, #8]
  #endif
  do
  {
	  do
	  {
		  printf("Waiting for an ETX OTA Transaction...\r\n");
 80039f4:	4821      	ldr	r0, [pc, #132]	; (8003a7c <main+0xdc>)
 80039f6:	f002 f8db 	bl	8005bb0 <puts>
		  ret = firmware_image_download_and_install();
 80039fa:	f7fe fc49 	bl	8002290 <firmware_image_download_and_install>
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
		  switch (ret)
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d81c      	bhi.n	8003a42 <main+0xa2>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <main+0x70>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a25 	.word	0x08003a25
 8003a14:	08003a2b 	.word	0x08003a2b
 8003a18:	08003a33 	.word	0x08003a33
 8003a1c:	08003a3b 	.word	0x08003a3b
 8003a20:	08003a51 	.word	0x08003a51
					else
					{
						printf("DONE: Application Firmware Update has successfully concluded! Rebooting MCU/MPU...\r\n");
					}
				#endif
				HAL_NVIC_SystemReset();
 8003a24:	f000 fd77 	bl	8004516 <HAL_NVIC_SystemReset>
				break;
 8003a28:	e013      	b.n	8003a52 <main+0xb2>
			case ETX_OTA_EC_STOP:
				#if ETX_OTA_VERBOSE
					printf("DONE: Firmware Update process has been aborted. Try again...\r\n");
				#endif
				current_tick = HAL_GetTick();
 8003a2a:	f000 fc59 	bl	80042e0 <HAL_GetTick>
 8003a2e:	60f8      	str	r0, [r7, #12]
				break;
 8003a30:	e00f      	b.n	8003a52 <main+0xb2>
			case ETX_OTA_EC_NR:
				// No response was received from host. Therefore, try hearing for a response from the host again in case our MCU/MPU is still in DFU mode.
				current_tick = HAL_GetTick();
 8003a32:	f000 fc55 	bl	80042e0 <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]
				break;
 8003a38:	e00b      	b.n	8003a52 <main+0xb2>
			case ETX_OTA_EC_NA:
				#if ETX_OTA_VERBOSE
					printf("WARNING: Application or Bootloader Firmware Image was expected, but request for something else was received instead.\r\n");
				#endif
				current_tick = HAL_GetTick();
 8003a3a:	f000 fc51 	bl	80042e0 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]
				break;
 8003a40:	e007      	b.n	8003a52 <main+0xb2>
				break;
			default:
				#if ETX_OTA_VERBOSE
					printf("ERROR: Exception Code received %d is not recognized. Our MCU/MPU will halt!.\r\n", ret);
				#endif
				HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a48:	480d      	ldr	r0, [pc, #52]	; (8003a80 <main+0xe0>)
 8003a4a:	f001 f910 	bl	8004c6e <HAL_GPIO_WritePin>
				while (1);
 8003a4e:	e7fe      	b.n	8003a4e <main+0xae>
				break;
 8003a50:	bf00      	nop
		  }
	  }
	  while ((current_tick<end_tick) || (is_app_fw_validation_ok==0));
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d3cc      	bcc.n	80039f4 <main+0x54>
 8003a5a:	79bb      	ldrb	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0c9      	beq.n	80039f4 <main+0x54>
	            transaction that could not be completed and, therefore, having as a result that the current Application
	            Firmware is no longer valid. Therefore, by validating the Application Firmware again here, the @ref main
	            program can guarantee to successfully loop in the Bootloader Firmware and continue asking for an ETX OTA
	            Request until an ETX OTA Firmware Update transaction is successfully completed.
      */
	  validate_application_firmware(&is_app_fw_validation_ok);
 8003a60:	1dbb      	adds	r3, r7, #6
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f9be 	bl	8003de4 <validate_application_firmware>
  }
  while (is_app_fw_validation_ok == 0);
 8003a68:	79bb      	ldrb	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0c2      	beq.n	80039f4 <main+0x54>
  /* Make the MCU/MPU jump into its Application Firmware. */
  #if ETX_OTA_VERBOSE
    printf("Our MCU/MPU has leaved DFU mode.\r\n");
  #endif
  goto_application_firmware();
 8003a6e:	f000 f9ef 	bl	8003e50 <goto_application_firmware>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <main+0xd2>
 8003a74:	080068d8 	.word	0x080068d8
 8003a78:	20000580 	.word	0x20000580
 8003a7c:	080068f8 	.word	0x080068f8
 8003a80:	40011000 	.word	0x40011000

08003a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b090      	sub	sp, #64	; 0x40
 8003a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8a:	f107 0318 	add.w	r3, r7, #24
 8003a8e:	2228      	movs	r2, #40	; 0x28
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 f96c 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab4:	f107 0318 	add.w	r3, r7, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f8f1 	bl	8004ca0 <HAL_RCC_OscConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8003ac4:	f000 f9d2 	bl	8003e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ac8:	230f      	movs	r3, #15
 8003aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003ad0:	2390      	movs	r3, #144	; 0x90
 8003ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fb5f 	bl	80051a4 <HAL_RCC_ClockConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003aec:	f000 f9be 	bl	8003e6c <Error_Handler>
  }
}
 8003af0:	bf00      	nop
 8003af2:	3740      	adds	r7, #64	; 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <MX_USART1_UART_Init+0x50>)
 8003b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b2e:	4805      	ldr	r0, [pc, #20]	; (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b30:	f001 fcc6 	bl	80054c0 <HAL_UART_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b3a:	f000 f997 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200004f0 	.word	0x200004f0
 8003b48:	40013800 	.word	0x40013800

08003b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <MX_USART2_UART_Init+0x50>)
 8003b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b72:	220c      	movs	r2, #12
 8003b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b82:	4805      	ldr	r0, [pc, #20]	; (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b84:	f001 fc9c 	bl	80054c0 <HAL_UART_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b8e:	f000 f96d 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000538 	.word	0x20000538
 8003b9c:	40004400 	.word	0x40004400

08003ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <MX_USART3_UART_Init+0x50>)
 8003ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bd6:	4805      	ldr	r0, [pc, #20]	; (8003bec <MX_USART3_UART_Init+0x4c>)
 8003bd8:	f001 fc72 	bl	80054c0 <HAL_UART_Init>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003be2:	f000 f943 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000580 	.word	0x20000580
 8003bf0:	40004800 	.word	0x40004800

08003bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfa:	f107 0310 	add.w	r3, r7, #16
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c0e:	f043 0310 	orr.w	r3, r3, #16
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c26:	f043 0320 	orr.w	r3, r3, #32
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6193      	str	r3, [r2, #24]
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	6193      	str	r3, [r2, #24]
 8003c5c:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <MX_GPIO_Init+0xc0>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c6e:	4812      	ldr	r0, [pc, #72]	; (8003cb8 <MX_GPIO_Init+0xc4>)
 8003c70:	f000 fffd 	bl	8004c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2302      	movs	r3, #2
 8003c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c86:	f107 0310 	add.w	r3, r7, #16
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480a      	ldr	r0, [pc, #40]	; (8003cb8 <MX_GPIO_Init+0xc4>)
 8003c8e:	f000 fe53 	bl	8004938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <MX_GPIO_Init+0xc4>)
 8003ca8:	f000 fe46 	bl	8004938 <HAL_GPIO_Init>

}
 8003cac:	bf00      	nop
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40011000 	.word	0x40011000

08003cbc <__io_putchar>:
	/* With GCC, small printf (option LD Linker->Libraries->Small printf set to 'Yes') calls __io_putchar(). */
	int __io_putchar(int ch)
#else
	int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here. */
	/* NOTE: The characters written into the UART1 Protocol will be looped until the end of transmission. */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003cc4:	1d39      	adds	r1, r7, #4
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4803      	ldr	r0, [pc, #12]	; (8003cdc <__io_putchar+0x20>)
 8003cce:	f001 fc47 	bl	8005560 <HAL_UART_Transmit>
	return ch;
 8003cd2:	687b      	ldr	r3, [r7, #4]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200004f0 	.word	0x200004f0

08003ce0 <custom_firmware_update_config_init>:

static void custom_firmware_update_config_init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
    int16_t ret;
    /** <b>Local variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
    uint8_t attempts = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
        printf("Initializing the Firmware Update Configurations sub-module...\r\n");
    #endif
    do
    {
        /* Delay of 500 milliseconds. */
        end_tick = HAL_GetTick() + 500;
 8003cea:	f000 faf9 	bl	80042e0 <HAL_GetTick>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003cf4:	607b      	str	r3, [r7, #4]
        current_tick = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
        while (current_tick < end_tick)
 8003cfa:	e002      	b.n	8003d02 <custom_firmware_update_config_init+0x22>
        {
            current_tick = HAL_GetTick();
 8003cfc:	f000 faf0 	bl	80042e0 <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]
        while (current_tick < end_tick)
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3f8      	bcc.n	8003cfc <custom_firmware_update_config_init+0x1c>
        }

        /* We attempt to initialize the Firmware Update Configurations sub-module. */
        ret = firmware_update_configurations_init();
 8003d0a:	f7fe ff6b 	bl	8002be4 <firmware_update_configurations_init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	807b      	strh	r3, [r7, #2]
        attempts++;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	3301      	adds	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
        if (ret == FIRM_UPDT_CONF_EC_OK)
 8003d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <custom_firmware_update_config_init+0x48>
        {
            /* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
            firmware_update_configurations_read(&fw_config);
 8003d20:	4808      	ldr	r0, [pc, #32]	; (8003d44 <custom_firmware_update_config_init+0x64>)
 8003d22:	f7fe ffb9 	bl	8002c98 <firmware_update_configurations_read>
            #if ETX_OTA_VERBOSE
                printf("DONE: Firmware Update Configurations sub-module has been successfully initialized.\r\n");
            #endif

            return;
 8003d26:	e009      	b.n	8003d3c <custom_firmware_update_config_init+0x5c>
        }
        #if ETX_OTA_VERBOSE
            printf("WARNING: The Firmware Update Configurations sub-module could not be initialized at attempt %d...\r\n", attempts);
        #endif
    }
    while(attempts < 3);
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d9dd      	bls.n	8003cea <custom_firmware_update_config_init+0xa>

    #if ETX_OTA_VERBOSE
        printf("ERROR: The Firmware Update Configurations sub-module could not be initialized. Our MCU/MPU will halt!.\r\n");
    #endif
    HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <custom_firmware_update_config_init+0x68>)
 8003d36:	f000 ff9a 	bl	8004c6e <HAL_GPIO_WritePin>
    while (1);
 8003d3a:	e7fe      	b.n	8003d3a <custom_firmware_update_config_init+0x5a>
}
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200005c8 	.word	0x200005c8
 8003d48:	40011000 	.word	0x40011000

08003d4c <custom_init_etx_ota_protocol_module>:

static void custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol hw_protocol, UART_HandleTypeDef *p_huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
    #if ETX_OTA_VERBOSE
        printf("Initializing the ETX OTA Firmware Update Module.\r\n");
    #endif
    /** <b>Local variable GPIO_is_hm10_default_settings:</b> Used to hold the GPIO pin parameters of the Input Mode GPIO Pin to be used so that our MCU can know whether the user wants it to set the default configuration settings in the HM-10 BT Device or not. */
    HM10_GPIO_def_t GPIO_is_hm10_default_settings;
    GPIO_is_hm10_default_settings.GPIO_Port = GPIO_is_hm10_default_settings_Port;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <custom_init_etx_ota_protocol_module+0x44>)
 8003d5a:	60bb      	str	r3, [r7, #8]
    GPIO_is_hm10_default_settings.GPIO_Pin = GPIO_is_hm10_default_settings_Pin;
 8003d5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d60:	81bb      	strh	r3, [r7, #12]

    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings);
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	79f8      	ldrb	r0, [r7, #7]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <custom_init_etx_ota_protocol_module+0x48>)
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	f7fe f9ee 	bl	800214c <init_firmware_update_module>
 8003d70:	4603      	mov	r3, r0
 8003d72:	73fb      	strb	r3, [r7, #15]
    if (ret != ETX_OTA_EC_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <custom_init_etx_ota_protocol_module+0x3c>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The ETX OTA Firmware Update Module could not be initialized. Our MCU/MPU will halt!.\r\n");
        #endif
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d80:	4803      	ldr	r0, [pc, #12]	; (8003d90 <custom_init_etx_ota_protocol_module+0x44>)
 8003d82:	f000 ff74 	bl	8004c6e <HAL_GPIO_WritePin>
        while (1);
 8003d86:	e7fe      	b.n	8003d86 <custom_init_etx_ota_protocol_module+0x3a>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The ETX OTA Firmware Update Module has been successfully initialized.\r\n");
    #endif
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40011000 	.word	0x40011000
 8003d94:	200005c8 	.word	0x200005c8

08003d98 <validate_bootloader_firmware>:

static void validate_bootloader_firmware(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
    #if ETX_OTA_VERBOSE
        printf("Validating the Bootloader Firmware of our MCU/MPU...\r\n");
    #endif
    if (fw_config.BL_fw_rec_crc != DATA_BLOCK_32BIT_ERASED_VALUE)
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <validate_bootloader_firmware+0x40>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d012      	beq.n	8003dce <validate_bootloader_firmware+0x36>
    {
        /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Bootloader Firmware. */
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) BOOTLOADER_FIRMWARE_ADDRESS, fw_config.BL_fw_size);
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <validate_bootloader_firmware+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	480b      	ldr	r0, [pc, #44]	; (8003ddc <validate_bootloader_firmware+0x44>)
 8003db0:	f7fe fee6 	bl	8002b80 <crc32_mpeg2>
 8003db4:	6078      	str	r0, [r7, #4]

        if (cal_crc != fw_config.BL_fw_rec_crc)
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <validate_bootloader_firmware+0x40>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d006      	beq.n	8003dce <validate_bootloader_firmware+0x36>
            #if ETX_OTA_VERBOSE
                printf("The recorded 32-bit CRC of the installed Bootloader Firmware mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
                       (unsigned int) cal_crc, (unsigned int) fw_config.BL_fw_rec_crc);
                printf("ERROR: The Bootloader Firmware currently installed in our MCU/MPU is corrupted. Our MCU/MPU will halt!.\r\n");
            #endif
            HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dc6:	4806      	ldr	r0, [pc, #24]	; (8003de0 <validate_bootloader_firmware+0x48>)
 8003dc8:	f000 ff51 	bl	8004c6e <HAL_GPIO_WritePin>
            while (1);
 8003dcc:	e7fe      	b.n	8003dcc <validate_bootloader_firmware+0x34>
        }
    }
	#if ETX_OTA_VERBOSE
		printf("DONE: Bootloader Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200005c8 	.word	0x200005c8
 8003ddc:	08002000 	.word	0x08002000
 8003de0:	40011000 	.word	0x40011000

08003de4 <validate_application_firmware>:

static void validate_application_firmware(uint8_t *is_app_fw_validation_ok)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    #if ETX_OTA_VERBOSE
        printf("Validating the Application Firmware of our MCU/MPU...\r\n");
    #endif
    if ((fw_config.App_fw_rec_crc==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <validate_application_firmware+0x64>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d008      	beq.n	8003e08 <validate_application_firmware+0x24>
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <validate_application_firmware+0x64>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d003      	beq.n	8003e08 <validate_application_firmware+0x24>
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <validate_application_firmware+0x64>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <validate_application_firmware+0x2c>
    {
        #if ETX_OTA_VERBOSE
            printf("WARNING: No Application Firmware has been identified to be installed in our MCU/MPU.\r\n");
        #endif
        *is_app_fw_validation_ok = 0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
        }
    }
    #if ETX_OTA_VERBOSE
		printf("DONE: Application Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}
 8003e0e:	e016      	b.n	8003e3e <validate_application_firmware+0x5a>
    else if (fw_config.is_bl_fw_stored_in_app_fw == BT_FW_STORED_IN_APP_FW)
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <validate_application_firmware+0x64>)
 8003e12:	7d9b      	ldrb	r3, [r3, #22]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d103      	bne.n	8003e20 <validate_application_firmware+0x3c>
        *is_app_fw_validation_ok = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
}
 8003e1e:	e00e      	b.n	8003e3e <validate_application_firmware+0x5a>
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <validate_application_firmware+0x64>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4619      	mov	r1, r3
 8003e26:	4809      	ldr	r0, [pc, #36]	; (8003e4c <validate_application_firmware+0x68>)
 8003e28:	f7fe feaa 	bl	8002b80 <crc32_mpeg2>
 8003e2c:	60f8      	str	r0, [r7, #12]
        if (cal_crc != fw_config.App_fw_rec_crc)
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <validate_application_firmware+0x64>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d002      	beq.n	8003e3e <validate_application_firmware+0x5a>
            *is_app_fw_validation_ok = 0;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200005c8 	.word	0x200005c8
 8003e4c:	08008000 	.word	0x08008000

08003e50 <goto_application_firmware>:

static void goto_application_firmware(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
	/* Create function pointer with no arguments that points to the Memory Location Address of the Reset Handler of the Application Firmware. */
	#if ETX_OTA_VERBOSE
		printf("Jumping into Application Firmware\r\n");
	#endif
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (APPLICATION_FIRMWARE_RESET_HANDLER_ADDRESS));
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <goto_application_firmware+0x18>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	607b      	str	r3, [r7, #4]
	/* NOTE: Some MCUs might have already the ASM code available so that the Main Stack Pointer (MSP) is recycled, but this is not the case for all MCUs. */
	/* Therefore, if you were to need to do this from scratch, you would have to do the following: */
	//__set_MSP( ( *(volatile uint32_t *) APPLICATION_FIRMWARE_ADDRESS );

	/* Call the Application's Reset Handler. */
	app_reset_handler();
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4798      	blx	r3
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08008004 	.word	0x08008004

08003e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e70:	b672      	cpsid	i
}
 8003e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e74:	e7fe      	b.n	8003e74 <Error_Handler+0x8>
	...

08003e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_MspInit+0x40>)
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <HAL_MspInit+0x40>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6193      	str	r3, [r2, #24]
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_MspInit+0x40>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_MspInit+0x40>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <HAL_MspInit+0x40>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	61d3      	str	r3, [r2, #28]
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_MspInit+0x40>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000

08003ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0320 	add.w	r3, r7, #32
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a53      	ldr	r2, [pc, #332]	; (8004024 <HAL_UART_MspInit+0x168>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d132      	bne.n	8003f42 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee6:	6193      	str	r3, [r2, #24]
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef4:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	2302      	movs	r3, #2
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f16:	2303      	movs	r3, #3
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1a:	f107 0320 	add.w	r3, r7, #32
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4842      	ldr	r0, [pc, #264]	; (800402c <HAL_UART_MspInit+0x170>)
 8003f22:	f000 fd09 	bl	8004938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 0320 	add.w	r3, r7, #32
 8003f38:	4619      	mov	r1, r3
 8003f3a:	483c      	ldr	r0, [pc, #240]	; (800402c <HAL_UART_MspInit+0x170>)
 8003f3c:	f000 fcfc 	bl	8004938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f40:	e06c      	b.n	800401c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_UART_MspInit+0x174>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d130      	bne.n	8003fae <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	61d3      	str	r3, [r2, #28]
 8003f58:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f64:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f6a:	f043 0304 	orr.w	r3, r3, #4
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f84:	2303      	movs	r3, #3
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f88:	f107 0320 	add.w	r3, r7, #32
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4827      	ldr	r0, [pc, #156]	; (800402c <HAL_UART_MspInit+0x170>)
 8003f90:	f000 fcd2 	bl	8004938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f94:	2308      	movs	r3, #8
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa0:	f107 0320 	add.w	r3, r7, #32
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4821      	ldr	r0, [pc, #132]	; (800402c <HAL_UART_MspInit+0x170>)
 8003fa8:	f000 fcc6 	bl	8004938 <HAL_GPIO_Init>
}
 8003fac:	e036      	b.n	800401c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_UART_MspInit+0x178>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d131      	bne.n	800401c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc2:	61d3      	str	r3, [r2, #28]
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6193      	str	r3, [r2, #24]
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_UART_MspInit+0x16c>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480e      	ldr	r0, [pc, #56]	; (8004038 <HAL_UART_MspInit+0x17c>)
 8003ffe:	f000 fc9b 	bl	8004938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004010:	f107 0320 	add.w	r3, r7, #32
 8004014:	4619      	mov	r1, r3
 8004016:	4808      	ldr	r0, [pc, #32]	; (8004038 <HAL_UART_MspInit+0x17c>)
 8004018:	f000 fc8e 	bl	8004938 <HAL_GPIO_Init>
}
 800401c:	bf00      	nop
 800401e:	3730      	adds	r7, #48	; 0x30
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40013800 	.word	0x40013800
 8004028:	40021000 	.word	0x40021000
 800402c:	40010800 	.word	0x40010800
 8004030:	40004400 	.word	0x40004400
 8004034:	40004800 	.word	0x40004800
 8004038:	40010c00 	.word	0x40010c00

0800403c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004040:	e7fe      	b.n	8004040 <NMI_Handler+0x4>

08004042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800404c:	e7fe      	b.n	800404c <MemManage_Handler+0x4>

0800404e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <UsageFault_Handler+0x4>

0800405a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004082:	f000 f91b 	bl	80042bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}

0800408a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e00a      	b.n	80040b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800409c:	f3af 8000 	nop.w
 80040a0:	4601      	mov	r1, r0
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60ba      	str	r2, [r7, #8]
 80040a8:	b2ca      	uxtb	r2, r1
 80040aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dbf0      	blt.n	800409c <_read+0x12>
	}

return len;
 80040ba:	687b      	ldr	r3, [r7, #4]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e009      	b.n	80040ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	60ba      	str	r2, [r7, #8]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fdec 	bl	8003cbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	dbf1      	blt.n	80040d6 <_write+0x12>
	}
	return len;
 80040f2:	687b      	ldr	r3, [r7, #4]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_close>:

int _close(int file)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	return -1;
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004122:	605a      	str	r2, [r3, #4]
	return 0;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <_isatty>:

int _isatty(int file)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	return 1;
 8004138:	2301      	movs	r3, #1
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
	return 0;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <_sbrk+0x5c>)
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <_sbrk+0x60>)
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <_sbrk+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <_sbrk+0x64>)
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <_sbrk+0x68>)
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <_sbrk+0x64>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d207      	bcs.n	800419c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800418c:	f001 fe3e 	bl	8005e0c <__errno>
 8004190:	4603      	mov	r3, r0
 8004192:	220c      	movs	r2, #12
 8004194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	e009      	b.n	80041b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <_sbrk+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <_sbrk+0x64>)
 80041ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20005000 	.word	0x20005000
 80041bc:	00000400 	.word	0x00000400
 80041c0:	200005e0 	.word	0x200005e0
 80041c4:	20000758 	.word	0x20000758

080041c8 <SystemInit>:
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit (void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <SystemInit+0x14>)
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <SystemInit+0x18>)
 80041d0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	08002000 	.word	0x08002000

080041e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041e4:	f7ff fff0 	bl	80041c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041e8:	480b      	ldr	r0, [pc, #44]	; (8004218 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80041ea:	490c      	ldr	r1, [pc, #48]	; (800421c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80041ec:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <LoopFillZerobss+0x16>)
  movs r3, #0
 80041ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041f0:	e002      	b.n	80041f8 <LoopCopyDataInit>

080041f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041f6:	3304      	adds	r3, #4

080041f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041fc:	d3f9      	bcc.n	80041f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004200:	4c09      	ldr	r4, [pc, #36]	; (8004228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004204:	e001      	b.n	800420a <LoopFillZerobss>

08004206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004208:	3204      	adds	r2, #4

0800420a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800420a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800420c:	d3fb      	bcc.n	8004206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800420e:	f001 fe03 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004212:	f7ff fbc5 	bl	80039a0 <main>
  bx lr
 8004216:	4770      	bx	lr
  ldr r0, =_sdata
 8004218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800421c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004220:	08006d88 	.word	0x08006d88
  ldr r2, =_sbss
 8004224:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004228:	20000754 	.word	0x20000754

0800422c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800422c:	e7fe      	b.n	800422c <ADC1_2_IRQHandler>
	...

08004230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_Init+0x28>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_Init+0x28>)
 800423a:	f043 0310 	orr.w	r3, r3, #16
 800423e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004240:	2003      	movs	r0, #3
 8004242:	f000 f941 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004246:	200f      	movs	r0, #15
 8004248:	f000 f808 	bl	800425c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800424c:	f7ff fe14 	bl	8003e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40022000 	.word	0x40022000

0800425c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_InitTick+0x54>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_InitTick+0x58>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004272:	fbb3 f3f1 	udiv	r3, r3, r1
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f94f 	bl	800451e <HAL_SYSTICK_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e00e      	b.n	80042a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0f      	cmp	r3, #15
 800428e:	d80a      	bhi.n	80042a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004290:	2200      	movs	r2, #0
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	f000 f921 	bl	80044de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800429c:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <HAL_InitTick+0x5c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000030 	.word	0x20000030
 80042b4:	20000038 	.word	0x20000038
 80042b8:	20000034 	.word	0x20000034

080042bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_IncTick+0x1c>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_IncTick+0x20>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	4a03      	ldr	r2, [pc, #12]	; (80042dc <HAL_IncTick+0x20>)
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	20000038 	.word	0x20000038
 80042dc:	200005e4 	.word	0x200005e4

080042e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return uwTick;
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <HAL_GetTick+0x10>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	200005e4 	.word	0x200005e4

080042f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d005      	beq.n	800431a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_Delay+0x44>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800431a:	bf00      	nop
 800431c:	f7ff ffe0 	bl	80042e0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d8f7      	bhi.n	800431c <HAL_Delay+0x28>
  {
  }
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000038 	.word	0x20000038

0800433c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004358:	4013      	ands	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800436e:	4a04      	ldr	r2, [pc, #16]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	60d3      	str	r3, [r2, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__NVIC_GetPriorityGrouping+0x18>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 0307 	and.w	r3, r3, #7
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800445c:	f3bf 8f4f 	dsb	sy
}
 8004460:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <__NVIC_SystemReset+0x24>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <__NVIC_SystemReset+0x24>)
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <__NVIC_SystemReset+0x28>)
 800446e:	4313      	orrs	r3, r2
 8004470:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004472:	f3bf 8f4f 	dsb	sy
}
 8004476:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <__NVIC_SystemReset+0x20>
 800447c:	e000ed00 	.word	0xe000ed00
 8004480:	05fa0004 	.word	0x05fa0004

08004484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004494:	d301      	bcc.n	800449a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <SysTick_Config+0x40>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a2:	210f      	movs	r1, #15
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f7ff ff7a 	bl	80043a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <SysTick_Config+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <SysTick_Config+0x40>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000e010 	.word	0xe000e010

080044c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff33 	bl	800433c <__NVIC_SetPriorityGrouping>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f0:	f7ff ff48 	bl	8004384 <__NVIC_GetPriorityGrouping>
 80044f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff7a 	bl	80043f4 <NVIC_EncodePriority>
 8004500:	4602      	mov	r2, r0
 8004502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff49 	bl	80043a0 <__NVIC_SetPriority>
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800451a:	f7ff ff9d 	bl	8004458 <__NVIC_SystemReset>

0800451e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ffac 	bl	8004484 <SysTick_Config>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004552:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <HAL_FLASH_Program+0xd8>)
 8004554:	7e1b      	ldrb	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_FLASH_Program+0x26>
 800455a:	2302      	movs	r3, #2
 800455c:	e054      	b.n	8004608 <HAL_FLASH_Program+0xd0>
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_FLASH_Program+0xd8>)
 8004560:	2201      	movs	r2, #1
 8004562:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004568:	f000 f8a8 	bl	80046bc <FLASH_WaitForLastOperation>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d144      	bne.n	8004600 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800457c:	2301      	movs	r3, #1
 800457e:	757b      	strb	r3, [r7, #21]
 8004580:	e007      	b.n	8004592 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d102      	bne.n	800458e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004588:	2302      	movs	r3, #2
 800458a:	757b      	strb	r3, [r7, #21]
 800458c:	e001      	b.n	8004592 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800458e:	2304      	movs	r3, #4
 8004590:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004592:	2300      	movs	r3, #0
 8004594:	75bb      	strb	r3, [r7, #22]
 8004596:	e02d      	b.n	80045f4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004598:	7dbb      	ldrb	r3, [r7, #22]
 800459a:	005a      	lsls	r2, r3, #1
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	eb02 0c03 	add.w	ip, r2, r3
 80045a2:	7dbb      	ldrb	r3, [r7, #22]
 80045a4:	0119      	lsls	r1, r3, #4
 80045a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045aa:	f1c1 0620 	rsb	r6, r1, #32
 80045ae:	f1a1 0020 	sub.w	r0, r1, #32
 80045b2:	fa22 f401 	lsr.w	r4, r2, r1
 80045b6:	fa03 f606 	lsl.w	r6, r3, r6
 80045ba:	4334      	orrs	r4, r6
 80045bc:	fa23 f000 	lsr.w	r0, r3, r0
 80045c0:	4304      	orrs	r4, r0
 80045c2:	fa23 f501 	lsr.w	r5, r3, r1
 80045c6:	b2a3      	uxth	r3, r4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4660      	mov	r0, ip
 80045cc:	f000 f85a 	bl	8004684 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045d4:	f000 f872 	bl	80046bc <FLASH_WaitForLastOperation>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_FLASH_Program+0xdc>)
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <HAL_FLASH_Program+0xdc>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80045ee:	7dbb      	ldrb	r3, [r7, #22]
 80045f0:	3301      	adds	r3, #1
 80045f2:	75bb      	strb	r3, [r7, #22]
 80045f4:	7dba      	ldrb	r2, [r7, #22]
 80045f6:	7d7b      	ldrb	r3, [r7, #21]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3cd      	bcc.n	8004598 <HAL_FLASH_Program+0x60>
 80045fc:	e000      	b.n	8004600 <HAL_FLASH_Program+0xc8>
      {
        break;
 80045fe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_FLASH_Program+0xd8>)
 8004602:	2200      	movs	r2, #0
 8004604:	761a      	strb	r2, [r3, #24]

  return status;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004610:	200005e8 	.word	0x200005e8
 8004614:	40022000 	.word	0x40022000

08004618 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <HAL_FLASH_Unlock+0x40>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_FLASH_Unlock+0x40>)
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HAL_FLASH_Unlock+0x44>)
 8004632:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_FLASH_Unlock+0x40>)
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <HAL_FLASH_Unlock+0x48>)
 8004638:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_FLASH_Unlock+0x40>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800464a:	79fb      	ldrb	r3, [r7, #7]
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40022000 	.word	0x40022000
 800465c:	45670123 	.word	0x45670123
 8004660:	cdef89ab 	.word	0xcdef89ab

08004664 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_FLASH_Lock+0x1c>)
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_FLASH_Lock+0x1c>)
 800466e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004672:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40022000 	.word	0x40022000

08004684 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <FLASH_Program_HalfWord+0x30>)
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <FLASH_Program_HalfWord+0x34>)
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <FLASH_Program_HalfWord+0x34>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	801a      	strh	r2, [r3, #0]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200005e8 	.word	0x200005e8
 80046b8:	40022000 	.word	0x40022000

080046bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7ff fe0c 	bl	80042e0 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80046ca:	e010      	b.n	80046ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d00c      	beq.n	80046ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <FLASH_WaitForLastOperation+0x2e>
 80046da:	f7ff fe01 	bl	80042e0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d201      	bcs.n	80046ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e025      	b.n	800473a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e8      	bne.n	80046cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 8004708:	2220      	movs	r2, #32
 800470a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <FLASH_WaitForLastOperation+0x88>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004730:	f000 f80a 	bl	8004748 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40022000 	.word	0x40022000

08004748 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f043 0302 	orr.w	r3, r3, #2
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 8004768:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f043 0310 	orr.w	r3, r3, #16
 8004770:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800477e:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 8004788:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <FLASH_SetErrorCode+0x9c>)
 80047a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f240 1201 	movw	r2, #257	; 0x101
 80047bc:	4293      	cmp	r3, r2
 80047be:	d106      	bne.n	80047ce <FLASH_SetErrorCode+0x86>
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	61d3      	str	r3, [r2, #28]
}  
 80047cc:	e002      	b.n	80047d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80047ce:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <FLASH_SetErrorCode+0x98>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60d3      	str	r3, [r2, #12]
}  
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	200005e8 	.word	0x200005e8

080047e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_FLASHEx_Erase+0xd0>)
 80047fc:	7e1b      	ldrb	r3, [r3, #24]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_FLASHEx_Erase+0x1e>
 8004802:	2302      	movs	r3, #2
 8004804:	e053      	b.n	80048ae <HAL_FLASHEx_Erase+0xc6>
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <HAL_FLASHEx_Erase+0xd0>)
 8004808:	2201      	movs	r2, #1
 800480a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d116      	bne.n	8004842 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004818:	f7ff ff50 	bl	80046bc <FLASH_WaitForLastOperation>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d141      	bne.n	80048a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004822:	2001      	movs	r0, #1
 8004824:	f000 f84c 	bl	80048c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004828:	f24c 3050 	movw	r0, #50000	; 0xc350
 800482c:	f7ff ff46 	bl	80046bc <FLASH_WaitForLastOperation>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <HAL_FLASHEx_Erase+0xd4>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_FLASHEx_Erase+0xd4>)
 800483a:	f023 0304 	bic.w	r3, r3, #4
 800483e:	6113      	str	r3, [r2, #16]
 8004840:	e031      	b.n	80048a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004846:	f7ff ff39 	bl	80046bc <FLASH_WaitForLastOperation>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d12a      	bne.n	80048a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f04f 32ff 	mov.w	r2, #4294967295
 8004856:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	e019      	b.n	8004894 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004860:	68b8      	ldr	r0, [r7, #8]
 8004862:	f000 f849 	bl	80048f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800486a:	f7ff ff27 	bl	80046bc <FLASH_WaitForLastOperation>
 800486e:	4603      	mov	r3, r0
 8004870:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_FLASHEx_Erase+0xd4>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_FLASHEx_Erase+0xd4>)
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	601a      	str	r2, [r3, #0]
            break;
 800488a:	e00c      	b.n	80048a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004892:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	029a      	lsls	r2, r3, #10
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4413      	add	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3dc      	bcc.n	8004860 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <HAL_FLASHEx_Erase+0xd0>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	761a      	strb	r2, [r3, #24]

  return status;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200005e8 	.word	0x200005e8
 80048bc:	40022000 	.word	0x40022000

080048c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <FLASH_MassErase+0x30>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <FLASH_MassErase+0x34>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <FLASH_MassErase+0x34>)
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <FLASH_MassErase+0x34>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <FLASH_MassErase+0x34>)
 80048e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	200005e8 	.word	0x200005e8
 80048f4:	40022000 	.word	0x40022000

080048f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <FLASH_PageErase+0x38>)
 8004902:	2200      	movs	r2, #0
 8004904:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <FLASH_PageErase+0x3c>)
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <FLASH_PageErase+0x3c>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <FLASH_PageErase+0x3c>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <FLASH_PageErase+0x3c>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4a05      	ldr	r2, [pc, #20]	; (8004934 <FLASH_PageErase+0x3c>)
 800491e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004922:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	200005e8 	.word	0x200005e8
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004938:	b480      	push	{r7}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494a:	e169      	b.n	8004c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800494c:	2201      	movs	r2, #1
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8158 	bne.w	8004c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4a9a      	ldr	r2, [pc, #616]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d05e      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004974:	4a98      	ldr	r2, [pc, #608]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d875      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800497a:	4a98      	ldr	r2, [pc, #608]	; (8004bdc <HAL_GPIO_Init+0x2a4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d058      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004980:	4a96      	ldr	r2, [pc, #600]	; (8004bdc <HAL_GPIO_Init+0x2a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d86f      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004986:	4a96      	ldr	r2, [pc, #600]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d052      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 800498c:	4a94      	ldr	r2, [pc, #592]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d869      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004992:	4a94      	ldr	r2, [pc, #592]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04c      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004998:	4a92      	ldr	r2, [pc, #584]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d863      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800499e:	4a92      	ldr	r2, [pc, #584]	; (8004be8 <HAL_GPIO_Init+0x2b0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d046      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 80049a4:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_GPIO_Init+0x2b0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d85d      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049aa:	2b12      	cmp	r3, #18
 80049ac:	d82a      	bhi.n	8004a04 <HAL_GPIO_Init+0xcc>
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d859      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_GPIO_Init+0x80>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004a1f 	.word	0x08004a1f
 80049c4:	08004a61 	.word	0x08004a61
 80049c8:	08004a67 	.word	0x08004a67
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004a67 	.word	0x08004a67
 80049d8:	08004a67 	.word	0x08004a67
 80049dc:	08004a67 	.word	0x08004a67
 80049e0:	08004a67 	.word	0x08004a67
 80049e4:	08004a67 	.word	0x08004a67
 80049e8:	08004a67 	.word	0x08004a67
 80049ec:	08004a67 	.word	0x08004a67
 80049f0:	08004a67 	.word	0x08004a67
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	08004a67 	.word	0x08004a67
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_GPIO_Init+0x2b4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0a:	e02c      	b.n	8004a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	623b      	str	r3, [r7, #32]
          break;
 8004a12:	e029      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	623b      	str	r3, [r7, #32]
          break;
 8004a1c:	e024      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	3308      	adds	r3, #8
 8004a24:	623b      	str	r3, [r7, #32]
          break;
 8004a26:	e01f      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	623b      	str	r3, [r7, #32]
          break;
 8004a30:	e01a      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	623b      	str	r3, [r7, #32]
          break;
 8004a3e:	e013      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a48:	2308      	movs	r3, #8
 8004a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	611a      	str	r2, [r3, #16]
          break;
 8004a52:	e009      	b.n	8004a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a54:	2308      	movs	r3, #8
 8004a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	615a      	str	r2, [r3, #20]
          break;
 8004a5e:	e003      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
          break;
 8004a64:	e000      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          break;
 8004a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d801      	bhi.n	8004a72 <HAL_GPIO_Init+0x13a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e001      	b.n	8004a76 <HAL_GPIO_Init+0x13e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2bff      	cmp	r3, #255	; 0xff
 8004a7c:	d802      	bhi.n	8004a84 <HAL_GPIO_Init+0x14c>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	e002      	b.n	8004a8a <HAL_GPIO_Init+0x152>
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3b08      	subs	r3, #8
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	210f      	movs	r1, #15
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	6a39      	ldr	r1, [r7, #32]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80b1 	beq.w	8004c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	4a4c      	ldr	r2, [pc, #304]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6193      	str	r3, [r2, #24]
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ad0:	4a48      	ldr	r2, [pc, #288]	; (8004bf4 <HAL_GPIO_Init+0x2bc>)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <HAL_GPIO_Init+0x2c0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_GPIO_Init+0x1ec>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <HAL_GPIO_Init+0x2c4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00d      	beq.n	8004b20 <HAL_GPIO_Init+0x1e8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3e      	ldr	r2, [pc, #248]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <HAL_GPIO_Init+0x1e4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3d      	ldr	r2, [pc, #244]	; (8004c04 <HAL_GPIO_Init+0x2cc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d101      	bne.n	8004b18 <HAL_GPIO_Init+0x1e0>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e006      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	e004      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e002      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	f002 0203 	and.w	r2, r2, #3
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	4093      	lsls	r3, r2
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b36:	492f      	ldr	r1, [pc, #188]	; (8004bf4 <HAL_GPIO_Init+0x2bc>)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	492c      	ldr	r1, [pc, #176]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	4928      	ldr	r1, [pc, #160]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	4922      	ldr	r1, [pc, #136]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60cb      	str	r3, [r1, #12]
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	491e      	ldr	r1, [pc, #120]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4918      	ldr	r1, [pc, #96]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
 8004bac:	e006      	b.n	8004bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	4914      	ldr	r1, [pc, #80]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d021      	beq.n	8004c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	490e      	ldr	r1, [pc, #56]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e021      	b.n	8004c1a <HAL_GPIO_Init+0x2e2>
 8004bd6:	bf00      	nop
 8004bd8:	10320000 	.word	0x10320000
 8004bdc:	10310000 	.word	0x10310000
 8004be0:	10220000 	.word	0x10220000
 8004be4:	10210000 	.word	0x10210000
 8004be8:	10120000 	.word	0x10120000
 8004bec:	10110000 	.word	0x10110000
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010800 	.word	0x40010800
 8004bfc:	40010c00 	.word	0x40010c00
 8004c00:	40011000 	.word	0x40011000
 8004c04:	40011400 	.word	0x40011400
 8004c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_GPIO_Init+0x304>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	4909      	ldr	r1, [pc, #36]	; (8004c3c <HAL_GPIO_Init+0x304>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f47f ae8e 	bne.w	800494c <HAL_GPIO_Init+0x14>
  }
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	372c      	adds	r7, #44	; 0x2c
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40010400 	.word	0x40010400

08004c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e001      	b.n	8004c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c7e:	787b      	ldrb	r3, [r7, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c8a:	e003      	b.n	8004c94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	041a      	lsls	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	611a      	str	r2, [r3, #16]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e272      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8087 	beq.w	8004dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cc0:	4b92      	ldr	r3, [pc, #584]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00c      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ccc:	4b8f      	ldr	r3, [pc, #572]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d112      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
 8004cd8:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x12c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d168      	bne.n	8004dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e24c      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x76>
 8004d08:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7f      	ldr	r2, [pc, #508]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e02e      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x98>
 8004d1e:	4b7b      	ldr	r3, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7a      	ldr	r2, [pc, #488]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a77      	ldr	r2, [pc, #476]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0xbc>
 8004d42:	4b72      	ldr	r3, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a71      	ldr	r2, [pc, #452]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d5c:	4b6b      	ldr	r3, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6a      	ldr	r2, [pc, #424]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a67      	ldr	r2, [pc, #412]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7ff fab0 	bl	80042e0 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7ff faac 	bl	80042e0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e200      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe4>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7ff fa9c 	bl	80042e0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7ff fa98 	bl	80042e0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	; 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1ec      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x10c>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d063      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dda:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d11c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x18c>
 8004df2:	4b46      	ldr	r3, [pc, #280]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	4b43      	ldr	r3, [pc, #268]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x176>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e1c0      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4939      	ldr	r1, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2a:	e03a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <HAL_RCC_OscConfig+0x270>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7ff fa51 	bl	80042e0 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e42:	f7ff fa4d 	bl	80042e0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1a1      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e60:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4927      	ldr	r1, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e76:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <HAL_RCC_OscConfig+0x270>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7ff fa30 	bl	80042e0 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7ff fa2c 	bl	80042e0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e180      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03a      	beq.n	8004f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d019      	beq.n	8004eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7ff fa10 	bl	80042e0 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec4:	f7ff fa0c 	bl	80042e0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e160      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f000 face 	bl	8005484 <RCC_Delay>
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_RCC_OscConfig+0x274>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7ff f9f6 	bl	80042e0 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7ff f9f2 	bl	80042e0 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d908      	bls.n	8004f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e146      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	42420000 	.word	0x42420000
 8004f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	4b92      	ldr	r3, [pc, #584]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e9      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a6 	beq.w	800507e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f36:	4b8b      	ldr	r3, [pc, #556]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	4b88      	ldr	r3, [pc, #544]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4a87      	ldr	r2, [pc, #540]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	61d3      	str	r3, [r2, #28]
 8004f4e:	4b85      	ldr	r3, [pc, #532]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5e:	4b82      	ldr	r3, [pc, #520]	; (8005168 <HAL_RCC_OscConfig+0x4c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d118      	bne.n	8004f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x4c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7e      	ldr	r2, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x4c8>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f76:	f7ff f9b3 	bl	80042e0 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7ff f9af 	bl	80042e0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b64      	cmp	r3, #100	; 0x64
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e103      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f90:	4b75      	ldr	r3, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x4c8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x312>
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4a6e      	ldr	r2, [pc, #440]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6213      	str	r3, [r2, #32]
 8004fb0:	e02d      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x334>
 8004fba:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a69      	ldr	r2, [pc, #420]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	6213      	str	r3, [r2, #32]
 8004fc6:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4a66      	ldr	r2, [pc, #408]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	6213      	str	r3, [r2, #32]
 8004fd2:	e01c      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d10c      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x356>
 8004fdc:	4b61      	ldr	r3, [pc, #388]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	4a60      	ldr	r2, [pc, #384]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	f043 0304 	orr.w	r3, r3, #4
 8004fe6:	6213      	str	r3, [r2, #32]
 8004fe8:	4b5e      	ldr	r3, [pc, #376]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4a5d      	ldr	r2, [pc, #372]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6213      	str	r3, [r2, #32]
 8004ff4:	e00b      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004ff6:	4b5b      	ldr	r3, [pc, #364]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	4a5a      	ldr	r2, [pc, #360]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	6213      	str	r3, [r2, #32]
 8005002:	4b58      	ldr	r3, [pc, #352]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4a57      	ldr	r2, [pc, #348]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d015      	beq.n	8005042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7ff f963 	bl	80042e0 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7ff f95f 	bl	80042e0 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0b1      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ee      	beq.n	800501e <HAL_RCC_OscConfig+0x37e>
 8005040:	e014      	b.n	800506c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005042:	f7ff f94d 	bl	80042e0 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7ff f949 	bl	80042e0 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e09b      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005060:	4b40      	ldr	r3, [pc, #256]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ee      	bne.n	800504a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005072:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8087 	beq.w	8005196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005088:	4b36      	ldr	r3, [pc, #216]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d061      	beq.n	8005158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d146      	bne.n	800512a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509c:	4b33      	ldr	r3, [pc, #204]	; (800516c <HAL_RCC_OscConfig+0x4cc>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7ff f91d 	bl	80042e0 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7ff f919 	bl	80042e0 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e06d      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d108      	bne.n	80050e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4921      	ldr	r1, [pc, #132]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a19      	ldr	r1, [r3, #32]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	430b      	orrs	r3, r1
 80050f6:	491b      	ldr	r1, [pc, #108]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x4cc>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7ff f8ed 	bl	80042e0 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510a:	f7ff f8e9 	bl	80042e0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e03d      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x46a>
 8005128:	e035      	b.n	8005196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_OscConfig+0x4cc>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7ff f8d6 	bl	80042e0 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7ff f8d2 	bl	80042e0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e026      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_RCC_OscConfig+0x4c4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x498>
 8005156:	e01e      	b.n	8005196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e019      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000
 800516c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	429a      	cmp	r2, r3
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000

080051a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0d0      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b8:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d910      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b67      	ldr	r3, [pc, #412]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 0207 	bic.w	r2, r3, #7
 80051ce:	4965      	ldr	r1, [pc, #404]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b63      	ldr	r3, [pc, #396]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0b8      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005200:	4b59      	ldr	r3, [pc, #356]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a58      	ldr	r2, [pc, #352]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800520a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005218:	4b53      	ldr	r3, [pc, #332]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a52      	ldr	r2, [pc, #328]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005224:	4b50      	ldr	r3, [pc, #320]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	494d      	ldr	r1, [pc, #308]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d040      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524a:	4b47      	ldr	r3, [pc, #284]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d115      	bne.n	8005282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e07f      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e073      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005272:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e06b      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005282:	4b39      	ldr	r3, [pc, #228]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f023 0203 	bic.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4936      	ldr	r1, [pc, #216]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005294:	f7ff f824 	bl	80042e0 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529c:	f7ff f820 	bl	80042e0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e053      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 020c 	and.w	r2, r3, #12
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d1eb      	bne.n	800529c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d210      	bcs.n	80052f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 0207 	bic.w	r2, r3, #7
 80052da:	4922      	ldr	r1, [pc, #136]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b20      	ldr	r3, [pc, #128]	; (8005364 <HAL_RCC_ClockConfig+0x1c0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e032      	b.n	800535a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4916      	ldr	r1, [pc, #88]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	490e      	ldr	r1, [pc, #56]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005332:	f000 f821 	bl	8005378 <HAL_RCC_GetSysClockFreq>
 8005336:	4602      	mov	r2, r0
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCC_ClockConfig+0x1c4>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	490a      	ldr	r1, [pc, #40]	; (800536c <HAL_RCC_ClockConfig+0x1c8>)
 8005344:	5ccb      	ldrb	r3, [r1, r3]
 8005346:	fa22 f303 	lsr.w	r3, r2, r3
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x1cc>)
 800534c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_ClockConfig+0x1d0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe ff82 	bl	800425c <HAL_InitTick>

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40022000 	.word	0x40022000
 8005368:	40021000 	.word	0x40021000
 800536c:	08006d20 	.word	0x08006d20
 8005370:	20000030 	.word	0x20000030
 8005374:	20000034 	.word	0x20000034

08005378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005392:	4b1e      	ldr	r3, [pc, #120]	; (800540c <HAL_RCC_GetSysClockFreq+0x94>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d002      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x30>
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0x36>
 80053a6:	e027      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_GetSysClockFreq+0x98>)
 80053aa:	613b      	str	r3, [r7, #16]
      break;
 80053ac:	e027      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	0c9b      	lsrs	r3, r3, #18
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <HAL_RCC_GetSysClockFreq+0x94>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	0c5b      	lsrs	r3, r3, #17
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <HAL_RCC_GetSysClockFreq+0x98>)
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e004      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0c      	ldr	r2, [pc, #48]	; (800541c <HAL_RCC_GetSysClockFreq+0xa4>)
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	613b      	str	r3, [r7, #16]
      break;
 80053f6:	e002      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetSysClockFreq+0x98>)
 80053fa:	613b      	str	r3, [r7, #16]
      break;
 80053fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fe:	693b      	ldr	r3, [r7, #16]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40021000 	.word	0x40021000
 8005410:	007a1200 	.word	0x007a1200
 8005414:	08006d38 	.word	0x08006d38
 8005418:	08006d48 	.word	0x08006d48
 800541c:	003d0900 	.word	0x003d0900

08005420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <HAL_RCC_GetHCLKFreq+0x10>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	20000030 	.word	0x20000030

08005434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005438:	f7ff fff2 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4903      	ldr	r1, [pc, #12]	; (8005458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	08006d30 	.word	0x08006d30

0800545c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005460:	f7ff ffde 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	0adb      	lsrs	r3, r3, #11
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4903      	ldr	r1, [pc, #12]	; (8005480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	08006d30 	.word	0x08006d30

08005484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <RCC_Delay+0x34>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <RCC_Delay+0x38>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0a5b      	lsrs	r3, r3, #9
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054a0:	bf00      	nop
  }
  while (Delay --);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	60fa      	str	r2, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f9      	bne.n	80054a0 <RCC_Delay+0x1c>
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	20000030 	.word	0x20000030
 80054bc:	10624dd3 	.word	0x10624dd3

080054c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e042      	b.n	8005558 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fe fce8 	bl	8003ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9af 	bl	8005868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b20      	cmp	r3, #32
 800557e:	d16d      	bne.n	800565c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_UART_Transmit+0x2c>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e066      	b.n	800565e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fe fe9f 	bl	80042e0 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Transmit+0x6c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d4:	e02a      	b.n	800562c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f8d2 	bl	800578a <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e036      	b.n	800565e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cf      	bne.n	80055d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2140      	movs	r1, #64	; 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f8a2 	bl	800578a <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e006      	b.n	800565e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	e000      	b.n	800565e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800565c:	2302      	movs	r3, #2
  }
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	; 0x28
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	d17c      	bne.n	8005780 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_UART_Receive+0x2c>
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e075      	b.n	8005782 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2222      	movs	r2, #34	; 0x22
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056aa:	f7fe fe19 	bl	80042e0 <HAL_GetTick>
 80056ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c4:	d108      	bne.n	80056d8 <HAL_UART_Receive+0x72>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e003      	b.n	80056e0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056e0:	e043      	b.n	800576a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2120      	movs	r1, #32
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f84c 	bl	800578a <UART_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e042      	b.n	8005782 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10c      	bne.n	800571c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	b29a      	uxth	r2, r3
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	3302      	adds	r3, #2
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e01f      	b.n	800575c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d007      	beq.n	8005736 <HAL_UART_Receive+0xd0>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_UART_Receive+0xde>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e008      	b.n	8005756 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	b2da      	uxtb	r2, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1b6      	bne.n	80056e2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b090      	sub	sp, #64	; 0x40
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579a:	e050      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d04c      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0x30>
 80057aa:	f7fe fd99 	bl	80042e0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d241      	bcs.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057da:	637a      	str	r2, [r7, #52]	; 0x34
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	613b      	str	r3, [r7, #16]
   return(result);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580e:	623a      	str	r2, [r7, #32]
 8005810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	69f9      	ldr	r1, [r7, #28]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	61bb      	str	r3, [r7, #24]
   return(result);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e00f      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	bf0c      	ite	eq
 800584e:	2301      	moveq	r3, #1
 8005850:	2300      	movne	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	429a      	cmp	r2, r3
 800585a:	d09f      	beq.n	800579c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3740      	adds	r7, #64	; 0x40
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058a2:	f023 030c 	bic.w	r3, r3, #12
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <UART_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d103      	bne.n	80058d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058d0:	f7ff fdc4 	bl	800545c <HAL_RCC_GetPCLK2Freq>
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	e002      	b.n	80058de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7ff fdac 	bl	8005434 <HAL_RCC_GetPCLK1Freq>
 80058dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009a      	lsls	r2, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	4a22      	ldr	r2, [pc, #136]	; (8005980 <UART_SetConfig+0x118>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	0119      	lsls	r1, r3, #4
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009a      	lsls	r2, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	fbb2 f2f3 	udiv	r2, r2, r3
 8005914:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <UART_SetConfig+0x118>)
 8005916:	fba3 0302 	umull	r0, r3, r3, r2
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	2064      	movs	r0, #100	; 0x64
 800591e:	fb00 f303 	mul.w	r3, r0, r3
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	3332      	adds	r3, #50	; 0x32
 8005928:	4a15      	ldr	r2, [pc, #84]	; (8005980 <UART_SetConfig+0x118>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005934:	4419      	add	r1, r3
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009a      	lsls	r2, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	fbb2 f2f3 	udiv	r2, r2, r3
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <UART_SetConfig+0x118>)
 800594e:	fba3 0302 	umull	r0, r3, r3, r2
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	2064      	movs	r0, #100	; 0x64
 8005956:	fb00 f303 	mul.w	r3, r0, r3
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	3332      	adds	r3, #50	; 0x32
 8005960:	4a07      	ldr	r2, [pc, #28]	; (8005980 <UART_SetConfig+0x118>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	f003 020f 	and.w	r2, r3, #15
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	440a      	add	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40013800 	.word	0x40013800
 8005980:	51eb851f 	.word	0x51eb851f

08005984 <std>:
 8005984:	2300      	movs	r3, #0
 8005986:	b510      	push	{r4, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	e9c0 3300 	strd	r3, r3, [r0]
 800598e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005992:	6083      	str	r3, [r0, #8]
 8005994:	8181      	strh	r1, [r0, #12]
 8005996:	6643      	str	r3, [r0, #100]	; 0x64
 8005998:	81c2      	strh	r2, [r0, #14]
 800599a:	6183      	str	r3, [r0, #24]
 800599c:	4619      	mov	r1, r3
 800599e:	2208      	movs	r2, #8
 80059a0:	305c      	adds	r0, #92	; 0x5c
 80059a2:	f000 f9e5 	bl	8005d70 <memset>
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <std+0x38>)
 80059a8:	6224      	str	r4, [r4, #32]
 80059aa:	6263      	str	r3, [r4, #36]	; 0x24
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <std+0x3c>)
 80059ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <std+0x40>)
 80059b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <std+0x44>)
 80059b6:	6323      	str	r3, [r4, #48]	; 0x30
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	bf00      	nop
 80059bc:	08005bc1 	.word	0x08005bc1
 80059c0:	08005be3 	.word	0x08005be3
 80059c4:	08005c1b 	.word	0x08005c1b
 80059c8:	08005c3f 	.word	0x08005c3f

080059cc <stdio_exit_handler>:
 80059cc:	4a02      	ldr	r2, [pc, #8]	; (80059d8 <stdio_exit_handler+0xc>)
 80059ce:	4903      	ldr	r1, [pc, #12]	; (80059dc <stdio_exit_handler+0x10>)
 80059d0:	4803      	ldr	r0, [pc, #12]	; (80059e0 <stdio_exit_handler+0x14>)
 80059d2:	f000 b869 	b.w	8005aa8 <_fwalk_sglue>
 80059d6:	bf00      	nop
 80059d8:	2000003c 	.word	0x2000003c
 80059dc:	08006719 	.word	0x08006719
 80059e0:	20000048 	.word	0x20000048

080059e4 <cleanup_stdio>:
 80059e4:	6841      	ldr	r1, [r0, #4]
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <cleanup_stdio+0x34>)
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4299      	cmp	r1, r3
 80059ec:	4604      	mov	r4, r0
 80059ee:	d001      	beq.n	80059f4 <cleanup_stdio+0x10>
 80059f0:	f000 fe92 	bl	8006718 <_fflush_r>
 80059f4:	68a1      	ldr	r1, [r4, #8]
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <cleanup_stdio+0x38>)
 80059f8:	4299      	cmp	r1, r3
 80059fa:	d002      	beq.n	8005a02 <cleanup_stdio+0x1e>
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fe8b 	bl	8006718 <_fflush_r>
 8005a02:	68e1      	ldr	r1, [r4, #12]
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <cleanup_stdio+0x3c>)
 8005a06:	4299      	cmp	r1, r3
 8005a08:	d004      	beq.n	8005a14 <cleanup_stdio+0x30>
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a10:	f000 be82 	b.w	8006718 <_fflush_r>
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	bf00      	nop
 8005a18:	20000608 	.word	0x20000608
 8005a1c:	20000670 	.word	0x20000670
 8005a20:	200006d8 	.word	0x200006d8

08005a24 <global_stdio_init.part.0>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <global_stdio_init.part.0+0x30>)
 8005a28:	4c0b      	ldr	r4, [pc, #44]	; (8005a58 <global_stdio_init.part.0+0x34>)
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <global_stdio_init.part.0+0x38>)
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	2104      	movs	r1, #4
 8005a32:	2200      	movs	r2, #0
 8005a34:	f7ff ffa6 	bl	8005984 <std>
 8005a38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2109      	movs	r1, #9
 8005a40:	f7ff ffa0 	bl	8005984 <std>
 8005a44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a48:	2202      	movs	r2, #2
 8005a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4e:	2112      	movs	r1, #18
 8005a50:	f7ff bf98 	b.w	8005984 <std>
 8005a54:	20000740 	.word	0x20000740
 8005a58:	20000608 	.word	0x20000608
 8005a5c:	080059cd 	.word	0x080059cd

08005a60 <__sfp_lock_acquire>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sfp_lock_acquire+0x8>)
 8005a62:	f000 b9fd 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000749 	.word	0x20000749

08005a6c <__sfp_lock_release>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sfp_lock_release+0x8>)
 8005a6e:	f000 b9f8 	b.w	8005e62 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	20000749 	.word	0x20000749

08005a78 <__sinit>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	f7ff fff0 	bl	8005a60 <__sfp_lock_acquire>
 8005a80:	6a23      	ldr	r3, [r4, #32]
 8005a82:	b11b      	cbz	r3, 8005a8c <__sinit+0x14>
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a88:	f7ff bff0 	b.w	8005a6c <__sfp_lock_release>
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__sinit+0x28>)
 8005a8e:	6223      	str	r3, [r4, #32]
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <__sinit+0x2c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f5      	bne.n	8005a84 <__sinit+0xc>
 8005a98:	f7ff ffc4 	bl	8005a24 <global_stdio_init.part.0>
 8005a9c:	e7f2      	b.n	8005a84 <__sinit+0xc>
 8005a9e:	bf00      	nop
 8005aa0:	080059e5 	.word	0x080059e5
 8005aa4:	20000740 	.word	0x20000740

08005aa8 <_fwalk_sglue>:
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	4607      	mov	r7, r0
 8005aae:	4688      	mov	r8, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ab8:	f1b9 0901 	subs.w	r9, r9, #1
 8005abc:	d505      	bpl.n	8005aca <_fwalk_sglue+0x22>
 8005abe:	6824      	ldr	r4, [r4, #0]
 8005ac0:	2c00      	cmp	r4, #0
 8005ac2:	d1f7      	bne.n	8005ab4 <_fwalk_sglue+0xc>
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aca:	89ab      	ldrh	r3, [r5, #12]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d907      	bls.n	8005ae0 <_fwalk_sglue+0x38>
 8005ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	d003      	beq.n	8005ae0 <_fwalk_sglue+0x38>
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4638      	mov	r0, r7
 8005adc:	47c0      	blx	r8
 8005ade:	4306      	orrs	r6, r0
 8005ae0:	3568      	adds	r5, #104	; 0x68
 8005ae2:	e7e9      	b.n	8005ab8 <_fwalk_sglue+0x10>

08005ae4 <iprintf>:
 8005ae4:	b40f      	push	{r0, r1, r2, r3}
 8005ae6:	b507      	push	{r0, r1, r2, lr}
 8005ae8:	4906      	ldr	r1, [pc, #24]	; (8005b04 <iprintf+0x20>)
 8005aea:	ab04      	add	r3, sp, #16
 8005aec:	6808      	ldr	r0, [r1, #0]
 8005aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af2:	6881      	ldr	r1, [r0, #8]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	f000 fadf 	bl	80060b8 <_vfiprintf_r>
 8005afa:	b003      	add	sp, #12
 8005afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b00:	b004      	add	sp, #16
 8005b02:	4770      	bx	lr
 8005b04:	20000094 	.word	0x20000094

08005b08 <_puts_r>:
 8005b08:	6a03      	ldr	r3, [r0, #32]
 8005b0a:	b570      	push	{r4, r5, r6, lr}
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	460e      	mov	r6, r1
 8005b10:	6884      	ldr	r4, [r0, #8]
 8005b12:	b90b      	cbnz	r3, 8005b18 <_puts_r+0x10>
 8005b14:	f7ff ffb0 	bl	8005a78 <__sinit>
 8005b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d405      	bmi.n	8005b2a <_puts_r+0x22>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	0598      	lsls	r0, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_puts_r+0x22>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f99b 	bl	8005e60 <__retarget_lock_acquire_recursive>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	0719      	lsls	r1, r3, #28
 8005b2e:	d513      	bpl.n	8005b58 <_puts_r+0x50>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	b18b      	cbz	r3, 8005b58 <_puts_r+0x50>
 8005b34:	3e01      	subs	r6, #1
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	b9e9      	cbnz	r1, 8005b7e <_puts_r+0x76>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da2e      	bge.n	8005ba4 <_puts_r+0x9c>
 8005b46:	4622      	mov	r2, r4
 8005b48:	210a      	movs	r1, #10
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f87b 	bl	8005c46 <__swbuf_r>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d007      	beq.n	8005b64 <_puts_r+0x5c>
 8005b54:	250a      	movs	r5, #10
 8005b56:	e007      	b.n	8005b68 <_puts_r+0x60>
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f8b0 	bl	8005cc0 <__swsetup_r>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0e7      	beq.n	8005b34 <_puts_r+0x2c>
 8005b64:	f04f 35ff 	mov.w	r5, #4294967295
 8005b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b6a:	07da      	lsls	r2, r3, #31
 8005b6c:	d405      	bmi.n	8005b7a <_puts_r+0x72>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	059b      	lsls	r3, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <_puts_r+0x72>
 8005b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b76:	f000 f974 	bl	8005e62 <__retarget_lock_release_recursive>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da04      	bge.n	8005b8c <_puts_r+0x84>
 8005b82:	69a2      	ldr	r2, [r4, #24]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	dc06      	bgt.n	8005b96 <_puts_r+0x8e>
 8005b88:	290a      	cmp	r1, #10
 8005b8a:	d004      	beq.n	8005b96 <_puts_r+0x8e>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	7019      	strb	r1, [r3, #0]
 8005b94:	e7cf      	b.n	8005b36 <_puts_r+0x2e>
 8005b96:	4622      	mov	r2, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 f854 	bl	8005c46 <__swbuf_r>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d1c9      	bne.n	8005b36 <_puts_r+0x2e>
 8005ba2:	e7df      	b.n	8005b64 <_puts_r+0x5c>
 8005ba4:	250a      	movs	r5, #10
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	701d      	strb	r5, [r3, #0]
 8005bae:	e7db      	b.n	8005b68 <_puts_r+0x60>

08005bb0 <puts>:
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <puts+0xc>)
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	f7ff bfa7 	b.w	8005b08 <_puts_r>
 8005bba:	bf00      	nop
 8005bbc:	20000094 	.word	0x20000094

08005bc0 <__sread>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc8:	f000 f8fc 	bl	8005dc4 <_read_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	bfab      	itete	ge
 8005bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd4:	181b      	addge	r3, r3, r0
 8005bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bda:	bfac      	ite	ge
 8005bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bde:	81a3      	strhlt	r3, [r4, #12]
 8005be0:	bd10      	pop	{r4, pc}

08005be2 <__swrite>:
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	461f      	mov	r7, r3
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	4605      	mov	r5, r0
 8005bec:	05db      	lsls	r3, r3, #23
 8005bee:	460c      	mov	r4, r1
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	d505      	bpl.n	8005c00 <__swrite+0x1e>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfc:	f000 f8d0 	bl	8005da0 <_lseek_r>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	4632      	mov	r2, r6
 8005c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	f000 b8e7 	b.w	8005de8 <_write_r>

08005c1a <__sseek>:
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c22:	f000 f8bd 	bl	8005da0 <_lseek_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	bf15      	itete	ne
 8005c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c36:	81a3      	strheq	r3, [r4, #12]
 8005c38:	bf18      	it	ne
 8005c3a:	81a3      	strhne	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__sclose>:
 8005c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c42:	f000 b89d 	b.w	8005d80 <_close_r>

08005c46 <__swbuf_r>:
 8005c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c48:	460e      	mov	r6, r1
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b118      	cbz	r0, 8005c58 <__swbuf_r+0x12>
 8005c50:	6a03      	ldr	r3, [r0, #32]
 8005c52:	b90b      	cbnz	r3, 8005c58 <__swbuf_r+0x12>
 8005c54:	f7ff ff10 	bl	8005a78 <__sinit>
 8005c58:	69a3      	ldr	r3, [r4, #24]
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	071a      	lsls	r2, r3, #28
 8005c60:	d525      	bpl.n	8005cae <__swbuf_r+0x68>
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	b31b      	cbz	r3, 8005cae <__swbuf_r+0x68>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	b2f6      	uxtb	r6, r6
 8005c6c:	1a98      	subs	r0, r3, r2
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	4637      	mov	r7, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	dc04      	bgt.n	8005c80 <__swbuf_r+0x3a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 fd4d 	bl	8006718 <_fflush_r>
 8005c7e:	b9e0      	cbnz	r0, 8005cba <__swbuf_r+0x74>
 8005c80:	68a3      	ldr	r3, [r4, #8]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60a3      	str	r3, [r4, #8]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	701e      	strb	r6, [r3, #0]
 8005c8e:	6962      	ldr	r2, [r4, #20]
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d004      	beq.n	8005ca0 <__swbuf_r+0x5a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	07db      	lsls	r3, r3, #31
 8005c9a:	d506      	bpl.n	8005caa <__swbuf_r+0x64>
 8005c9c:	2e0a      	cmp	r6, #10
 8005c9e:	d104      	bne.n	8005caa <__swbuf_r+0x64>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fd38 	bl	8006718 <_fflush_r>
 8005ca8:	b938      	cbnz	r0, 8005cba <__swbuf_r+0x74>
 8005caa:	4638      	mov	r0, r7
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f805 	bl	8005cc0 <__swsetup_r>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d0d5      	beq.n	8005c66 <__swbuf_r+0x20>
 8005cba:	f04f 37ff 	mov.w	r7, #4294967295
 8005cbe:	e7f4      	b.n	8005caa <__swbuf_r+0x64>

08005cc0 <__swsetup_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <__swsetup_r+0xac>)
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	460c      	mov	r4, r1
 8005cca:	b118      	cbz	r0, 8005cd4 <__swsetup_r+0x14>
 8005ccc:	6a03      	ldr	r3, [r0, #32]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <__swsetup_r+0x14>
 8005cd0:	f7ff fed2 	bl	8005a78 <__sinit>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cda:	0718      	lsls	r0, r3, #28
 8005cdc:	d422      	bmi.n	8005d24 <__swsetup_r+0x64>
 8005cde:	06d9      	lsls	r1, r3, #27
 8005ce0:	d407      	bmi.n	8005cf2 <__swsetup_r+0x32>
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	e034      	b.n	8005d5c <__swsetup_r+0x9c>
 8005cf2:	0758      	lsls	r0, r3, #29
 8005cf4:	d512      	bpl.n	8005d1c <__swsetup_r+0x5c>
 8005cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf8:	b141      	cbz	r1, 8005d0c <__swsetup_r+0x4c>
 8005cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	d002      	beq.n	8005d08 <__swsetup_r+0x48>
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f8bc 	bl	8005e80 <_free_r>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	2300      	movs	r3, #0
 8005d16:	6063      	str	r3, [r4, #4]
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f043 0308 	orr.w	r3, r3, #8
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	b94b      	cbnz	r3, 8005d3c <__swsetup_r+0x7c>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d32:	d003      	beq.n	8005d3c <__swsetup_r+0x7c>
 8005d34:	4621      	mov	r1, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fd3b 	bl	80067b2 <__smakebuf_r>
 8005d3c:	89a0      	ldrh	r0, [r4, #12]
 8005d3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d42:	f010 0301 	ands.w	r3, r0, #1
 8005d46:	d00a      	beq.n	8005d5e <__swsetup_r+0x9e>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60a3      	str	r3, [r4, #8]
 8005d4c:	6963      	ldr	r3, [r4, #20]
 8005d4e:	425b      	negs	r3, r3
 8005d50:	61a3      	str	r3, [r4, #24]
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	b943      	cbnz	r3, 8005d68 <__swsetup_r+0xa8>
 8005d56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d5a:	d1c4      	bne.n	8005ce6 <__swsetup_r+0x26>
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	0781      	lsls	r1, r0, #30
 8005d60:	bf58      	it	pl
 8005d62:	6963      	ldrpl	r3, [r4, #20]
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	e7f4      	b.n	8005d52 <__swsetup_r+0x92>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e7f7      	b.n	8005d5c <__swsetup_r+0x9c>
 8005d6c:	20000094 	.word	0x20000094

08005d70 <memset>:
 8005d70:	4603      	mov	r3, r0
 8005d72:	4402      	add	r2, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <_close_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	2300      	movs	r3, #0
 8005d84:	4d05      	ldr	r5, [pc, #20]	; (8005d9c <_close_r+0x1c>)
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	f7fe f9b6 	bl	80040fc <_close>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d102      	bne.n	8005d9a <_close_r+0x1a>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	b103      	cbz	r3, 8005d9a <_close_r+0x1a>
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	20000744 	.word	0x20000744

08005da0 <_lseek_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	2200      	movs	r2, #0
 8005daa:	4d05      	ldr	r5, [pc, #20]	; (8005dc0 <_lseek_r+0x20>)
 8005dac:	602a      	str	r2, [r5, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7fe f9c8 	bl	8004144 <_lseek>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_lseek_r+0x1e>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_lseek_r+0x1e>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000744 	.word	0x20000744

08005dc4 <_read_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4d05      	ldr	r5, [pc, #20]	; (8005de4 <_read_r+0x20>)
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fe f959 	bl	800408a <_read>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_read_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_read_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20000744 	.word	0x20000744

08005de8 <_write_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	2200      	movs	r2, #0
 8005df2:	4d05      	ldr	r5, [pc, #20]	; (8005e08 <_write_r+0x20>)
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fe f964 	bl	80040c4 <_write>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_write_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_write_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000744 	.word	0x20000744

08005e0c <__errno>:
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <__errno+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000094 	.word	0x20000094

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	4d0c      	ldr	r5, [pc, #48]	; (8005e50 <__libc_init_array+0x38>)
 8005e1e:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	f000 fd40 	bl	80068ac <_init>
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	4d0a      	ldr	r5, [pc, #40]	; (8005e58 <__libc_init_array+0x40>)
 8005e30:	4c0a      	ldr	r4, [pc, #40]	; (8005e5c <__libc_init_array+0x44>)
 8005e32:	1b64      	subs	r4, r4, r5
 8005e34:	10a4      	asrs	r4, r4, #2
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e40:	4798      	blx	r3
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4a:	4798      	blx	r3
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	08006d80 	.word	0x08006d80
 8005e54:	08006d80 	.word	0x08006d80
 8005e58:	08006d80 	.word	0x08006d80
 8005e5c:	08006d84 	.word	0x08006d84

08005e60 <__retarget_lock_acquire_recursive>:
 8005e60:	4770      	bx	lr

08005e62 <__retarget_lock_release_recursive>:
 8005e62:	4770      	bx	lr

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	4291      	cmp	r1, r2
 8005e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <_free_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4605      	mov	r5, r0
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d040      	beq.n	8005f0a <_free_r+0x8a>
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	18e4      	addlt	r4, r4, r3
 8005e94:	f000 f8dc 	bl	8006050 <__malloc_lock>
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <_free_r+0x8c>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b933      	cbnz	r3, 8005eac <_free_r+0x2c>
 8005e9e:	6063      	str	r3, [r4, #4]
 8005ea0:	6014      	str	r4, [r2, #0]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea8:	f000 b8d8 	b.w	800605c <__malloc_unlock>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d908      	bls.n	8005ec2 <_free_r+0x42>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	1821      	adds	r1, r4, r0
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	bf01      	itttt	eq
 8005eb8:	6819      	ldreq	r1, [r3, #0]
 8005eba:	685b      	ldreq	r3, [r3, #4]
 8005ebc:	1809      	addeq	r1, r1, r0
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	e7ed      	b.n	8005e9e <_free_r+0x1e>
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	b10b      	cbz	r3, 8005ecc <_free_r+0x4c>
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x42>
 8005ecc:	6811      	ldr	r1, [r2, #0]
 8005ece:	1850      	adds	r0, r2, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x6c>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1850      	adds	r0, r2, r1
 8005eda:	4283      	cmp	r3, r0
 8005edc:	6011      	str	r1, [r2, #0]
 8005ede:	d1e0      	bne.n	8005ea2 <_free_r+0x22>
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4408      	add	r0, r1
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	e7da      	b.n	8005ea2 <_free_r+0x22>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x74>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d6      	b.n	8005ea2 <_free_r+0x22>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6054      	str	r4, [r2, #4]
 8005f08:	e7cb      	b.n	8005ea2 <_free_r+0x22>
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	2000074c 	.word	0x2000074c

08005f10 <sbrk_aligned>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4e0e      	ldr	r6, [pc, #56]	; (8005f4c <sbrk_aligned+0x3c>)
 8005f14:	460c      	mov	r4, r1
 8005f16:	6831      	ldr	r1, [r6, #0]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	b911      	cbnz	r1, 8005f22 <sbrk_aligned+0x12>
 8005f1c:	f000 fca8 	bl	8006870 <_sbrk_r>
 8005f20:	6030      	str	r0, [r6, #0]
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 fca3 	bl	8006870 <_sbrk_r>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d00a      	beq.n	8005f44 <sbrk_aligned+0x34>
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d007      	beq.n	8005f48 <sbrk_aligned+0x38>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 fc98 	bl	8006870 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d101      	bne.n	8005f48 <sbrk_aligned+0x38>
 8005f44:	f04f 34ff 	mov.w	r4, #4294967295
 8005f48:	4620      	mov	r0, r4
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	20000750 	.word	0x20000750

08005f50 <_malloc_r>:
 8005f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f54:	1ccd      	adds	r5, r1, #3
 8005f56:	f025 0503 	bic.w	r5, r5, #3
 8005f5a:	3508      	adds	r5, #8
 8005f5c:	2d0c      	cmp	r5, #12
 8005f5e:	bf38      	it	cc
 8005f60:	250c      	movcc	r5, #12
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	4607      	mov	r7, r0
 8005f66:	db01      	blt.n	8005f6c <_malloc_r+0x1c>
 8005f68:	42a9      	cmp	r1, r5
 8005f6a:	d905      	bls.n	8005f78 <_malloc_r+0x28>
 8005f6c:	230c      	movs	r3, #12
 8005f6e:	2600      	movs	r6, #0
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4630      	mov	r0, r6
 8005f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800604c <_malloc_r+0xfc>
 8005f7c:	f000 f868 	bl	8006050 <__malloc_lock>
 8005f80:	f8d8 3000 	ldr.w	r3, [r8]
 8005f84:	461c      	mov	r4, r3
 8005f86:	bb5c      	cbnz	r4, 8005fe0 <_malloc_r+0x90>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f7ff ffc0 	bl	8005f10 <sbrk_aligned>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	4604      	mov	r4, r0
 8005f94:	d155      	bne.n	8006042 <_malloc_r+0xf2>
 8005f96:	f8d8 4000 	ldr.w	r4, [r8]
 8005f9a:	4626      	mov	r6, r4
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	d145      	bne.n	800602c <_malloc_r+0xdc>
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	d048      	beq.n	8006036 <_malloc_r+0xe6>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4638      	mov	r0, r7
 8005faa:	eb04 0903 	add.w	r9, r4, r3
 8005fae:	f000 fc5f 	bl	8006870 <_sbrk_r>
 8005fb2:	4581      	cmp	r9, r0
 8005fb4:	d13f      	bne.n	8006036 <_malloc_r+0xe6>
 8005fb6:	6821      	ldr	r1, [r4, #0]
 8005fb8:	4638      	mov	r0, r7
 8005fba:	1a6d      	subs	r5, r5, r1
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7ff ffa7 	bl	8005f10 <sbrk_aligned>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d037      	beq.n	8006036 <_malloc_r+0xe6>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	442b      	add	r3, r5
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d038      	beq.n	8006046 <_malloc_r+0xf6>
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	42a2      	cmp	r2, r4
 8005fd8:	d12b      	bne.n	8006032 <_malloc_r+0xe2>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	e00f      	b.n	8006000 <_malloc_r+0xb0>
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	1b52      	subs	r2, r2, r5
 8005fe4:	d41f      	bmi.n	8006026 <_malloc_r+0xd6>
 8005fe6:	2a0b      	cmp	r2, #11
 8005fe8:	d917      	bls.n	800601a <_malloc_r+0xca>
 8005fea:	1961      	adds	r1, r4, r5
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	6025      	str	r5, [r4, #0]
 8005ff0:	bf18      	it	ne
 8005ff2:	6059      	strne	r1, [r3, #4]
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	bf08      	it	eq
 8005ff8:	f8c8 1000 	streq.w	r1, [r8]
 8005ffc:	5162      	str	r2, [r4, r5]
 8005ffe:	604b      	str	r3, [r1, #4]
 8006000:	4638      	mov	r0, r7
 8006002:	f104 060b 	add.w	r6, r4, #11
 8006006:	f000 f829 	bl	800605c <__malloc_unlock>
 800600a:	f026 0607 	bic.w	r6, r6, #7
 800600e:	1d23      	adds	r3, r4, #4
 8006010:	1af2      	subs	r2, r6, r3
 8006012:	d0ae      	beq.n	8005f72 <_malloc_r+0x22>
 8006014:	1b9b      	subs	r3, r3, r6
 8006016:	50a3      	str	r3, [r4, r2]
 8006018:	e7ab      	b.n	8005f72 <_malloc_r+0x22>
 800601a:	42a3      	cmp	r3, r4
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	d1dd      	bne.n	8005fdc <_malloc_r+0x8c>
 8006020:	f8c8 2000 	str.w	r2, [r8]
 8006024:	e7ec      	b.n	8006000 <_malloc_r+0xb0>
 8006026:	4623      	mov	r3, r4
 8006028:	6864      	ldr	r4, [r4, #4]
 800602a:	e7ac      	b.n	8005f86 <_malloc_r+0x36>
 800602c:	4634      	mov	r4, r6
 800602e:	6876      	ldr	r6, [r6, #4]
 8006030:	e7b4      	b.n	8005f9c <_malloc_r+0x4c>
 8006032:	4613      	mov	r3, r2
 8006034:	e7cc      	b.n	8005fd0 <_malloc_r+0x80>
 8006036:	230c      	movs	r3, #12
 8006038:	4638      	mov	r0, r7
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	f000 f80e 	bl	800605c <__malloc_unlock>
 8006040:	e797      	b.n	8005f72 <_malloc_r+0x22>
 8006042:	6025      	str	r5, [r4, #0]
 8006044:	e7dc      	b.n	8006000 <_malloc_r+0xb0>
 8006046:	605b      	str	r3, [r3, #4]
 8006048:	deff      	udf	#255	; 0xff
 800604a:	bf00      	nop
 800604c:	2000074c 	.word	0x2000074c

08006050 <__malloc_lock>:
 8006050:	4801      	ldr	r0, [pc, #4]	; (8006058 <__malloc_lock+0x8>)
 8006052:	f7ff bf05 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	20000748 	.word	0x20000748

0800605c <__malloc_unlock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_unlock+0x8>)
 800605e:	f7ff bf00 	b.w	8005e62 <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	20000748 	.word	0x20000748

08006068 <__sfputc_r>:
 8006068:	6893      	ldr	r3, [r2, #8]
 800606a:	b410      	push	{r4}
 800606c:	3b01      	subs	r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	6093      	str	r3, [r2, #8]
 8006072:	da07      	bge.n	8006084 <__sfputc_r+0x1c>
 8006074:	6994      	ldr	r4, [r2, #24]
 8006076:	42a3      	cmp	r3, r4
 8006078:	db01      	blt.n	800607e <__sfputc_r+0x16>
 800607a:	290a      	cmp	r1, #10
 800607c:	d102      	bne.n	8006084 <__sfputc_r+0x1c>
 800607e:	bc10      	pop	{r4}
 8006080:	f7ff bde1 	b.w	8005c46 <__swbuf_r>
 8006084:	6813      	ldr	r3, [r2, #0]
 8006086:	1c58      	adds	r0, r3, #1
 8006088:	6010      	str	r0, [r2, #0]
 800608a:	7019      	strb	r1, [r3, #0]
 800608c:	4608      	mov	r0, r1
 800608e:	bc10      	pop	{r4}
 8006090:	4770      	bx	lr

08006092 <__sfputs_r>:
 8006092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	4614      	mov	r4, r2
 800609a:	18d5      	adds	r5, r2, r3
 800609c:	42ac      	cmp	r4, r5
 800609e:	d101      	bne.n	80060a4 <__sfputs_r+0x12>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e007      	b.n	80060b4 <__sfputs_r+0x22>
 80060a4:	463a      	mov	r2, r7
 80060a6:	4630      	mov	r0, r6
 80060a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ac:	f7ff ffdc 	bl	8006068 <__sfputc_r>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d1f3      	bne.n	800609c <__sfputs_r+0xa>
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060b8 <_vfiprintf_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	460d      	mov	r5, r1
 80060be:	4614      	mov	r4, r2
 80060c0:	4698      	mov	r8, r3
 80060c2:	4606      	mov	r6, r0
 80060c4:	b09d      	sub	sp, #116	; 0x74
 80060c6:	b118      	cbz	r0, 80060d0 <_vfiprintf_r+0x18>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <_vfiprintf_r+0x18>
 80060cc:	f7ff fcd4 	bl	8005a78 <__sinit>
 80060d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d2:	07d9      	lsls	r1, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060de:	f7ff febf 	bl	8005e60 <__retarget_lock_acquire_recursive>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	071b      	lsls	r3, r3, #28
 80060e6:	d501      	bpl.n	80060ec <_vfiprintf_r+0x34>
 80060e8:	692b      	ldr	r3, [r5, #16]
 80060ea:	b99b      	cbnz	r3, 8006114 <_vfiprintf_r+0x5c>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff fde6 	bl	8005cc0 <__swsetup_r>
 80060f4:	b170      	cbz	r0, 8006114 <_vfiprintf_r+0x5c>
 80060f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060f8:	07dc      	lsls	r4, r3, #31
 80060fa:	d504      	bpl.n	8006106 <_vfiprintf_r+0x4e>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	b01d      	add	sp, #116	; 0x74
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	0598      	lsls	r0, r3, #22
 800610a:	d4f7      	bmi.n	80060fc <_vfiprintf_r+0x44>
 800610c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800610e:	f7ff fea8 	bl	8005e62 <__retarget_lock_release_recursive>
 8006112:	e7f3      	b.n	80060fc <_vfiprintf_r+0x44>
 8006114:	2300      	movs	r3, #0
 8006116:	9309      	str	r3, [sp, #36]	; 0x24
 8006118:	2320      	movs	r3, #32
 800611a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800611e:	2330      	movs	r3, #48	; 0x30
 8006120:	f04f 0901 	mov.w	r9, #1
 8006124:	f8cd 800c 	str.w	r8, [sp, #12]
 8006128:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80062d8 <_vfiprintf_r+0x220>
 800612c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006130:	4623      	mov	r3, r4
 8006132:	469a      	mov	sl, r3
 8006134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006138:	b10a      	cbz	r2, 800613e <_vfiprintf_r+0x86>
 800613a:	2a25      	cmp	r2, #37	; 0x25
 800613c:	d1f9      	bne.n	8006132 <_vfiprintf_r+0x7a>
 800613e:	ebba 0b04 	subs.w	fp, sl, r4
 8006142:	d00b      	beq.n	800615c <_vfiprintf_r+0xa4>
 8006144:	465b      	mov	r3, fp
 8006146:	4622      	mov	r2, r4
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffa1 	bl	8006092 <__sfputs_r>
 8006150:	3001      	adds	r0, #1
 8006152:	f000 80a9 	beq.w	80062a8 <_vfiprintf_r+0x1f0>
 8006156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006158:	445a      	add	r2, fp
 800615a:	9209      	str	r2, [sp, #36]	; 0x24
 800615c:	f89a 3000 	ldrb.w	r3, [sl]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80a1 	beq.w	80062a8 <_vfiprintf_r+0x1f0>
 8006166:	2300      	movs	r3, #0
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006170:	f10a 0a01 	add.w	sl, sl, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800617c:	931a      	str	r3, [sp, #104]	; 0x68
 800617e:	4654      	mov	r4, sl
 8006180:	2205      	movs	r2, #5
 8006182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006186:	4854      	ldr	r0, [pc, #336]	; (80062d8 <_vfiprintf_r+0x220>)
 8006188:	f000 fb82 	bl	8006890 <memchr>
 800618c:	9a04      	ldr	r2, [sp, #16]
 800618e:	b9d8      	cbnz	r0, 80061c8 <_vfiprintf_r+0x110>
 8006190:	06d1      	lsls	r1, r2, #27
 8006192:	bf44      	itt	mi
 8006194:	2320      	movmi	r3, #32
 8006196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800619a:	0713      	lsls	r3, r2, #28
 800619c:	bf44      	itt	mi
 800619e:	232b      	movmi	r3, #43	; 0x2b
 80061a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a4:	f89a 3000 	ldrb.w	r3, [sl]
 80061a8:	2b2a      	cmp	r3, #42	; 0x2a
 80061aa:	d015      	beq.n	80061d8 <_vfiprintf_r+0x120>
 80061ac:	4654      	mov	r4, sl
 80061ae:	2000      	movs	r0, #0
 80061b0:	f04f 0c0a 	mov.w	ip, #10
 80061b4:	9a07      	ldr	r2, [sp, #28]
 80061b6:	4621      	mov	r1, r4
 80061b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061bc:	3b30      	subs	r3, #48	; 0x30
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d94d      	bls.n	800625e <_vfiprintf_r+0x1a6>
 80061c2:	b1b0      	cbz	r0, 80061f2 <_vfiprintf_r+0x13a>
 80061c4:	9207      	str	r2, [sp, #28]
 80061c6:	e014      	b.n	80061f2 <_vfiprintf_r+0x13a>
 80061c8:	eba0 0308 	sub.w	r3, r0, r8
 80061cc:	fa09 f303 	lsl.w	r3, r9, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	46a2      	mov	sl, r4
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	e7d2      	b.n	800617e <_vfiprintf_r+0xc6>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	1d19      	adds	r1, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	9103      	str	r1, [sp, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bfbb      	ittet	lt
 80061e4:	425b      	neglt	r3, r3
 80061e6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ea:	9307      	strge	r3, [sp, #28]
 80061ec:	9307      	strlt	r3, [sp, #28]
 80061ee:	bfb8      	it	lt
 80061f0:	9204      	strlt	r2, [sp, #16]
 80061f2:	7823      	ldrb	r3, [r4, #0]
 80061f4:	2b2e      	cmp	r3, #46	; 0x2e
 80061f6:	d10c      	bne.n	8006212 <_vfiprintf_r+0x15a>
 80061f8:	7863      	ldrb	r3, [r4, #1]
 80061fa:	2b2a      	cmp	r3, #42	; 0x2a
 80061fc:	d134      	bne.n	8006268 <_vfiprintf_r+0x1b0>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	3402      	adds	r4, #2
 8006202:	1d1a      	adds	r2, r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	9203      	str	r2, [sp, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfb8      	it	lt
 800620c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062dc <_vfiprintf_r+0x224>
 8006216:	2203      	movs	r2, #3
 8006218:	4650      	mov	r0, sl
 800621a:	7821      	ldrb	r1, [r4, #0]
 800621c:	f000 fb38 	bl	8006890 <memchr>
 8006220:	b138      	cbz	r0, 8006232 <_vfiprintf_r+0x17a>
 8006222:	2240      	movs	r2, #64	; 0x40
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	eba0 000a 	sub.w	r0, r0, sl
 800622a:	4082      	lsls	r2, r0
 800622c:	4313      	orrs	r3, r2
 800622e:	3401      	adds	r4, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006236:	2206      	movs	r2, #6
 8006238:	4829      	ldr	r0, [pc, #164]	; (80062e0 <_vfiprintf_r+0x228>)
 800623a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800623e:	f000 fb27 	bl	8006890 <memchr>
 8006242:	2800      	cmp	r0, #0
 8006244:	d03f      	beq.n	80062c6 <_vfiprintf_r+0x20e>
 8006246:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <_vfiprintf_r+0x22c>)
 8006248:	bb1b      	cbnz	r3, 8006292 <_vfiprintf_r+0x1da>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	3307      	adds	r3, #7
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	3308      	adds	r3, #8
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006258:	443b      	add	r3, r7
 800625a:	9309      	str	r3, [sp, #36]	; 0x24
 800625c:	e768      	b.n	8006130 <_vfiprintf_r+0x78>
 800625e:	460c      	mov	r4, r1
 8006260:	2001      	movs	r0, #1
 8006262:	fb0c 3202 	mla	r2, ip, r2, r3
 8006266:	e7a6      	b.n	80061b6 <_vfiprintf_r+0xfe>
 8006268:	2300      	movs	r3, #0
 800626a:	f04f 0c0a 	mov.w	ip, #10
 800626e:	4619      	mov	r1, r3
 8006270:	3401      	adds	r4, #1
 8006272:	9305      	str	r3, [sp, #20]
 8006274:	4620      	mov	r0, r4
 8006276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800627a:	3a30      	subs	r2, #48	; 0x30
 800627c:	2a09      	cmp	r2, #9
 800627e:	d903      	bls.n	8006288 <_vfiprintf_r+0x1d0>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0c6      	beq.n	8006212 <_vfiprintf_r+0x15a>
 8006284:	9105      	str	r1, [sp, #20]
 8006286:	e7c4      	b.n	8006212 <_vfiprintf_r+0x15a>
 8006288:	4604      	mov	r4, r0
 800628a:	2301      	movs	r3, #1
 800628c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006290:	e7f0      	b.n	8006274 <_vfiprintf_r+0x1bc>
 8006292:	ab03      	add	r3, sp, #12
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	462a      	mov	r2, r5
 8006298:	4630      	mov	r0, r6
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <_vfiprintf_r+0x230>)
 800629c:	a904      	add	r1, sp, #16
 800629e:	f3af 8000 	nop.w
 80062a2:	4607      	mov	r7, r0
 80062a4:	1c78      	adds	r0, r7, #1
 80062a6:	d1d6      	bne.n	8006256 <_vfiprintf_r+0x19e>
 80062a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062aa:	07d9      	lsls	r1, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_vfiprintf_r+0x202>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_vfiprintf_r+0x202>
 80062b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b6:	f7ff fdd4 	bl	8005e62 <__retarget_lock_release_recursive>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	065b      	lsls	r3, r3, #25
 80062be:	f53f af1d 	bmi.w	80060fc <_vfiprintf_r+0x44>
 80062c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062c4:	e71c      	b.n	8006100 <_vfiprintf_r+0x48>
 80062c6:	ab03      	add	r3, sp, #12
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	462a      	mov	r2, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <_vfiprintf_r+0x230>)
 80062d0:	a904      	add	r1, sp, #16
 80062d2:	f000 f87d 	bl	80063d0 <_printf_i>
 80062d6:	e7e4      	b.n	80062a2 <_vfiprintf_r+0x1ea>
 80062d8:	08006d4a 	.word	0x08006d4a
 80062dc:	08006d50 	.word	0x08006d50
 80062e0:	08006d54 	.word	0x08006d54
 80062e4:	00000000 	.word	0x00000000
 80062e8:	08006093 	.word	0x08006093

080062ec <_printf_common>:
 80062ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	4616      	mov	r6, r2
 80062f2:	4699      	mov	r9, r3
 80062f4:	688a      	ldr	r2, [r1, #8]
 80062f6:	690b      	ldr	r3, [r1, #16]
 80062f8:	4607      	mov	r7, r0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	bfb8      	it	lt
 80062fe:	4613      	movlt	r3, r2
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006306:	460c      	mov	r4, r1
 8006308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800630c:	b10a      	cbz	r2, 8006312 <_printf_common+0x26>
 800630e:	3301      	adds	r3, #1
 8006310:	6033      	str	r3, [r6, #0]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	0699      	lsls	r1, r3, #26
 8006316:	bf42      	ittt	mi
 8006318:	6833      	ldrmi	r3, [r6, #0]
 800631a:	3302      	addmi	r3, #2
 800631c:	6033      	strmi	r3, [r6, #0]
 800631e:	6825      	ldr	r5, [r4, #0]
 8006320:	f015 0506 	ands.w	r5, r5, #6
 8006324:	d106      	bne.n	8006334 <_printf_common+0x48>
 8006326:	f104 0a19 	add.w	sl, r4, #25
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	6832      	ldr	r2, [r6, #0]
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	42ab      	cmp	r3, r5
 8006332:	dc2b      	bgt.n	800638c <_printf_common+0xa0>
 8006334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006338:	1e13      	subs	r3, r2, #0
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	bf18      	it	ne
 800633e:	2301      	movne	r3, #1
 8006340:	0692      	lsls	r2, r2, #26
 8006342:	d430      	bmi.n	80063a6 <_printf_common+0xba>
 8006344:	4649      	mov	r1, r9
 8006346:	4638      	mov	r0, r7
 8006348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800634c:	47c0      	blx	r8
 800634e:	3001      	adds	r0, #1
 8006350:	d023      	beq.n	800639a <_printf_common+0xae>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	6922      	ldr	r2, [r4, #16]
 8006356:	f003 0306 	and.w	r3, r3, #6
 800635a:	2b04      	cmp	r3, #4
 800635c:	bf14      	ite	ne
 800635e:	2500      	movne	r5, #0
 8006360:	6833      	ldreq	r3, [r6, #0]
 8006362:	f04f 0600 	mov.w	r6, #0
 8006366:	bf08      	it	eq
 8006368:	68e5      	ldreq	r5, [r4, #12]
 800636a:	f104 041a 	add.w	r4, r4, #26
 800636e:	bf08      	it	eq
 8006370:	1aed      	subeq	r5, r5, r3
 8006372:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006376:	bf08      	it	eq
 8006378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800637c:	4293      	cmp	r3, r2
 800637e:	bfc4      	itt	gt
 8006380:	1a9b      	subgt	r3, r3, r2
 8006382:	18ed      	addgt	r5, r5, r3
 8006384:	42b5      	cmp	r5, r6
 8006386:	d11a      	bne.n	80063be <_printf_common+0xd2>
 8006388:	2000      	movs	r0, #0
 800638a:	e008      	b.n	800639e <_printf_common+0xb2>
 800638c:	2301      	movs	r3, #1
 800638e:	4652      	mov	r2, sl
 8006390:	4649      	mov	r1, r9
 8006392:	4638      	mov	r0, r7
 8006394:	47c0      	blx	r8
 8006396:	3001      	adds	r0, #1
 8006398:	d103      	bne.n	80063a2 <_printf_common+0xb6>
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	3501      	adds	r5, #1
 80063a4:	e7c1      	b.n	800632a <_printf_common+0x3e>
 80063a6:	2030      	movs	r0, #48	; 0x30
 80063a8:	18e1      	adds	r1, r4, r3
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b4:	4422      	add	r2, r4
 80063b6:	3302      	adds	r3, #2
 80063b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063bc:	e7c2      	b.n	8006344 <_printf_common+0x58>
 80063be:	2301      	movs	r3, #1
 80063c0:	4622      	mov	r2, r4
 80063c2:	4649      	mov	r1, r9
 80063c4:	4638      	mov	r0, r7
 80063c6:	47c0      	blx	r8
 80063c8:	3001      	adds	r0, #1
 80063ca:	d0e6      	beq.n	800639a <_printf_common+0xae>
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7d9      	b.n	8006384 <_printf_common+0x98>

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	4691      	mov	r9, r2
 80063d8:	2f78      	cmp	r7, #120	; 0x78
 80063da:	4680      	mov	r8, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	469a      	mov	sl, r3
 80063e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	; 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d5 	beq.w	800659c <_printf_i+0x1cc>
 80063f2:	2f58      	cmp	r7, #88	; 0x58
 80063f4:	f000 80c1 	beq.w	800657a <_printf_i+0x1aa>
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	; (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	08006583 	.word	0x08006583
 8006440:	080064a9 	.word	0x080064a9
 8006444:	0800653d 	.word	0x0800653d
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	080065a5 	.word	0x080065a5
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	08006545 	.word	0x08006545
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e0a0      	b.n	80065be <_printf_i+0x1ee>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	0607      	lsls	r7, r0, #24
 8006482:	f103 0104 	add.w	r1, r3, #4
 8006486:	6029      	str	r1, [r5, #0]
 8006488:	d501      	bpl.n	800648e <_printf_i+0xbe>
 800648a:	681e      	ldr	r6, [r3, #0]
 800648c:	e003      	b.n	8006496 <_printf_i+0xc6>
 800648e:	0646      	lsls	r6, r0, #25
 8006490:	d5fb      	bpl.n	800648a <_printf_i+0xba>
 8006492:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006496:	2e00      	cmp	r6, #0
 8006498:	da03      	bge.n	80064a2 <_printf_i+0xd2>
 800649a:	232d      	movs	r3, #45	; 0x2d
 800649c:	4276      	negs	r6, r6
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a2:	230a      	movs	r3, #10
 80064a4:	4859      	ldr	r0, [pc, #356]	; (800660c <_printf_i+0x23c>)
 80064a6:	e012      	b.n	80064ce <_printf_i+0xfe>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	1d19      	adds	r1, r3, #4
 80064ae:	6029      	str	r1, [r5, #0]
 80064b0:	0605      	lsls	r5, r0, #24
 80064b2:	d501      	bpl.n	80064b8 <_printf_i+0xe8>
 80064b4:	681e      	ldr	r6, [r3, #0]
 80064b6:	e002      	b.n	80064be <_printf_i+0xee>
 80064b8:	0641      	lsls	r1, r0, #25
 80064ba:	d5fb      	bpl.n	80064b4 <_printf_i+0xe4>
 80064bc:	881e      	ldrh	r6, [r3, #0]
 80064be:	2f6f      	cmp	r7, #111	; 0x6f
 80064c0:	bf0c      	ite	eq
 80064c2:	2308      	moveq	r3, #8
 80064c4:	230a      	movne	r3, #10
 80064c6:	4851      	ldr	r0, [pc, #324]	; (800660c <_printf_i+0x23c>)
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ce:	6865      	ldr	r5, [r4, #4]
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	bfa8      	it	ge
 80064d4:	6821      	ldrge	r1, [r4, #0]
 80064d6:	60a5      	str	r5, [r4, #8]
 80064d8:	bfa4      	itt	ge
 80064da:	f021 0104 	bicge.w	r1, r1, #4
 80064de:	6021      	strge	r1, [r4, #0]
 80064e0:	b90e      	cbnz	r6, 80064e6 <_printf_i+0x116>
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	d04b      	beq.n	800657e <_printf_i+0x1ae>
 80064e6:	4615      	mov	r5, r2
 80064e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80064ec:	fb03 6711 	mls	r7, r3, r1, r6
 80064f0:	5dc7      	ldrb	r7, [r0, r7]
 80064f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064f6:	4637      	mov	r7, r6
 80064f8:	42bb      	cmp	r3, r7
 80064fa:	460e      	mov	r6, r1
 80064fc:	d9f4      	bls.n	80064e8 <_printf_i+0x118>
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d10b      	bne.n	800651a <_printf_i+0x14a>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	07de      	lsls	r6, r3, #31
 8006506:	d508      	bpl.n	800651a <_printf_i+0x14a>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	6861      	ldr	r1, [r4, #4]
 800650c:	4299      	cmp	r1, r3
 800650e:	bfde      	ittt	le
 8006510:	2330      	movle	r3, #48	; 0x30
 8006512:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006516:	f105 35ff 	addle.w	r5, r5, #4294967295
 800651a:	1b52      	subs	r2, r2, r5
 800651c:	6122      	str	r2, [r4, #16]
 800651e:	464b      	mov	r3, r9
 8006520:	4621      	mov	r1, r4
 8006522:	4640      	mov	r0, r8
 8006524:	f8cd a000 	str.w	sl, [sp]
 8006528:	aa03      	add	r2, sp, #12
 800652a:	f7ff fedf 	bl	80062ec <_printf_common>
 800652e:	3001      	adds	r0, #1
 8006530:	d14a      	bne.n	80065c8 <_printf_i+0x1f8>
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
 8006536:	b004      	add	sp, #16
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	f043 0320 	orr.w	r3, r3, #32
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	2778      	movs	r7, #120	; 0x78
 8006546:	4832      	ldr	r0, [pc, #200]	; (8006610 <_printf_i+0x240>)
 8006548:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	6829      	ldr	r1, [r5, #0]
 8006550:	061f      	lsls	r7, r3, #24
 8006552:	f851 6b04 	ldr.w	r6, [r1], #4
 8006556:	d402      	bmi.n	800655e <_printf_i+0x18e>
 8006558:	065f      	lsls	r7, r3, #25
 800655a:	bf48      	it	mi
 800655c:	b2b6      	uxthmi	r6, r6
 800655e:	07df      	lsls	r7, r3, #31
 8006560:	bf48      	it	mi
 8006562:	f043 0320 	orrmi.w	r3, r3, #32
 8006566:	6029      	str	r1, [r5, #0]
 8006568:	bf48      	it	mi
 800656a:	6023      	strmi	r3, [r4, #0]
 800656c:	b91e      	cbnz	r6, 8006576 <_printf_i+0x1a6>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	2310      	movs	r3, #16
 8006578:	e7a6      	b.n	80064c8 <_printf_i+0xf8>
 800657a:	4824      	ldr	r0, [pc, #144]	; (800660c <_printf_i+0x23c>)
 800657c:	e7e4      	b.n	8006548 <_printf_i+0x178>
 800657e:	4615      	mov	r5, r2
 8006580:	e7bd      	b.n	80064fe <_printf_i+0x12e>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	6826      	ldr	r6, [r4, #0]
 8006586:	1d18      	adds	r0, r3, #4
 8006588:	6961      	ldr	r1, [r4, #20]
 800658a:	6028      	str	r0, [r5, #0]
 800658c:	0635      	lsls	r5, r6, #24
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	d501      	bpl.n	8006596 <_printf_i+0x1c6>
 8006592:	6019      	str	r1, [r3, #0]
 8006594:	e002      	b.n	800659c <_printf_i+0x1cc>
 8006596:	0670      	lsls	r0, r6, #25
 8006598:	d5fb      	bpl.n	8006592 <_printf_i+0x1c2>
 800659a:	8019      	strh	r1, [r3, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	4615      	mov	r5, r2
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	e7bc      	b.n	800651e <_printf_i+0x14e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	2100      	movs	r1, #0
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	602a      	str	r2, [r5, #0]
 80065ac:	681d      	ldr	r5, [r3, #0]
 80065ae:	6862      	ldr	r2, [r4, #4]
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f96d 	bl	8006890 <memchr>
 80065b6:	b108      	cbz	r0, 80065bc <_printf_i+0x1ec>
 80065b8:	1b40      	subs	r0, r0, r5
 80065ba:	6060      	str	r0, [r4, #4]
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2300      	movs	r3, #0
 80065c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c6:	e7aa      	b.n	800651e <_printf_i+0x14e>
 80065c8:	462a      	mov	r2, r5
 80065ca:	4649      	mov	r1, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	47d0      	blx	sl
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0ad      	beq.n	8006532 <_printf_i+0x162>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	079b      	lsls	r3, r3, #30
 80065da:	d413      	bmi.n	8006604 <_printf_i+0x234>
 80065dc:	68e0      	ldr	r0, [r4, #12]
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	4298      	cmp	r0, r3
 80065e2:	bfb8      	it	lt
 80065e4:	4618      	movlt	r0, r3
 80065e6:	e7a6      	b.n	8006536 <_printf_i+0x166>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4632      	mov	r2, r6
 80065ec:	4649      	mov	r1, r9
 80065ee:	4640      	mov	r0, r8
 80065f0:	47d0      	blx	sl
 80065f2:	3001      	adds	r0, #1
 80065f4:	d09d      	beq.n	8006532 <_printf_i+0x162>
 80065f6:	3501      	adds	r5, #1
 80065f8:	68e3      	ldr	r3, [r4, #12]
 80065fa:	9903      	ldr	r1, [sp, #12]
 80065fc:	1a5b      	subs	r3, r3, r1
 80065fe:	42ab      	cmp	r3, r5
 8006600:	dcf2      	bgt.n	80065e8 <_printf_i+0x218>
 8006602:	e7eb      	b.n	80065dc <_printf_i+0x20c>
 8006604:	2500      	movs	r5, #0
 8006606:	f104 0619 	add.w	r6, r4, #25
 800660a:	e7f5      	b.n	80065f8 <_printf_i+0x228>
 800660c:	08006d5b 	.word	0x08006d5b
 8006610:	08006d6c 	.word	0x08006d6c

08006614 <__sflush_r>:
 8006614:	898a      	ldrh	r2, [r1, #12]
 8006616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006618:	4605      	mov	r5, r0
 800661a:	0710      	lsls	r0, r2, #28
 800661c:	460c      	mov	r4, r1
 800661e:	d457      	bmi.n	80066d0 <__sflush_r+0xbc>
 8006620:	684b      	ldr	r3, [r1, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dc04      	bgt.n	8006630 <__sflush_r+0x1c>
 8006626:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc01      	bgt.n	8006630 <__sflush_r+0x1c>
 800662c:	2000      	movs	r0, #0
 800662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006632:	2e00      	cmp	r6, #0
 8006634:	d0fa      	beq.n	800662c <__sflush_r+0x18>
 8006636:	2300      	movs	r3, #0
 8006638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800663c:	682f      	ldr	r7, [r5, #0]
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	d032      	beq.n	80066aa <__sflush_r+0x96>
 8006644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	075a      	lsls	r2, r3, #29
 800664a:	d505      	bpl.n	8006658 <__sflush_r+0x44>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	1ac0      	subs	r0, r0, r3
 8006650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006652:	b10b      	cbz	r3, 8006658 <__sflush_r+0x44>
 8006654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006656:	1ac0      	subs	r0, r0, r3
 8006658:	2300      	movs	r3, #0
 800665a:	4602      	mov	r2, r0
 800665c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800665e:	4628      	mov	r0, r5
 8006660:	6a21      	ldr	r1, [r4, #32]
 8006662:	47b0      	blx	r6
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	d106      	bne.n	8006678 <__sflush_r+0x64>
 800666a:	6829      	ldr	r1, [r5, #0]
 800666c:	291d      	cmp	r1, #29
 800666e:	d82b      	bhi.n	80066c8 <__sflush_r+0xb4>
 8006670:	4a28      	ldr	r2, [pc, #160]	; (8006714 <__sflush_r+0x100>)
 8006672:	410a      	asrs	r2, r1
 8006674:	07d6      	lsls	r6, r2, #31
 8006676:	d427      	bmi.n	80066c8 <__sflush_r+0xb4>
 8006678:	2200      	movs	r2, #0
 800667a:	6062      	str	r2, [r4, #4]
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	04d9      	lsls	r1, r3, #19
 8006680:	6022      	str	r2, [r4, #0]
 8006682:	d504      	bpl.n	800668e <__sflush_r+0x7a>
 8006684:	1c42      	adds	r2, r0, #1
 8006686:	d101      	bne.n	800668c <__sflush_r+0x78>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b903      	cbnz	r3, 800668e <__sflush_r+0x7a>
 800668c:	6560      	str	r0, [r4, #84]	; 0x54
 800668e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006690:	602f      	str	r7, [r5, #0]
 8006692:	2900      	cmp	r1, #0
 8006694:	d0ca      	beq.n	800662c <__sflush_r+0x18>
 8006696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800669a:	4299      	cmp	r1, r3
 800669c:	d002      	beq.n	80066a4 <__sflush_r+0x90>
 800669e:	4628      	mov	r0, r5
 80066a0:	f7ff fbee 	bl	8005e80 <_free_r>
 80066a4:	2000      	movs	r0, #0
 80066a6:	6360      	str	r0, [r4, #52]	; 0x34
 80066a8:	e7c1      	b.n	800662e <__sflush_r+0x1a>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b0      	blx	r6
 80066b0:	1c41      	adds	r1, r0, #1
 80066b2:	d1c8      	bne.n	8006646 <__sflush_r+0x32>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0c5      	beq.n	8006646 <__sflush_r+0x32>
 80066ba:	2b1d      	cmp	r3, #29
 80066bc:	d001      	beq.n	80066c2 <__sflush_r+0xae>
 80066be:	2b16      	cmp	r3, #22
 80066c0:	d101      	bne.n	80066c6 <__sflush_r+0xb2>
 80066c2:	602f      	str	r7, [r5, #0]
 80066c4:	e7b2      	b.n	800662c <__sflush_r+0x18>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	e7ae      	b.n	800662e <__sflush_r+0x1a>
 80066d0:	690f      	ldr	r7, [r1, #16]
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	d0aa      	beq.n	800662c <__sflush_r+0x18>
 80066d6:	0793      	lsls	r3, r2, #30
 80066d8:	bf18      	it	ne
 80066da:	2300      	movne	r3, #0
 80066dc:	680e      	ldr	r6, [r1, #0]
 80066de:	bf08      	it	eq
 80066e0:	694b      	ldreq	r3, [r1, #20]
 80066e2:	1bf6      	subs	r6, r6, r7
 80066e4:	600f      	str	r7, [r1, #0]
 80066e6:	608b      	str	r3, [r1, #8]
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	dd9f      	ble.n	800662c <__sflush_r+0x18>
 80066ec:	4633      	mov	r3, r6
 80066ee:	463a      	mov	r2, r7
 80066f0:	4628      	mov	r0, r5
 80066f2:	6a21      	ldr	r1, [r4, #32]
 80066f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80066f8:	47e0      	blx	ip
 80066fa:	2800      	cmp	r0, #0
 80066fc:	dc06      	bgt.n	800670c <__sflush_r+0xf8>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
 8006704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	e790      	b.n	800662e <__sflush_r+0x1a>
 800670c:	4407      	add	r7, r0
 800670e:	1a36      	subs	r6, r6, r0
 8006710:	e7ea      	b.n	80066e8 <__sflush_r+0xd4>
 8006712:	bf00      	nop
 8006714:	dfbffffe 	.word	0xdfbffffe

08006718 <_fflush_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	4605      	mov	r5, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b913      	cbnz	r3, 8006728 <_fflush_r+0x10>
 8006722:	2500      	movs	r5, #0
 8006724:	4628      	mov	r0, r5
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	b118      	cbz	r0, 8006732 <_fflush_r+0x1a>
 800672a:	6a03      	ldr	r3, [r0, #32]
 800672c:	b90b      	cbnz	r3, 8006732 <_fflush_r+0x1a>
 800672e:	f7ff f9a3 	bl	8005a78 <__sinit>
 8006732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f3      	beq.n	8006722 <_fflush_r+0xa>
 800673a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800673c:	07d0      	lsls	r0, r2, #31
 800673e:	d404      	bmi.n	800674a <_fflush_r+0x32>
 8006740:	0599      	lsls	r1, r3, #22
 8006742:	d402      	bmi.n	800674a <_fflush_r+0x32>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f7ff fb8b 	bl	8005e60 <__retarget_lock_acquire_recursive>
 800674a:	4628      	mov	r0, r5
 800674c:	4621      	mov	r1, r4
 800674e:	f7ff ff61 	bl	8006614 <__sflush_r>
 8006752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006754:	4605      	mov	r5, r0
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d4e4      	bmi.n	8006724 <_fflush_r+0xc>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d4e1      	bmi.n	8006724 <_fflush_r+0xc>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f7ff fb7e 	bl	8005e62 <__retarget_lock_release_recursive>
 8006766:	e7dd      	b.n	8006724 <_fflush_r+0xc>

08006768 <__swhatbuf_r>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	460c      	mov	r4, r1
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	4615      	mov	r5, r2
 8006772:	2900      	cmp	r1, #0
 8006774:	461e      	mov	r6, r3
 8006776:	b096      	sub	sp, #88	; 0x58
 8006778:	da0c      	bge.n	8006794 <__swhatbuf_r+0x2c>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	2100      	movs	r1, #0
 800677e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006782:	bf0c      	ite	eq
 8006784:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006788:	2340      	movne	r3, #64	; 0x40
 800678a:	2000      	movs	r0, #0
 800678c:	6031      	str	r1, [r6, #0]
 800678e:	602b      	str	r3, [r5, #0]
 8006790:	b016      	add	sp, #88	; 0x58
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	466a      	mov	r2, sp
 8006796:	f000 f849 	bl	800682c <_fstat_r>
 800679a:	2800      	cmp	r0, #0
 800679c:	dbed      	blt.n	800677a <__swhatbuf_r+0x12>
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80067a4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80067a8:	4259      	negs	r1, r3
 80067aa:	4159      	adcs	r1, r3
 80067ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b0:	e7eb      	b.n	800678a <__swhatbuf_r+0x22>

080067b2 <__smakebuf_r>:
 80067b2:	898b      	ldrh	r3, [r1, #12]
 80067b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067b6:	079d      	lsls	r5, r3, #30
 80067b8:	4606      	mov	r6, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	d507      	bpl.n	80067ce <__smakebuf_r+0x1c>
 80067be:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2301      	movs	r3, #1
 80067c8:	6163      	str	r3, [r4, #20]
 80067ca:	b002      	add	sp, #8
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	466a      	mov	r2, sp
 80067d0:	ab01      	add	r3, sp, #4
 80067d2:	f7ff ffc9 	bl	8006768 <__swhatbuf_r>
 80067d6:	9900      	ldr	r1, [sp, #0]
 80067d8:	4605      	mov	r5, r0
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff fbb8 	bl	8005f50 <_malloc_r>
 80067e0:	b948      	cbnz	r0, 80067f6 <__smakebuf_r+0x44>
 80067e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e6:	059a      	lsls	r2, r3, #22
 80067e8:	d4ef      	bmi.n	80067ca <__smakebuf_r+0x18>
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	f043 0302 	orr.w	r3, r3, #2
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	e7e3      	b.n	80067be <__smakebuf_r+0xc>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	6020      	str	r0, [r4, #0]
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	6120      	str	r0, [r4, #16]
 8006804:	6163      	str	r3, [r4, #20]
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	b15b      	cbz	r3, 8006822 <__smakebuf_r+0x70>
 800680a:	4630      	mov	r0, r6
 800680c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006810:	f000 f81e 	bl	8006850 <_isatty_r>
 8006814:	b128      	cbz	r0, 8006822 <__smakebuf_r+0x70>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	431d      	orrs	r5, r3
 8006826:	81a5      	strh	r5, [r4, #12]
 8006828:	e7cf      	b.n	80067ca <__smakebuf_r+0x18>
	...

0800682c <_fstat_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	2300      	movs	r3, #0
 8006830:	4d06      	ldr	r5, [pc, #24]	; (800684c <_fstat_r+0x20>)
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	4611      	mov	r1, r2
 8006838:	602b      	str	r3, [r5, #0]
 800683a:	f7fd fc6a 	bl	8004112 <_fstat>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	d102      	bne.n	8006848 <_fstat_r+0x1c>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	b103      	cbz	r3, 8006848 <_fstat_r+0x1c>
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	bd38      	pop	{r3, r4, r5, pc}
 800684a:	bf00      	nop
 800684c:	20000744 	.word	0x20000744

08006850 <_isatty_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	2300      	movs	r3, #0
 8006854:	4d05      	ldr	r5, [pc, #20]	; (800686c <_isatty_r+0x1c>)
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fd fc68 	bl	8004130 <_isatty>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_isatty_r+0x1a>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_isatty_r+0x1a>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000744 	.word	0x20000744

08006870 <_sbrk_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d05      	ldr	r5, [pc, #20]	; (800688c <_sbrk_r+0x1c>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fd fc6e 	bl	800415c <_sbrk>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_sbrk_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_sbrk_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000744 	.word	0x20000744

08006890 <memchr>:
 8006890:	4603      	mov	r3, r0
 8006892:	b510      	push	{r4, lr}
 8006894:	b2c9      	uxtb	r1, r1
 8006896:	4402      	add	r2, r0
 8006898:	4293      	cmp	r3, r2
 800689a:	4618      	mov	r0, r3
 800689c:	d101      	bne.n	80068a2 <memchr+0x12>
 800689e:	2000      	movs	r0, #0
 80068a0:	e003      	b.n	80068aa <memchr+0x1a>
 80068a2:	7804      	ldrb	r4, [r0, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	428c      	cmp	r4, r1
 80068a8:	d1f6      	bne.n	8006898 <memchr+0x8>
 80068aa:	bd10      	pop	{r4, pc}

080068ac <_init>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr

080068b8 <_fini>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr
