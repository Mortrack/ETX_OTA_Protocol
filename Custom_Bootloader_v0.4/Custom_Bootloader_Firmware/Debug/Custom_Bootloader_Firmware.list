
Custom_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  0800210c  0800210c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006918  08006918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  00010098  2**0
                  CONTENTS
  4 .ARM          00000000  08006dd4  08006dd4  00010098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dd4  08006dd4  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd4  08006dd4  00006dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd8  08006dd8  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006ddc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000098  08006e74  00010098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08006e74  0001075c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a875  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221f  00000000  00000000  0001a979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0001cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075f  00000000  00000000  0001d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187ae  00000000  00000000  0001dcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdc0  00000000  00000000  0003645d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000863c3  00000000  00000000  0004321d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d44  00000000  00000000  000c95e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000cc324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800210c <__do_global_dtors_aux>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4c05      	ldr	r4, [pc, #20]	; (8002124 <__do_global_dtors_aux+0x18>)
 8002110:	7823      	ldrb	r3, [r4, #0]
 8002112:	b933      	cbnz	r3, 8002122 <__do_global_dtors_aux+0x16>
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__do_global_dtors_aux+0x1c>)
 8002116:	b113      	cbz	r3, 800211e <__do_global_dtors_aux+0x12>
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <__do_global_dtors_aux+0x20>)
 800211a:	f3af 8000 	nop.w
 800211e:	2301      	movs	r3, #1
 8002120:	7023      	strb	r3, [r4, #0]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	20000098 	.word	0x20000098
 8002128:	00000000 	.word	0x00000000
 800212c:	08006900 	.word	0x08006900

08002130 <frame_dummy>:
 8002130:	b508      	push	{r3, lr}
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <frame_dummy+0x10>)
 8002134:	b11b      	cbz	r3, 800213e <frame_dummy+0xe>
 8002136:	4903      	ldr	r1, [pc, #12]	; (8002144 <frame_dummy+0x14>)
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <frame_dummy+0x18>)
 800213a:	f3af 8000 	nop.w
 800213e:	bd08      	pop	{r3, pc}
 8002140:	00000000 	.word	0x00000000
 8002144:	2000009c 	.word	0x2000009c
 8002148:	08006900 	.word	0x08006900

0800214c <init_firmware_update_module>:

ETX_OTA_Status init_firmware_update_module(ETX_OTA_hw_Protocol hardware_protocol,
											UART_HandleTypeDef *huart,
											firmware_update_config_data_t *fw_config,
											HM10_GPIO_def_t *GPIO_is_hm10_default_settings_Pin)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
    #if ETX_OTA_VERBOSE
        printf("Initializing the Firmware Update Module...\r\n");
    #endif

    /* Persist the requested hardware protocol into which the ETX OTA Protocol will be used on. */
    ETX_OTA_hardware_protocol = hardware_protocol;
 800215c:	4a46      	ldr	r2, [pc, #280]	; (8002278 <init_firmware_update_module+0x12c>)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	7013      	strb	r3, [r2, #0]

    /* Persist the pointer to the UART into which the ETX OTA Protocol will be used on. */
    p_huart = huart;
 8002162:	4a46      	ldr	r2, [pc, #280]	; (800227c <init_firmware_update_module+0x130>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the Firmware Update Configurations sub-module to the one that was given. */
    p_fw_config = fw_config;
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <init_firmware_update_module+0x134>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the GPIO Definition Type of the GPIO Pin from which it can be requested to reset the Configuration Settings of the HM-10 BT Device to its default settings. */
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings_Pin;
 800216e:	4a45      	ldr	r2, [pc, #276]	; (8002284 <init_firmware_update_module+0x138>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6013      	str	r3, [r2, #0]

    /* Validate the requested hardware protocol to be used and, if required, initialized it. */
    switch (hardware_protocol)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d076      	beq.n	8002268 <init_firmware_update_module+0x11c>
 800217a:	2b01      	cmp	r3, #1
 800217c:	d172      	bne.n	8002264 <init_firmware_update_module+0x118>

            /* Initializing the HM-10 Bluetooth module. */
			#if ETX_OTA_VERBOSE
				printf("Initializing the HM-10 Bluetooth module...\r\n");
			#endif
            init_hm10_module(p_huart);
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <init_firmware_update_module+0x130>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 ff0e 	bl	8002fa4 <init_hm10_module>

            /* Resetting the Configuration Settings of the HM-10 BT Device to its Default Settings, but only if user is requesting it. */
            if (HAL_GPIO_ReadPin(p_GPIO_is_hm10_default_settings->GPIO_Port, p_GPIO_is_hm10_default_settings->GPIO_Pin) == GPIO_PIN_SET)
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <init_firmware_update_module+0x138>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <init_firmware_update_module+0x138>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f002 fd7b 	bl	8004c94 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d163      	bne.n	800226c <init_firmware_update_module+0x120>
					printf("MCU has been requested to reset the configuration settings of the HM-10 BT Device to its default settings.\r\n");
					printf("Resetting configuration settings of the HM-10 BT Device...\r\n");
				#endif

				/* Sending test command to HM-10 BT Device to make sure that it is not in a Bluetooth Connection for the next steps to be made and to make sure that it is currently in working condition. */
				ret = disconnect_hm10_from_bt_address();
 80021a4:	f001 fb08 	bl	80037b8 <disconnect_hm10_from_bt_address>
 80021a8:	4603      	mov	r3, r0
 80021aa:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (ret == HM10_BT_Connection_Status_Unknown)
 80021ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <init_firmware_update_module+0x6a>
				{
					#if ETX_OTA_VERBOSE
						printf("ERROR: Something went wrong whenever sending the initial Test Command sent to the HM-10 BT Device(Bluetooth Connection Status Code returned = %d).\r\n", ret);
					#endif
					return ETX_OTA_EC_ERR;
 80021b2:	2304      	movs	r3, #4
 80021b4:	e05c      	b.n	8002270 <init_firmware_update_module+0x124>
				}

                /* Restore all the HM-10 Setup values to factory setup. */
                ret = send_hm10_renew_cmd();
 80021b6:	f000 ff75 	bl	80030a4 <send_hm10_renew_cmd>
 80021ba:	4603      	mov	r3, r0
 80021bc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <init_firmware_update_module+0x7c>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The HM-10 BT device could not be restored to its factory setup via the AT+RENEW Command (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021c4:	2304      	movs	r3, #4
 80021c6:	e053      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting BT Name in HM-10 BT Device. */
                /** <b>Local variable default_ble_name:</b> Used to hold the Default BT Name of the HM-10 BT Device as given by @ref HM10_DEFAULT_BLE_NAME . */
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <init_firmware_update_module+0x13c>)
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	210c      	movs	r1, #12
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 ffd4 	bl	8003188 <set_hm10_name>
 80021e0:	4603      	mov	r3, r0
 80021e2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <init_firmware_update_module+0xa2>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The BT Name of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021ea:	2304      	movs	r3, #4
 80021ec:	e040      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting Role in BT Device. */
                ret = set_hm10_role(HM10_DEFAULT_ROLE);
 80021ee:	2030      	movs	r0, #48	; 0x30
 80021f0:	f001 f892 	bl	8003318 <set_hm10_role>
 80021f4:	4603      	mov	r3, r0
 80021f6:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80021f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <init_firmware_update_module+0xb6>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Role of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80021fe:	2304      	movs	r3, #4
 8002200:	e036      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting a Pin in the BT Device. */
                /** <b>Local variable default_pin_code:</b> Used to hold the Default Pin Code of the HM-10 BT Device as given by @ref HM10_DEFAULT_PIN . */
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 8002202:	4a22      	ldr	r2, [pc, #136]	; (800228c <init_firmware_update_module+0x140>)
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220c:	6018      	str	r0, [r3, #0]
 800220e:	3304      	adds	r3, #4
 8002210:	8019      	strh	r1, [r3, #0]
                ret = set_hm10_pin(default_pin_code);
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f900 	bl	800341c <set_hm10_pin>
 800221c:	4603      	mov	r3, r0
 800221e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <init_firmware_update_module+0xde>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8002226:	2304      	movs	r3, #4
 8002228:	e022      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting a Pin Code Mode in the BT Device. */
                ret = set_hm10_pin_code_mode(HM10_DEFAULT_PIN_CODE_MODE);
 800222a:	2030      	movs	r0, #48	; 0x30
 800222c:	f001 f9c0 	bl	80035b0 <set_hm10_pin_code_mode>
 8002230:	4603      	mov	r3, r0
 8002232:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <init_firmware_update_module+0xf2>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin Code Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800223a:	2304      	movs	r3, #4
 800223c:	e018      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Setting the Module Work Mode in the BT Device. */
                ret = set_hm10_module_work_mode(HM10_DEFAULT_MODULE_WORK_MODE);
 800223e:	2030      	movs	r0, #48	; 0x30
 8002240:	f001 fa38 	bl	80036b4 <set_hm10_module_work_mode>
 8002244:	4603      	mov	r3, r0
 8002246:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8002248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <init_firmware_update_module+0x106>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Module Work Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800224e:	2304      	movs	r3, #4
 8002250:	e00e      	b.n	8002270 <init_firmware_update_module+0x124>
                }

                /* Resetting the BT Device. */
                ret = send_hm10_reset_cmd();
 8002252:	f000 feb5 	bl	8002fc0 <send_hm10_reset_cmd>
 8002256:	4603      	mov	r3, r0
 8002258:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 800225a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <init_firmware_update_module+0x120>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: Could not reset the HM-10 BT device (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8002260:	2304      	movs	r3, #4
 8002262:	e005      	b.n	8002270 <init_firmware_update_module+0x124>
            break;
        default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: The requested Hardware Protocol %d is not recognized by the ETX OTA Protocol.\r\n", hardware_protocol);
			#endif
            return ETX_OTA_EC_ERR;
 8002264:	2304      	movs	r3, #4
 8002266:	e003      	b.n	8002270 <init_firmware_update_module+0x124>
            break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <init_firmware_update_module+0x122>
            break;
 800226c:	bf00      	nop
    }

    return ETX_OTA_EC_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004cc 	.word	0x200004cc
 800227c:	200004c8 	.word	0x200004c8
 8002280:	200004c4 	.word	0x200004c4
 8002284:	200004d0 	.word	0x200004d0
 8002288:	08006918 	.word	0x08006918
 800228c:	08006924 	.word	0x08006924

08002290 <firmware_image_download_and_install>:

ETX_OTA_Status firmware_image_download_and_install()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref FirmUpdConf_Status or a @ref ETX_OTA_Status function type. */
	ETX_OTA_Status ret;

	/* Reset the global variables related to: 1) The Header data of a received Firmware Image and 2) The ETX OTA Process State. */
	etx_ota_fw_received_size = 0U;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <firmware_image_download_and_install+0xbc>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
	etx_ota_state            = ETX_OTA_STATE_START;
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <firmware_image_download_and_install+0xc0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
	do
	{
		#if ETX_OTA_VERBOSE
			printf("Waiting for an ETX OTA Packet from the host...\r\n");
		#endif
		ret = etx_ota_receive_packet(Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE);
 80022a2:	f240 4109 	movw	r1, #1033	; 0x409
 80022a6:	482b      	ldr	r0, [pc, #172]	; (8002354 <firmware_image_download_and_install+0xc4>)
 80022a8:	f000 f856 	bl	8002358 <etx_ota_receive_packet>
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
		switch (ret)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d036      	beq.n	8002324 <firmware_image_download_and_install+0x94>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	dc39      	bgt.n	800232e <firmware_image_download_and_install+0x9e>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <firmware_image_download_and_install+0x34>
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d02e      	beq.n	8002320 <firmware_image_download_and_install+0x90>
 80022c2:	e034      	b.n	800232e <firmware_image_download_and_install+0x9e>
		{
		  case ETX_OTA_EC_OK:
			/* Since the ETX OTA Packet was received successfully, proceed into processing that data correspondingly. */
			ret = etx_ota_process_data(Rx_Buffer);
 80022c4:	4823      	ldr	r0, [pc, #140]	; (8002354 <firmware_image_download_and_install+0xc4>)
 80022c6:	f000 f9f5 	bl	80026b4 <etx_ota_process_data>
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
			switch (ret)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d823      	bhi.n	800231c <firmware_image_download_and_install+0x8c>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <firmware_image_download_and_install+0x4c>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	080022fb 	.word	0x080022fb
 80022e4:	08002305 	.word	0x08002305
 80022e8:	08002309 	.word	0x08002309
 80022ec:	08002313 	.word	0x08002313
			{
			  case ETX_OTA_EC_OK:
				  #if ETX_OTA_VERBOSE
				  	  printf("DONE: The current ETX OTA Packet was processed successfully. Therefore, sending ACK...\r\n");
				  #endif
				  etx_ota_send_resp(ETX_OTA_ACK);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 facf 	bl	8002894 <etx_ota_send_resp>
				  break;
 80022f6:	bf00      	nop
				  #if ETX_OTA_VERBOSE
				  	  printf("ERROR: The ETX OTA Exception code %d that has been generated is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
				  #endif
				  return ret;
			}
			break;
 80022f8:	e01e      	b.n	8002338 <firmware_image_download_and_install+0xa8>
				  etx_ota_send_resp(ETX_OTA_ACK);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 faca 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_STOP;
 8002300:	2301      	movs	r3, #1
 8002302:	e01e      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  return ETX_OTA_EC_ERR;
 8002304:	2304      	movs	r3, #4
 8002306:	e01c      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fac3 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_NA;
 800230e:	2303      	movs	r3, #3
 8002310:	e017      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  etx_ota_send_resp(ETX_OTA_NACK);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fabe 	bl	8002894 <etx_ota_send_resp>
				  return ETX_OTA_EC_ERR;
 8002318:	2304      	movs	r3, #4
 800231a:	e012      	b.n	8002342 <firmware_image_download_and_install+0xb2>
				  return ret;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	e010      	b.n	8002342 <firmware_image_download_and_install+0xb2>

		  case ETX_OTA_EC_NR:
			  #if ETX_OTA_VERBOSE
			  	  printf("DONE: No response from host.\r\n");
			  #endif
			  return ETX_OTA_EC_NR;
 8002320:	2302      	movs	r3, #2
 8002322:	e00e      	b.n	8002342 <firmware_image_download_and_install+0xb2>

		  case ETX_OTA_EC_ERR:
			  #if ETX_OTA_VERBOSE
			  	  printf("ERROR: An Error Exception Code has been generated during the ETX OTA process. Therefore, sending NACK...\r\n");
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 8002324:	2001      	movs	r0, #1
 8002326:	f000 fab5 	bl	8002894 <etx_ota_send_resp>
			  return ETX_OTA_EC_ERR;
 800232a:	2304      	movs	r3, #4
 800232c:	e009      	b.n	8002342 <firmware_image_download_and_install+0xb2>
		  default:
			  /* The "default" case should not be called. */
			  #if ETX_OTA_VERBOSE
			  	  printf("ERROR: The ETX OTA Exception code %d that has been generated either should not have been generated or is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fab0 	bl	8002894 <etx_ota_send_resp>
			  return ret;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	e004      	b.n	8002342 <firmware_image_download_and_install+0xb2>
		}
	}
	while (etx_ota_state != ETX_OTA_STATE_IDLE);
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <firmware_image_download_and_install+0xc0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1b0      	bne.n	80022a2 <firmware_image_download_and_install+0x12>

	return ETX_OTA_EC_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004c0 	.word	0x200004c0
 8002350:	200004bd 	.word	0x200004bd
 8002354:	200000b4 	.word	0x200000b4

08002358 <etx_ota_receive_packet>:

static ETX_OTA_Status etx_ota_receive_packet(uint8_t *buf, uint16_t max_len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable len:</b> Current index against which the bytes of the current ETX OTA Packet have been fetched. */
	uint16_t len = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	83fb      	strh	r3, [r7, #30]
	uint32_t rec_data_crc;

	#if ETX_OTA_VERBOSE
		printf("Waiting to receive an ETX OTA Packet from the host...\r\n");
	#endif
	switch (ETX_OTA_hardware_protocol)
 8002368:	4ba2      	ldr	r3, [pc, #648]	; (80025f4 <etx_ota_receive_packet+0x29c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <etx_ota_receive_packet+0x20>
 8002370:	2b01      	cmp	r3, #1
 8002372:	f000 80d2 	beq.w	800251a <etx_ota_receive_packet+0x1c2>
 8002376:	e174      	b.n	8002662 <etx_ota_receive_packet+0x30a>
	{
		case ETX_OTA_hw_Protocol_UART:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002378:	4b9f      	ldr	r3, [pc, #636]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	18d1      	adds	r1, r2, r3
 8002382:	f242 3328 	movw	r3, #9000	; 0x2328
 8002386:	2201      	movs	r2, #1
 8002388:	f003 f997 	bl	80056ba <HAL_UART_Receive>
 800238c:	4603      	mov	r3, r0
 800238e:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8002390:	8a7b      	ldrh	r3, [r7, #18]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fbdb 	bl	8002b50 <HAL_ret_handler>
 800239a:	4603      	mov	r3, r0
 800239c:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800239e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <etx_ota_receive_packet+0x54>
			{
				return ret;
 80023a6:	8a7b      	ldrh	r3, [r7, #18]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e17f      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			if (buf[len++] != ETX_OTA_SOF)
 80023ac:	8bfb      	ldrh	r3, [r7, #30]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	83fa      	strh	r2, [r7, #30]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2baa      	cmp	r3, #170	; 0xaa
 80023bc:	d001      	beq.n	80023c2 <etx_ota_receive_packet+0x6a>
			{
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
				#endif
				return ETX_OTA_EC_ERR;
 80023be:	2304      	movs	r3, #4
 80023c0:	e174      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80023c2:	4b8d      	ldr	r3, [pc, #564]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	8bfb      	ldrh	r3, [r7, #30]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	18d1      	adds	r1, r2, r3
 80023cc:	f242 3328 	movw	r3, #9000	; 0x2328
 80023d0:	2201      	movs	r2, #1
 80023d2:	f003 f972 	bl	80056ba <HAL_UART_Receive>
 80023d6:	4603      	mov	r3, r0
 80023d8:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80023da:	8a7b      	ldrh	r3, [r7, #18]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fbb6 	bl	8002b50 <HAL_ret_handler>
 80023e4:	4603      	mov	r3, r0
 80023e6:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80023e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <etx_ota_receive_packet+0x9e>
			{
				return ret;
 80023f0:	8a7b      	ldrh	r3, [r7, #18]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	e15a      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			switch (buf[len++])
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	83fa      	strh	r2, [r7, #30]
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d901      	bls.n	800240c <etx_ota_receive_packet+0xb4>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 8002408:	2304      	movs	r3, #4
 800240a:	e14f      	b.n	80026ac <etx_ota_receive_packet+0x354>
					break;
 800240c:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800240e:	4b7a      	ldr	r3, [pc, #488]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	8bfb      	ldrh	r3, [r7, #30]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	18d1      	adds	r1, r2, r3
 8002418:	f242 3328 	movw	r3, #9000	; 0x2328
 800241c:	2202      	movs	r2, #2
 800241e:	f003 f94c 	bl	80056ba <HAL_UART_Receive>
 8002422:	4603      	mov	r3, r0
 8002424:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8002426:	8a7b      	ldrh	r3, [r7, #18]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb90 	bl	8002b50 <HAL_ret_handler>
 8002430:	4603      	mov	r3, r0
 8002432:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002434:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <etx_ota_receive_packet+0xea>
			{
				return ret;
 800243c:	8a7b      	ldrh	r3, [r7, #18]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e134      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			data_len = *(uint16_t *)&buf[len];
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 800244c:	8bfb      	ldrh	r3, [r7, #30]
 800244e:	3302      	adds	r3, #2
 8002450:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	82fb      	strh	r3, [r7, #22]
 8002456:	e01f      	b.n	8002498 <etx_ota_receive_packet+0x140>
			{
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8002458:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	8bfb      	ldrh	r3, [r7, #30]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	83fa      	strh	r2, [r7, #30]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1899      	adds	r1, r3, r2
 8002468:	f242 3328 	movw	r3, #9000	; 0x2328
 800246c:	2201      	movs	r2, #1
 800246e:	f003 f924 	bl	80056ba <HAL_UART_Receive>
 8002472:	4603      	mov	r3, r0
 8002474:	827b      	strh	r3, [r7, #18]
				ret = HAL_ret_handler(ret);
 8002476:	8a7b      	ldrh	r3, [r7, #18]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb68 	bl	8002b50 <HAL_ret_handler>
 8002480:	4603      	mov	r3, r0
 8002482:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 8002484:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <etx_ota_receive_packet+0x13a>
				{
					return ret;
 800248c:	8a7b      	ldrh	r3, [r7, #18]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e10c      	b.n	80026ac <etx_ota_receive_packet+0x354>
			for (uint16_t i=0; i<data_len; i++)
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	3301      	adds	r3, #1
 8002496:	82fb      	strh	r3, [r7, #22]
 8002498:	8afa      	ldrh	r2, [r7, #22]
 800249a:	8bbb      	ldrh	r3, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3db      	bcc.n	8002458 <etx_ota_receive_packet+0x100>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024a0:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	18d1      	adds	r1, r2, r3
 80024aa:	f242 3328 	movw	r3, #9000	; 0x2328
 80024ae:	2204      	movs	r2, #4
 80024b0:	f003 f903 	bl	80056ba <HAL_UART_Receive>
 80024b4:	4603      	mov	r3, r0
 80024b6:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80024b8:	8a7b      	ldrh	r3, [r7, #18]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb47 	bl	8002b50 <HAL_ret_handler>
 80024c2:	4603      	mov	r3, r0
 80024c4:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80024c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <etx_ota_receive_packet+0x17c>
			{
				return ret;
 80024ce:	8a7b      	ldrh	r3, [r7, #18]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e0eb      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 80024d4:	8bfb      	ldrh	r3, [r7, #30]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 80024de:	8bfb      	ldrh	r3, [r7, #30]
 80024e0:	3304      	adds	r3, #4
 80024e2:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <etx_ota_receive_packet+0x2a0>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	8bfb      	ldrh	r3, [r7, #30]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	18d1      	adds	r1, r2, r3
 80024ee:	f242 3328 	movw	r3, #9000	; 0x2328
 80024f2:	2201      	movs	r2, #1
 80024f4:	f003 f8e1 	bl	80056ba <HAL_UART_Receive>
 80024f8:	4603      	mov	r3, r0
 80024fa:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80024fc:	8a7b      	ldrh	r3, [r7, #18]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fb25 	bl	8002b50 <HAL_ret_handler>
 8002506:	4603      	mov	r3, r0
 8002508:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800250a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a9 	beq.w	8002666 <etx_ota_receive_packet+0x30e>
			{
				return ret;
 8002514:	8a7b      	ldrh	r3, [r7, #18]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e0c8      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			break;
		case ETX_OTA_hw_Protocol_BT:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800251a:	8bfb      	ldrh	r3, [r7, #30]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	f242 3228 	movw	r2, #9000	; 0x2328
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f9ec 	bl	8003904 <get_hm10_ota_data>
 800252c:	4603      	mov	r3, r0
 800252e:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <etx_ota_receive_packet+0x1e6>
			{
				return ret;
 8002538:	8a7b      	ldrh	r3, [r7, #18]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e0b6      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			if (buf[len++] != ETX_OTA_SOF)
 800253e:	8bfb      	ldrh	r3, [r7, #30]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	83fa      	strh	r2, [r7, #30]
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2baa      	cmp	r3, #170	; 0xaa
 800254e:	d001      	beq.n	8002554 <etx_ota_receive_packet+0x1fc>
			{
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
				#endif
				return ETX_OTA_EC_ERR;
 8002550:	2304      	movs	r3, #4
 8002552:	e0ab      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002554:	8bfb      	ldrh	r3, [r7, #30]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	f242 3228 	movw	r2, #9000	; 0x2328
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f9cf 	bl	8003904 <get_hm10_ota_data>
 8002566:	4603      	mov	r3, r0
 8002568:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800256a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <etx_ota_receive_packet+0x220>
			{
				return ret;
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e099      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			switch (buf[len++])
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	83fa      	strh	r2, [r7, #30]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d901      	bls.n	800258e <etx_ota_receive_packet+0x236>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 800258a:	2304      	movs	r3, #4
 800258c:	e08e      	b.n	80026ac <etx_ota_receive_packet+0x354>
					break;
 800258e:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8002590:	8bfb      	ldrh	r3, [r7, #30]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	f242 3228 	movw	r2, #9000	; 0x2328
 800259a:	2102      	movs	r1, #2
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f9b1 	bl	8003904 <get_hm10_ota_data>
 80025a2:	4603      	mov	r3, r0
 80025a4:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80025a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <etx_ota_receive_packet+0x25c>
			{
				return ret;
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e07b      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			data_len = *(uint16_t *)&buf[len];
 80025b4:	8bfb      	ldrh	r3, [r7, #30]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	3302      	adds	r3, #2
 80025c2:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	82bb      	strh	r3, [r7, #20]
 80025c8:	e01b      	b.n	8002602 <etx_ota_receive_packet+0x2aa>
			{
				ret = get_hm10_ota_data(&buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 80025ca:	8bfb      	ldrh	r3, [r7, #30]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	83fa      	strh	r2, [r7, #30]
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f991 	bl	8003904 <get_hm10_ota_data>
 80025e2:	4603      	mov	r3, r0
 80025e4:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 80025e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <etx_ota_receive_packet+0x2a4>
				{
					return ret;
 80025ee:	8a7b      	ldrh	r3, [r7, #18]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e05b      	b.n	80026ac <etx_ota_receive_packet+0x354>
 80025f4:	200004cc 	.word	0x200004cc
 80025f8:	200004c8 	.word	0x200004c8
			for (uint16_t i=0; i<data_len; i++)
 80025fc:	8abb      	ldrh	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	82bb      	strh	r3, [r7, #20]
 8002602:	8aba      	ldrh	r2, [r7, #20]
 8002604:	8bbb      	ldrh	r3, [r7, #28]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3df      	bcc.n	80025ca <etx_ota_receive_packet+0x272>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800260a:	8bfb      	ldrh	r3, [r7, #30]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	f242 3228 	movw	r2, #9000	; 0x2328
 8002614:	2104      	movs	r1, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f974 	bl	8003904 <get_hm10_ota_data>
 800261c:	4603      	mov	r3, r0
 800261e:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <etx_ota_receive_packet+0x2d6>
			{
				return ret;
 8002628:	8a7b      	ldrh	r3, [r7, #18]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e03e      	b.n	80026ac <etx_ota_receive_packet+0x354>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 800262e:	8bfb      	ldrh	r3, [r7, #30]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	3304      	adds	r3, #4
 800263c:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	f242 3228 	movw	r2, #9000	; 0x2328
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f001 f95a 	bl	8003904 <get_hm10_ota_data>
 8002650:	4603      	mov	r3, r0
 8002652:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8002654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <etx_ota_receive_packet+0x312>
			{
				return ret;
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e024      	b.n	80026ac <etx_ota_receive_packet+0x354>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 8002662:	2304      	movs	r3, #4
 8002664:	e022      	b.n	80026ac <etx_ota_receive_packet+0x354>
			break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <etx_ota_receive_packet+0x314>
			break;
 800266a:	bf00      	nop
	}

	/* Validate that the latest byte received corresponds to an ETX OTA End of Frame (EOF) byte. */
	if (buf[len++] != ETX_OTA_EOF)
 800266c:	8bfb      	ldrh	r3, [r7, #30]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	83fa      	strh	r2, [r7, #30]
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2bbb      	cmp	r3, #187	; 0xbb
 800267c:	d001      	beq.n	8002682 <etx_ota_receive_packet+0x32a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Expected to receive the EOF field value from the current ETX OTA Packet.\r\n");
		#endif
		return ETX_OTA_EC_ERR;
 800267e:	2304      	movs	r3, #4
 8002680:	e014      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	/* Calculate the 32-bit CRC only with respect to the contents of the "Data" field from the current ETX OTA Packet that has just been received. */
	cal_data_crc = crc32_mpeg2(&buf[ETX_OTA_DATA_FIELD_INDEX], data_len);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	8bba      	ldrh	r2, [r7, #28]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fa78 	bl	8002b80 <crc32_mpeg2>
 8002690:	60f8      	str	r0, [r7, #12]

	/* Validate that the Calculated CRC matches the Recorded CRC. */
	if (cal_data_crc != rec_data_crc)
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <etx_ota_receive_packet+0x346>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: CRC mismatch with current ETX OTA Packet [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
													   (unsigned int) cal_data_crc, (unsigned int) rec_data_crc);
		#endif
		return ETX_OTA_EC_ERR;
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	if (max_len < len)
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d201      	bcs.n	80026aa <etx_ota_receive_packet+0x352>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Received more data than expected (Expected = %d, Received = %d)\r\n", max_len, len);
		#endif
		return ETX_OTA_EC_ERR;
 80026a6:	2304      	movs	r3, #4
 80026a8:	e000      	b.n	80026ac <etx_ota_receive_packet+0x354>
	}

	#if ETX_OTA_VERBOSE
		printf("ETX OTA Packet has been successfully received.\r\n");
	#endif
	return ETX_OTA_EC_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <etx_ota_process_data>:

static ETX_OTA_Status etx_ota_process_data(uint8_t *buf)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	/** <b>Local pointer cmd:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Command_Packet_t type. */
	ETX_OTA_Command_Packet_t *cmd = (ETX_OTA_Command_Packet_t *) buf;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	61fb      	str	r3, [r7, #28]

	/* Check if we received the ETX OTA Abort Command and, if true, stop the ETX OTA process. */
	#if ETX_OTA_VERBOSE
		printf("Processing data of the latest ETX OTA Packet...\r\n");
	#endif
	if (cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <etx_ota_process_data+0x20>
	{
		if (cmd->cmd == ETX_OTA_CMD_ABORT)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d101      	bne.n	80026d4 <etx_ota_process_data+0x20>
		{
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Abort command received. Stopping the process...\r\n");
			#endif
			return ETX_OTA_EC_STOP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d2      	b.n	800287a <etx_ota_process_data+0x1c6>
		}
	}

	switch (etx_ota_state)
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <etx_ota_process_data+0x1d0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	f200 80cd 	bhi.w	8002878 <etx_ota_process_data+0x1c4>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <etx_ota_process_data+0x30>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	080026fd 	.word	0x080026fd
 80026ec:	0800271b 	.word	0x0800271b
 80026f0:	080027c3 	.word	0x080027c3
 80026f4:	0800283b 	.word	0x0800283b
	{
		case ETX_OTA_STATE_IDLE:
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Process is in Idle State.\r\n");
			#endif
			return ETX_OTA_EC_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e0be      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_START:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd == ETX_OTA_CMD_START))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <etx_ota_process_data+0x62>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <etx_ota_process_data+0x62>
			{
				#if ETX_OTA_VERBOSE
					printf("DONE: Received ETX OTA Start Command.\r\n");
				#endif
				etx_ota_state = ETX_OTA_STATE_HEADER;
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <etx_ota_process_data+0x1d0>)
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e0b1      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA Start Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002716:	2304      	movs	r3, #4
 8002718:	e0af      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_HEADER:
			/** <b>Local pointer header:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Header_Packet_t type. */
			ETX_OTA_Header_Packet_t *header = (ETX_OTA_Header_Packet_t *) buf;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

			if (header->packet_type == ETX_OTA_PACKET_TYPE_HEADER)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d14b      	bne.n	80027be <etx_ota_process_data+0x10a>
			{
				/** <b>Local variable header_ret:</b> Return value of a @ref FirmUpdConf_Status function function type. */
				int16_t  header_ret;

				/* We validate that the Firmware Image to be received is either a Bootloader or an Application Firmware Image. */
				switch (header->meta_data.payload_type)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	7cdb      	ldrb	r3, [r3, #19]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d026      	beq.n	800277c <etx_ota_process_data+0xc8>
 800272e:	2b02      	cmp	r3, #2
 8002730:	dc26      	bgt.n	8002780 <etx_ota_process_data+0xcc>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <etx_ota_process_data+0x88>
 8002736:	2b01      	cmp	r3, #1
 8002738:	d010      	beq.n	800275c <etx_ota_process_data+0xa8>
 800273a:	e021      	b.n	8002780 <etx_ota_process_data+0xcc>
				{
					case ETX_OTA_Application_Firmware_Image:
						/* We validate the size of the Application Firmware Image to be received. */
						if (header->meta_data.package_size > ETX_OTA_APP_FW_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3fb0 	cmp.w	r3, #90112	; 0x16000
 8002744:	d901      	bls.n	800274a <etx_ota_process_data+0x96>
						{
							#if ETX_OTA_VERBOSE
								printf("ERROR: The given Application Firmware Image (of size %ld) exceeds the maximum bytes allowed (which is %d).\r\n", header->meta_data.package_size, ETX_OTA_APP_FW_SIZE);
							#endif
							return ETX_OTA_EC_NA;
 8002746:	2303      	movs	r3, #3
 8002748:	e097      	b.n	800287a <etx_ota_process_data+0x1c6>
						}
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_NOT_STORED_IN_APP_FW;
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <etx_ota_process_data+0x1d4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	759a      	strb	r2, [r3, #22]
						p_fw_config->is_bl_fw_install_pending = NOT_PENDING;
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	75da      	strb	r2, [r3, #23]
						break;
 800275a:	e013      	b.n	8002784 <etx_ota_process_data+0xd0>
					case ETX_OTA_Bootloader_Firmware_Image:
						/* We validate the size of the Bootloader Firmware Image to be received. */
						if (header->meta_data.package_size > ETX_OTA_BL_FW_SIZE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002764:	d901      	bls.n	800276a <etx_ota_process_data+0xb6>
						{
							#if ETX_OTA_VERBOSE
								printf("ERROR: The given Bootloader Firmware Image (of size %ld) exceeds the maximum bytes allowed (which is %d).\r\n", header->meta_data.package_size, ETX_OTA_BL_FW_SIZE);
							#endif
							return ETX_OTA_EC_NA;
 8002766:	2303      	movs	r3, #3
 8002768:	e087      	b.n	800287a <etx_ota_process_data+0x1c6>
						}
						p_fw_config->is_bl_fw_stored_in_app_fw = BT_FW_STORED_IN_APP_FW;
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <etx_ota_process_data+0x1d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2201      	movs	r2, #1
 8002770:	759a      	strb	r2, [r3, #22]
						p_fw_config->is_bl_fw_install_pending = IS_PENDING;
 8002772:	4b45      	ldr	r3, [pc, #276]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	75da      	strb	r2, [r3, #23]
						break;
 800277a:	e003      	b.n	8002784 <etx_ota_process_data+0xd0>
					case ETX_OTA_Custom_Data:
						#if ETX_OTA_VERBOSE
							printf("WARNING: Received an ETX OTA Custom Data request.\r\n");
						#endif
						return ETX_OTA_EC_NA;
 800277c:	2303      	movs	r3, #3
 800277e:	e07c      	b.n	800287a <etx_ota_process_data+0x1c6>
					default:
						#if ETX_OTA_VERBOSE
							printf("WARNING: A Firmware Image was expected to be received from the host, but a different request was received instead.\r\n");
						#endif
						return ETX_OTA_EC_NA;
 8002780:	2303      	movs	r3, #3
 8002782:	e07a      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				/* We write the newly received Firmware Image Header data into a new data block of the Flash Memory designated to the @ref firmware_update_config sub-module. */
				p_fw_config->App_fw_size = header->meta_data.package_size;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	6852      	ldr	r2, [r2, #4]
 800278c:	609a      	str	r2, [r3, #8]
				p_fw_config->App_fw_rec_crc = header->meta_data.package_crc;
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	60da      	str	r2, [r3, #12]
				header_ret = firmware_update_configurations_write(p_fw_config);
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <etx_ota_process_data+0x1d4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 faa1 	bl	8002ce4 <firmware_update_configurations_write>
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
				if (header_ret != FIRM_UPDT_CONF_EC_OK)
 80027a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <etx_ota_process_data+0x100>
				{
					#if ETX_OTA_VERBOSE
						printf("EXCEPTION CODE %d: The data was not written into the Firmware Update Configurations sub-module.\r\n", header_ret);
					#endif
					return header_ret;
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e062      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				#if ETX_OTA_VERBOSE
					printf("Received ETX OTA Header with a Firmware Size of %ld bytes.\r\n", p_fw_config->App_fw_size);
				#endif
				etx_ota_state = ETX_OTA_STATE_DATA;
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <etx_ota_process_data+0x1d0>)
 80027b6:	2203      	movs	r2, #3
 80027b8:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e05d      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Header Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 80027be:	2304      	movs	r3, #4
 80027c0:	e05b      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_DATA:
			/** <b>Local pointer data:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Data_Packet_t type. */
			ETX_OTA_Data_Packet_t *data = (ETX_OTA_Data_Packet_t *) buf;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	617b      	str	r3, [r7, #20]
			/** <b>Local variable data_ret:</b> Return value of a @ref ETX_OTA_Status function. */
			uint16_t data_ret;

			if (data->packet_type == ETX_OTA_PACKET_TYPE_DATA)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d133      	bne.n	8002836 <etx_ota_process_data+0x182>
			{
				/* Validate that the Payload received from the current ETX OTA Packet is perfectly divisible by 4 bytes (i.e., one word). */
				if ((data->data_len)%4 != 0)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	885b      	ldrh	r3, [r3, #2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <etx_ota_process_data+0x12e>
				{
					#if ETX_OTA_VERBOSE
						printf("ERROR: The size of the currently received Payload is not perfectly divisible by 4 bytes (i.e., one word).\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 80027de:	2304      	movs	r3, #4
 80027e0:	e04b      	b.n	800287a <etx_ota_process_data+0x1c6>
				}

				/* Write the ETX OTA Data Type Packet to the Flash Memory location of the Application Firmware. */
				data_ret = write_data_to_flash_app(buf+ETX_OTA_DATA_FIELD_INDEX, data->data_len, etx_ota_fw_received_size==0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1d18      	adds	r0, r3, #4
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	885b      	ldrh	r3, [r3, #2]
 80027ea:	b299      	uxth	r1, r3
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <etx_ota_process_data+0x1d8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f89a 	bl	8002934 <write_data_to_flash_app>
 8002800:	4603      	mov	r3, r0
 8002802:	827b      	strh	r3, [r7, #18]
				data_ret = HAL_ret_handler(data_ret);
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f9a1 	bl	8002b50 <HAL_ret_handler>
 800280e:	4603      	mov	r3, r0
 8002810:	827b      	strh	r3, [r7, #18]

				if (data_ret != HAL_OK)
 8002812:	8a7b      	ldrh	r3, [r7, #18]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <etx_ota_process_data+0x16a>
				{
					return data_ret;
 8002818:	8a7b      	ldrh	r3, [r7, #18]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e02d      	b.n	800287a <etx_ota_process_data+0x1c6>
								printf("[%ld/%ld] parts of the Application Firmware Image are now installed into our MCU/MPU...\r\n", (etx_ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE+1), p_fw_config->App_fw_size/ETX_OTA_DATA_MAX_SIZE+1);
							}
						}
					}
				#endif
				if (etx_ota_fw_received_size >= p_fw_config->App_fw_size)
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <etx_ota_process_data+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <etx_ota_process_data+0x1d8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d802      	bhi.n	8002832 <etx_ota_process_data+0x17e>
				{
					/* received the full data. Therefore, move to the End State of the ETX OTA Process. */
					etx_ota_state = ETX_OTA_STATE_END;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <etx_ota_process_data+0x1d0>)
 800282e:	2204      	movs	r2, #4
 8002830:	701a      	strb	r2, [r3, #0]
				}
				return ETX_OTA_EC_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e021      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Data Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002836:	2304      	movs	r3, #4
 8002838:	e01f      	b.n	800287a <etx_ota_process_data+0x1c6>

		case ETX_OTA_STATE_END:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd==ETX_OTA_CMD_END))
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <etx_ota_process_data+0x1c0>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <etx_ota_process_data+0x1c0>
			{
				/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Application Firmware Image that has just been installed into our MCU/MPU. */
				uint32_t cal_crc = crc32_mpeg2((uint8_t *) ETX_APP_FLASH_ADDR, p_fw_config->App_fw_size);
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <etx_ota_process_data+0x1d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4619      	mov	r1, r3
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <etx_ota_process_data+0x1dc>)
 8002854:	f000 f994 	bl	8002b80 <crc32_mpeg2>
 8002858:	61b8      	str	r0, [r7, #24]
					else
					{
						printf("Validating the received Application Firmware Image...\r\n");
					}
				#endif
				if (cal_crc != p_fw_config->App_fw_rec_crc)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <etx_ota_process_data+0x1d4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <etx_ota_process_data+0x1b6>
						{
							printf("The 32-bit CRC of the installed Application Firmware Image mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
															(unsigned int) cal_crc, (unsigned int) p_fw_config->App_fw_rec_crc);
						}
					#endif
					return ETX_OTA_EC_ERR;
 8002866:	2304      	movs	r3, #4
 8002868:	e007      	b.n	800287a <etx_ota_process_data+0x1c6>
					else
					{
						printf("DONE: 32-bit CRC of the installed Application Firmware Image has been successfully validated.\r\n");
					}
				#endif
				etx_ota_state = ETX_OTA_STATE_IDLE;
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <etx_ota_process_data+0x1d0>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e002      	b.n	800287a <etx_ota_process_data+0x1c6>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA End Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8002874:	2304      	movs	r3, #4
 8002876:	e000      	b.n	800287a <etx_ota_process_data+0x1c6>
		default:
			/* Should not come here */
			#if ETX_OTA_VERBOSE
				printf("ERROR: The current ETX OTA State %d is unrecognized by our MCU/MPU.\r\n", etx_ota_state);
			#endif
			return ETX_OTA_EC_ERR;
 8002878:	2304      	movs	r3, #4
			break;
	}
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200004bd 	.word	0x200004bd
 8002888:	200004c4 	.word	0x200004c4
 800288c:	200004c0 	.word	0x200004c0
 8002890:	08008000 	.word	0x08008000

08002894 <etx_ota_send_resp>:

//#pragma GCC diagnostic ignored "-Wstringop-overflow=" // This pragma definition will tell the compiler to ignore an expected Compilation Warning (due to a code functionality that it is strictly needed to work that way) that gives using the HAL_CRC_Calculate() function inside the etx_ota_send_resp() function,. which states the following: 'HAL_CRC_Calculate' accessing 4 bytes in a region of size 1.
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	ETX_OTA_Status  ret;

	ETX_OTA_Response_Packet_t response =
 800289e:	23aa      	movs	r3, #170	; 0xaa
 80028a0:	733b      	strb	r3, [r7, #12]
 80028a2:	2303      	movs	r3, #3
 80028a4:	737b      	strb	r3, [r7, #13]
 80028a6:	2301      	movs	r3, #1
 80028a8:	81fb      	strh	r3, [r7, #14]
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	743b      	strb	r3, [r7, #16]
 80028ae:	2300      	movs	r3, #0
 80028b0:	747b      	strb	r3, [r7, #17]
 80028b2:	2300      	movs	r3, #0
 80028b4:	74bb      	strb	r3, [r7, #18]
 80028b6:	2300      	movs	r3, #0
 80028b8:	74fb      	strb	r3, [r7, #19]
 80028ba:	2300      	movs	r3, #0
 80028bc:	753b      	strb	r3, [r7, #20]
 80028be:	23bb      	movs	r3, #187	; 0xbb
 80028c0:	757b      	strb	r3, [r7, #21]
		.data_len    	= 1U,
		.status      	= response_status,
		.crc			= 0U,
		.eof         	= ETX_OTA_EOF
	};
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	3304      	adds	r3, #4
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f958 	bl	8002b80 <crc32_mpeg2>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 3011 	str.w	r3, [r7, #17]

	switch (ETX_OTA_hardware_protocol)
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <etx_ota_send_resp+0x98>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <etx_ota_send_resp+0x50>
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d012      	beq.n	8002908 <etx_ota_send_resp+0x74>
 80028e2:	e01c      	b.n	800291e <etx_ota_send_resp+0x8a>
	{
		case ETX_OTA_hw_Protocol_UART:
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <etx_ota_send_resp+0x9c>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f107 010c 	add.w	r1, r7, #12
 80028ec:	f242 3328 	movw	r3, #9000	; 0x2328
 80028f0:	220a      	movs	r2, #10
 80028f2:	f002 fe5f 	bl	80055b4 <HAL_UART_Transmit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
			ret = HAL_ret_handler(ret);
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f927 	bl	8002b50 <HAL_ret_handler>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]
			break;
 8002906:	e00c      	b.n	8002922 <etx_ota_send_resp+0x8e>
		case ETX_OTA_hw_Protocol_BT:
			ret = send_hm10_ota_data((uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	f242 3228 	movw	r2, #9000	; 0x2328
 8002910:	210a      	movs	r1, #10
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ffd6 	bl	80038c4 <send_hm10_ota_data>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
			break;
 800291c:	e001      	b.n	8002922 <etx_ota_send_resp+0x8e>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 800291e:	2304      	movs	r3, #4
 8002920:	e000      	b.n	8002924 <etx_ota_send_resp+0x90>
	}

	return ret;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200004cc 	.word	0x200004cc
 8002930:	200004c8 	.word	0x200004c8

08002934 <write_data_to_flash_app>:

static ETX_OTA_Status write_data_to_flash_app(uint8_t *data, uint16_t data_len, bool is_first_block)
{
 8002934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002938:	b08c      	sub	sp, #48	; 0x30
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	uint8_t  ret;
	/**	<b>Local variable p_data:</b> Pointer to the data at which the \p data param points to but in \c uint32_t Type. */
	uint32_t *p_data = (uint32_t *) data;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

	/* Unlock the Flash Memory of our MCU/MPU. */
	ret = HAL_FLASH_Unlock();
 800294a:	f001 fe8f 	bl	800466c <HAL_FLASH_Unlock>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f8f9 	bl	8002b50 <HAL_ret_handler>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(ret != HAL_OK)
 8002964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <write_data_to_flash_app+0x3e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; ETX OTA Exception code %d.\r\n", ret);
		#endif
		return ret;
 800296c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002970:	e0e4      	b.n	8002b3c <write_data_to_flash_app+0x208>
	}

	/* Erase Flash Memory dedicated to our MCU/MPU's Application Firmware but only if the current ETX OTA Data Type Packet being processed is the first one. */
	if (is_first_block)
 8002972:	787b      	ldrb	r3, [r7, #1]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <write_data_to_flash_app+0x88>
			printf("Erasing the Flash Memory pages designated to the Application Firmware of our MCU/MPU...\r\n");
		#endif
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t page_error;

		EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.Banks        = FLASH_BANK_1;
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress  = ETX_APP_FLASH_ADDR;
 8002980:	4b71      	ldr	r3, [pc, #452]	; (8002b48 <write_data_to_flash_app+0x214>)
 8002982:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbPages      = ETX_APP_FLASH_PAGES_SIZE;
 8002984:	2358      	movs	r3, #88	; 0x58
 8002986:	61bb      	str	r3, [r7, #24]

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002988:	f107 0208 	add.w	r2, r7, #8
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 ff52 	bl	800483c <HAL_FLASHEx_Erase>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ret = HAL_ret_handler(ret);
 800299e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f8d4 	bl	8002b50 <HAL_ret_handler>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != HAL_OK)
 80029ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <write_data_to_flash_app+0x88>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: Flash Memory pages of the Application Firmware of our MCU/MPU could not be erased; ETX OTA Exception code %d.\r\n", ret);
			#endif
			return ret;
 80029b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ba:	e0bf      	b.n	8002b3c <write_data_to_flash_app+0x208>
			printf("DONE: Flash Memory pages designated to the Application Firmware of our MCU/MPU have been successfully erased.\r\n");
		#endif
	}

	/**	<b>Local variable word_data:</b> Array of 4 bytes (i.e., 1 word) initialized with the zeros (i.e., 0x00 in each byte) to then overwrite them if needed with the remaining bytes of the last word from the Application Firmware Image. */
	uint8_t word_data[4] = {0x00, 0x00, 0x00, 0x00};
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
	/** <b>Local variable data_len_minus_one_word:</b> Holds the length in bytes of the "Data" field from the current ETX OTA Data Type Packet, except for the last four bytes. */
	uint16_t data_len_minus_one_word = data_len - 4;
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	3b04      	subs	r3, #4
 80029c4:	843b      	strh	r3, [r7, #32]
	/** <b>Local variable remaining_data_len_of_last_word:</b> Should contain the remaining bytes of the last word from the Application Firmware Image that are pending to be written into our MCU/MPU's Flash Memory. */
	uint8_t remaining_data_len_of_last_word;
	/**	<b>Local variable bytes_flashed:</b> Indicator of how many bytes of the current ETX OTA Packet's Payload have been written into the designated Flash Memory of the Application Firmware. */
	uint16_t bytes_flashed = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if (data_len > 4)
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d959      	bls.n	8002a84 <write_data_to_flash_app+0x150>
	{
		/* Write the entire Application Firmware Image into our MCU/MPU's Flash Memory, except for the last word (i.e., the last four bytes). */
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 80029d0:	e02f      	b.n	8002a32 <write_data_to_flash_app+0xfe>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <write_data_to_flash_app+0x218>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80029da:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
									(ETX_APP_FLASH_ADDR + etx_ota_fw_received_size),
									p_data[bytes_flashed/4]);
 80029de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80029ec:	2200      	movs	r2, #0
 80029ee:	4698      	mov	r8, r3
 80029f0:	4691      	mov	r9, r2
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	2002      	movs	r0, #2
 80029f8:	f001 fdc8 	bl	800458c <HAL_FLASH_Program>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			ret = HAL_ret_handler(ret);
 8002a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8a2 	bl	8002b50 <HAL_ret_handler>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if (ret == HAL_OK)
 8002a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <write_data_to_flash_app+0xf2>
			{
				etx_ota_fw_received_size += 4;
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e002      	b.n	8002a2c <write_data_to_flash_app+0xf8>
			else
			{
				#if ETX_OTA_VERBOSE
					printf("EXCEPTION CODE %d: The Firmware Image data was not successfully written into our MCU/MPU.\r\n", ret);
				#endif
				return ret;
 8002a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2a:	e087      	b.n	8002b3c <write_data_to_flash_app+0x208>
		for ( ; bytes_flashed<data_len_minus_one_word; bytes_flashed+=4)
 8002a2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a2e:	3304      	adds	r3, #4
 8002a30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002a34:	8c3b      	ldrh	r3, [r7, #32]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3cb      	bcc.n	80029d2 <write_data_to_flash_app+0x9e>
			}
		}

		/* Populate the remaining bytes of the Application Firmware Image that is currently being written into our MCU/MPU's Flash Memory via the \c word_data variable. */
		// NOTE: This way, if there are unused bytes in the \c word _data variable after filling it with the remaining bytes of the Application Firmware Image, these will be left with the values that the Flash Memory recognizes as Reset Values.
		remaining_data_len_of_last_word = data_len - bytes_flashed;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a4e:	e012      	b.n	8002a76 <write_data_to_flash_app+0x142>
		{
			word_data[i] = data[bytes_flashed + i];
 8002a50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a56:	4413      	add	r3, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	3330      	adds	r3, #48	; 0x30
 8002a66:	443b      	add	r3, r7
 8002a68:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a70:	3301      	adds	r3, #1
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a76:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3e6      	bcc.n	8002a50 <write_data_to_flash_app+0x11c>
 8002a82:	e01c      	b.n	8002abe <write_data_to_flash_app+0x18a>
	}
	else
	{
		/* Populate the remaining bytes of the Application Firmware Image that is currently being written into our MCU/MPU's Flash Memory via the \c word_data variable. */
		// NOTE: This way, if there are unused bytes in the \c word _data variable after filling it with the remaining bytes of the Application Firmware Image, these will be left with the values that the Flash Memory recognizes as Reset Values.
		remaining_data_len_of_last_word = data_len;
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a90:	e00f      	b.n	8002ab2 <write_data_to_flash_app+0x17e>
		{
			word_data[i] = data[i];
 8002a92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	3330      	adds	r3, #48	; 0x30
 8002aa2:	443b      	add	r3, r7
 8002aa4:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i=0; i<remaining_data_len_of_last_word; i++)
 8002aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002aac:	3301      	adds	r3, #1
 8002aae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ab2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3e9      	bcc.n	8002a92 <write_data_to_flash_app+0x15e>
		}
	}

	/* Write the remaining bytes of the Application Firmware Image into the Flash Memory designated pages to our MCU/MPU's Application Firmware. */
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002ac6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
							(ETX_APP_FLASH_ADDR + etx_ota_fw_received_size),
							*((uint32_t *) word_data));
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	681b      	ldr	r3, [r3, #0]
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	461c      	mov	r4, r3
 8002ad4:	4615      	mov	r5, r2
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	2002      	movs	r0, #2
 8002adc:	f001 fd56 	bl	800458c <HAL_FLASH_Program>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f830 	bl	8002b50 <HAL_ret_handler>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret == HAL_OK)
 8002af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <write_data_to_flash_app+0x204>
	{
		bytes_flashed += remaining_data_len_of_last_word;
 8002afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b06:	4413      	add	r3, r2
 8002b08:	85bb      	strh	r3, [r7, #44]	; 0x2c
		etx_ota_fw_received_size += remaining_data_len_of_last_word;
 8002b0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <write_data_to_flash_app+0x218>)
 8002b16:	6013      	str	r3, [r2, #0]
		#endif
		return ret;
	}

	/* Lock the Flash Memory, just like it originally was before calling this @ref write_data_to_flash_app function. */
	ret = HAL_FLASH_Lock();
 8002b18:	f001 fdce 	bl	80046b8 <HAL_FLASH_Lock>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ret = HAL_ret_handler(ret);
 8002b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f812 	bl	8002b50 <HAL_ret_handler>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be locked; ETX OTA Exception code %d.\r\n", ret);
		#endif
	}

	return ret;
 8002b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b36:	e001      	b.n	8002b3c <write_data_to_flash_app+0x208>
		return ret;
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3730      	adds	r7, #48	; 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b46:	bf00      	nop
 8002b48:	08008000 	.word	0x08008000
 8002b4c:	200004c0 	.word	0x200004c0

08002b50 <HAL_ret_handler>:

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d006      	beq.n	8002b6e <HAL_ret_handler+0x1e>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dd06      	ble.n	8002b72 <HAL_ret_handler+0x22>
 8002b64:	3b02      	subs	r3, #2
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d803      	bhi.n	8002b72 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return ETX_OTA_EC_NR;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return ETX_OTA_EC_ERR;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e000      	b.n	8002b74 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <crc32_mpeg2>:
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d101      	bne.n	8002b9c <crc32_mpeg2+0x1c>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	e01c      	b.n	8002bd6 <crc32_mpeg2+0x56>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e014      	b.n	8002bcc <crc32_mpeg2+0x4c>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	0e1b      	lsrs	r3, r3, #24
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4908      	ldr	r1, [pc, #32]	; (8002be0 <crc32_mpeg2+0x60>)
 8002bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bc2:	4053      	eors	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3e6      	bcc.n	8002ba2 <crc32_mpeg2+0x22>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	08006974 	.word	0x08006974

08002be4 <firmware_update_configurations_init>:
 * @date September 26, 2023.
 */
static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

FirmUpdConf_Status firmware_update_configurations_init()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Data Block to which the @ref p_most_recent_val pointer points to. */
	uint32_t cal_crc;
	/** <b>Local variable p_next_val:</b> Firmware Update Configurations Block pointer that should point to the Firmware Update Configurations Block located right after the one with the most recently written value (i.e., right after the Data Block to which the @ref p_most_recent_val pointer points to). */
	firmware_update_config_t *p_next_val;

	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <firmware_update_configurations_init+0xa8>)
 8002bee:	601a      	str	r2, [r3, #0]

	/* Cycle through flash until an erased value is found. */
	#if ETX_OTA_VERBOSE
		printf("Initializing Firmware Update Configurations sub-module...\r\n");
	#endif
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <firmware_update_configurations_init+0xac>)
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e02b      	b.n	8002c4e <firmware_update_configurations_init+0x6a>
	{
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	7fdb      	ldrb	r3, [r3, #31]
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d121      	bne.n	8002c42 <firmware_update_configurations_init+0x5e>
		{
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	7fdb      	ldrb	r3, [r3, #31]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11c      	bne.n	8002c42 <firmware_update_configurations_init+0x5e>
			{
				/* Calculate and verify the 32-bit CRC of @ref p_most_recent_val . If validation is successful, then proceed normally. Otherwise, ignore the current Data Block that @ref p_most_recent_val is pointing towards to and keep searching. */
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	221c      	movs	r2, #28
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffb4 	bl	8002b80 <crc32_mpeg2>
 8002c18:	60b8      	str	r0, [r7, #8]
				if(cal_crc != p_most_recent_val->crc32)
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d018      	beq.n	8002c58 <firmware_update_configurations_init+0x74>
				{
					/* Since the Flash Memory has been identified to be corrupted, erase the contents of the two Flash Memory pages of the Firmware Update Configurations sub-module. */
					#if ETX_OTA_VERBOSE
						printf("WARNING: One of the Flash Memory pages designated to the Firmware Update Configurations sub-module has been identified to be corrupted.\r\n");
					#endif
					ret = restore_firm_updt_config_flash_memory();
 8002c26:	f000 f90f 	bl	8002e48 <restore_firm_updt_config_flash_memory>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
					if (ret != FIRM_UPDT_CONF_EC_OK)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <firmware_update_configurations_init+0x54>
					{
						#if ETX_OTA_VERBOSE
							printf("ERROR: The Firmware Update Configurations sub-module could not be initialized.\r\n");
						#endif
						return FIRM_UPDT_CONF_EC_CRPT;
 8002c34:	2305      	movs	r3, #5
 8002c36:	e022      	b.n	8002c7e <firmware_update_configurations_init+0x9a>
					}

					/* We define that there is no data in the Flash Memory pages of the Firmware Update Configurations sub-module. */
					p_most_recent_val = NULL;
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

					#if ETX_OTA_VERBOSE
						printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
					#endif
					return FIRM_UPDT_CONF_EC_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e01d      	b.n	8002c7e <firmware_update_configurations_init+0x9a>
				}
				break;
			}
		}
		p_most_recent_val = p_next_val;
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6013      	str	r3, [r2, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3320      	adds	r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <firmware_update_configurations_init+0xb0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d3cf      	bcc.n	8002bf6 <firmware_update_configurations_init+0x12>
 8002c56:	e000      	b.n	8002c5a <firmware_update_configurations_init+0x76>
				break;
 8002c58:	bf00      	nop
	}

	/* If the end of the for-loop is reached and if last location is erased, then there is currently no data in the Firmware Update Configuration's designated Flash Memory pages. */
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <firmware_update_configurations_init+0xb0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d107      	bne.n	8002c72 <firmware_update_configurations_init+0x8e>
	{
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	7fdb      	ldrb	r3, [r3, #31]
 8002c68:	2bff      	cmp	r3, #255	; 0xff
 8002c6a:	d102      	bne.n	8002c72 <firmware_update_configurations_init+0x8e>
		{
			p_most_recent_val = NULL;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <firmware_update_configurations_init+0xa4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
		}
	}

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8002c72:	f000 f909 	bl	8002e88 <prep_page_swap>
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
        {
            printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
        }
    #endif

	return ret;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	b2db      	uxtb	r3, r3
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200004d4 	.word	0x200004d4
 8002c8c:	0801efe0 	.word	0x0801efe0
 8002c90:	0801e000 	.word	0x0801e000
 8002c94:	0801f000 	.word	0x0801f000

08002c98 <firmware_update_configurations_read>:

FirmUpdConf_Status firmware_update_configurations_read(firmware_update_config_data_t *p_data)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    firmware_update_config_t *p_current_val = p_most_recent_val;
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <firmware_update_configurations_read+0x44>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (p_current_val == NULL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <firmware_update_configurations_read+0x2a>
    {
        p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <firmware_update_configurations_read+0x48>)
 8002cae:	60fb      	str	r3, [r7, #12]
        memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2218      	movs	r2, #24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f003 f8fd 	bl	8005eb8 <memcpy>
        return FIRM_UPDT_CONF_EC_NO_DATA;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e007      	b.n	8002cd2 <firmware_update_configurations_read+0x3a>
    }

    memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f003 f8f4 	bl	8005eb8 <memcpy>
    return FIRM_UPDT_CONF_EC_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200004d4 	.word	0x200004d4
 8002ce0:	0801e000 	.word	0x0801e000

08002ce4 <firmware_update_configurations_write>:

FirmUpdConf_Status firmware_update_configurations_write(firmware_update_config_data_t *p_data)
{
 8002ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ce8:	b090      	sub	sp, #64	; 0x40
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function. */
	uint8_t ret;
	/**	<b>Local variable new_val_struct:</b> New Data Block into which we will pass the data that wants to be written and where we will also set the corresponding flag and CRC32 values for it. */
	firmware_update_config_t new_val_struct;
	/**	<b>Local pointer p_new_val_struct:</b> Pointer to the \c new_val_struct data but in \c uint32_t Type. */
	uint32_t *p_new_val_struct = (uint32_t *) &new_val_struct;
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
	/**	<b>Local pointer p_next_val:</b> @ref firmware_update_config_t Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002cf4:	4b51      	ldr	r3, [pc, #324]	; (8002e3c <firmware_update_configurations_write+0x158>)
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* We pass the received data into a new Data Block structure and we calculate and also set its corresponding 32-bit CRC. */
    memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f107 0410 	add.w	r4, r7, #16
 8002cfe:	461d      	mov	r5, r3
 8002d00:	6828      	ldr	r0, [r5, #0]
 8002d02:	6869      	ldr	r1, [r5, #4]
 8002d04:	68aa      	ldr	r2, [r5, #8]
 8002d06:	68eb      	ldr	r3, [r5, #12]
 8002d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0a:	6928      	ldr	r0, [r5, #16]
 8002d0c:	6969      	ldr	r1, [r5, #20]
 8002d0e:	c403      	stmia	r4!, {r0, r1}
    new_val_struct.data.reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	623b      	str	r3, [r7, #32]
    new_val_struct.data.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d20:	853b      	strh	r3, [r7, #40]	; 0x28
    new_val_struct.flags.reserved1 = DATA_BLOCK_8BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 8002d22:	23ff      	movs	r3, #255	; 0xff
 8002d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    new_val_struct.flags.is_erased = FLASH_BLOCK_NOT_ERASED;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8002d2e:	231c      	movs	r3, #28
 8002d30:	461a      	mov	r2, r3
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	3304      	adds	r3, #4
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff20 	bl	8002b80 <crc32_mpeg2>
 8002d40:	4603      	mov	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

	/* We calculate the next available address. */
	if (p_most_recent_val != NULL)
 8002d44:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <firmware_update_configurations_write+0x15c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <firmware_update_configurations_write+0x7c>
	{
		p_next_val = p_most_recent_val + 1;
 8002d4c:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <firmware_update_configurations_write+0x15c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3320      	adds	r3, #32
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <firmware_update_configurations_write+0x160>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <firmware_update_configurations_write+0x7c>
		{
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8002d5c:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <firmware_update_configurations_write+0x158>)
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
	}
	/**	<b>Local pointer p_next_val_in_words:</b> 32-bits Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	uint32_t *p_next_val_in_words = (uint32_t *) p_next_val;
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30

	/* We unlock our MCU/MPU's Flash Memory to be able to write in it. */
	ret = HAL_FLASH_Unlock();
 8002d64:	f001 fc82 	bl	800466c <HAL_FLASH_Unlock>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ret = HAL_ret_handler(ret);
 8002d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f8fe 	bl	8002f74 <HAL_ret_handler>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (ret != HAL_OK)
 8002d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <firmware_update_configurations_write+0xa8>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d8a:	e051      	b.n	8002e30 <firmware_update_configurations_write+0x14c>
	}

	/* Write the new Firmware Update Configuration's Data Block into the corresponding Flash Memory address. */
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002d92:	e02a      	b.n	8002dea <firmware_update_configurations_write+0x106>
	{
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
								(uint32_t) (p_next_val_in_words + words_written),
 8002d94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9c:	4413      	add	r3, r2
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002d9e:	4619      	mov	r1, r3
							    p_new_val_struct[words_written]);
 8002da0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da8:	4413      	add	r3, r2
 8002daa:	681b      	ldr	r3, [r3, #0]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8002dac:	2200      	movs	r2, #0
 8002dae:	4698      	mov	r8, r3
 8002db0:	4691      	mov	r9, r2
 8002db2:	4642      	mov	r2, r8
 8002db4:	464b      	mov	r3, r9
 8002db6:	2002      	movs	r0, #2
 8002db8:	f001 fbe8 	bl	800458c <HAL_FLASH_Program>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ret = HAL_ret_handler(ret);
 8002dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f8d4 	bl	8002f74 <HAL_ret_handler>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (ret != HAL_OK)
 8002dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <firmware_update_configurations_write+0xfc>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: Flash Write Error.\r\n");
			#endif
			return ret;
 8002dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dde:	e027      	b.n	8002e30 <firmware_update_configurations_write+0x14c>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 8002de0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002de4:	3301      	adds	r3, #1
 8002de6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002dea:	2208      	movs	r2, #8
 8002dec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d3cf      	bcc.n	8002d94 <firmware_update_configurations_write+0xb0>
		}
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8002df4:	f001 fc60 	bl	80046b8 <HAL_FLASH_Lock>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ret = HAL_ret_handler(ret);
 8002dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f8b6 	bl	8002f74 <HAL_ret_handler>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (ret != HAL_OK)
 8002e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <firmware_update_configurations_write+0x138>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e1a:	e009      	b.n	8002e30 <firmware_update_configurations_write+0x14c>
	}

	/* Update the @ref p_most_recent_val pointer to the most recent Data Block of the Firmware Update Configurations sub-module. */
	p_most_recent_val = p_next_val;
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <firmware_update_configurations_write+0x15c>)
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	6013      	str	r3, [r2, #0]

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8002e22:	f000 f831 	bl	8002e88 <prep_page_swap>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested data was successfully written into the Firmware Update Configurations sub-module.\r\n");
	#endif
	return ret;
 8002e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3740      	adds	r7, #64	; 0x40
 8002e34:	46bd      	mov	sp, r7
 8002e36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0801e000 	.word	0x0801e000
 8002e40:	200004d4 	.word	0x200004d4
 8002e44:	0801f000 	.word	0x0801f000

08002e48 <restore_firm_updt_config_flash_memory>:

static FirmUpdConf_Status restore_firm_updt_config_flash_memory()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
    FirmUpdConf_Status ret;

	#if ETX_OTA_VERBOSE
		printf("Erasing all Flash Memory pages from the Firmware Update Configurations sub-module to restore their functionalities...\r\n");
	#endif
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <restore_firm_updt_config_flash_memory+0x38>)
 8002e50:	f000 f84c 	bl	8002eec <page_erase>
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <restore_firm_updt_config_flash_memory+0x1a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 1 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	e00a      	b.n	8002e78 <restore_firm_updt_config_flash_memory+0x30>
	}
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <restore_firm_updt_config_flash_memory+0x3c>)
 8002e64:	f000 f842 	bl	8002eec <page_erase>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	71fb      	strb	r3, [r7, #7]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <restore_firm_updt_config_flash_memory+0x2e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 2 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	e000      	b.n	8002e78 <restore_firm_updt_config_flash_memory+0x30>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The Flash Memory pages from the Firmware Update Configurations sub-module have been restored to its original factory form.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	0801e000 	.word	0x0801e000
 8002e84:	0801e800 	.word	0x0801e800

08002e88 <prep_page_swap>:

static FirmUpdConf_Status prep_page_swap()
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
	#if ETX_OTA_VERBOSE
		printf("Preparing the Firmware Update Configurations sub-module for a possible future page swap...\r\n");
	#endif

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
    if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <prep_page_swap+0x54>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <prep_page_swap+0x58>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d109      	bne.n	8002eac <prep_page_swap+0x24>
        (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <prep_page_swap+0x5c>)
 8002e9a:	7fdb      	ldrb	r3, [r3, #31]
    if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <prep_page_swap+0x24>
    {
        #if ETX_OTA_VERBOSE
            printf("Requesting to erase Firmware Update Configuration's page 2...\r\n");
        #endif
        ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8002ea0:	4811      	ldr	r0, [pc, #68]	; (8002ee8 <prep_page_swap+0x60>)
 8002ea2:	f000 f823 	bl	8002eec <page_erase>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	e012      	b.n	8002ed2 <prep_page_swap+0x4a>
            {
                printf("DONE: The Firmware Update Configuration's page 2 was successfully erased.\r\n");
            }
        #endif
    }
    else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <prep_page_swap+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <prep_page_swap+0x60>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10b      	bne.n	8002ece <prep_page_swap+0x46>
             (p_most_recent_val-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <prep_page_swap+0x54>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3b20      	subs	r3, #32
 8002ebc:	7fdb      	ldrb	r3, [r3, #31]
    else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <prep_page_swap+0x46>
    {
        #if ETX_OTA_VERBOSE
            printf("Requesting to erase Firmware Update Configuration's page 1...\r\n");
        #endif
        ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <prep_page_swap+0x58>)
 8002ec4:	f000 f812 	bl	8002eec <page_erase>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
 8002ecc:	e001      	b.n	8002ed2 <prep_page_swap+0x4a>
            }
        #endif
    }
	else
	{
		ret = FIRM_UPDT_CONF_EC_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	71fb      	strb	r3, [r7, #7]
		#if ETX_OTA_VERBOSE
			printf("DONE: No page swap preparations required at the moment.\r\n");
		#endif
	}

	return ret;
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200004d4 	.word	0x200004d4
 8002ee0:	0801e000 	.word	0x0801e000
 8002ee4:	0801efe0 	.word	0x0801efe0
 8002ee8:	0801e800 	.word	0x0801e800

08002eec <page_erase>:

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	#endif
    /** <b>Local variable ret:</b> @ref uin8_t Type variable used to hold the return value of either a @ref FirmUpdConf_Status or a @ref HAL_StatusTypeDef function. */
    uint8_t ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 8002ef4:	f001 fbba 	bl	800466c <HAL_FLASH_Unlock>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002efc:	7ffb      	ldrb	r3, [r7, #31]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f838 	bl	8002f74 <HAL_ret_handler>
 8002f04:	4603      	mov	r3, r0
 8002f06:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <page_erase+0x26>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	e02c      	b.n	8002f6c <page_erase+0x80>
	}

	/* Erase desired Flash Memory page. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = 1U;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002f22:	f107 0208 	add.w	r2, r7, #8
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fc85 	bl	800483c <HAL_FLASHEx_Erase>
 8002f32:	4603      	mov	r3, r0
 8002f34:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f81b 	bl	8002f74 <HAL_ret_handler>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <page_erase+0x60>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested Flash Memory page at address 0x%08X could not be erased; Firmware Update Configurations Exception code %d.\r\n", (unsigned int) page_start_addr, ret);
		#endif
		return ret;
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	e00f      	b.n	8002f6c <page_erase+0x80>
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8002f4c:	f001 fbb4 	bl	80046b8 <HAL_FLASH_Lock>
 8002f50:	4603      	mov	r3, r0
 8002f52:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f80c 	bl	8002f74 <HAL_ret_handler>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <page_erase+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	e000      	b.n	8002f6c <page_erase+0x80>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested Flash Memory page was successfully erased.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_ret_handler>:

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d006      	beq.n	8002f92 <HAL_ret_handler+0x1e>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dd06      	ble.n	8002f96 <HAL_ret_handler+0x22>
 8002f88:	3b02      	subs	r3, #2
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d803      	bhi.n	8002f96 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8002f92:	2304      	movs	r3, #4
 8002f94:	e000      	b.n	8002f98 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <init_hm10_module>:
 * @date October 17, 2023.
 */
static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

void init_hm10_module(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	p_huart = huart;
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <init_hm10_module+0x18>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200004d8 	.word	0x200004d8

08002fc0 <send_hm10_reset_cmd>:

	return HM10_EC_OK;
}

HM10_Status send_hm10_reset_cmd()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8002fc6:	f000 fcbd 	bl	8003944 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Reset Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Reset Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fcc:	2241      	movs	r2, #65	; 0x41
 8002fce:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fd2:	2254      	movs	r2, #84	; 0x54
 8002fd4:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fd8:	222b      	movs	r2, #43	; 0x2b
 8002fda:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fde:	2252      	movs	r2, #82	; 0x52
 8002fe0:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'E';
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fe4:	2245      	movs	r2, #69	; 0x45
 8002fe6:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'S';
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002fea:	2253      	movs	r2, #83	; 0x53
 8002fec:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002ff0:	2245      	movs	r2, #69	; 0x45
 8002ff2:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = 'T';
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8002ff6:	2254      	movs	r2, #84	; 0x54
 8002ff8:	71da      	strb	r2, [r3, #7]

	/* Send the HM-10 Device's Reset Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <send_hm10_reset_cmd+0xdc>)
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003002:	2208      	movs	r2, #8
 8003004:	4924      	ldr	r1, [pc, #144]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8003006:	f002 fad5 	bl	80055b4 <HAL_UART_Transmit>
 800300a:	4603      	mov	r3, r0
 800300c:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fcb0 	bl	8003978 <HAL_ret_handler>
 8003018:	4603      	mov	r3, r0
 800301a:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 800301c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <send_hm10_reset_cmd+0x6a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Reset Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e031      	b.n	800308e <send_hm10_reset_cmd+0xce>
	}

	/* Receive the HM-10 Device's Reset Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <send_hm10_reset_cmd+0xdc>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003032:	2208      	movs	r2, #8
 8003034:	4918      	ldr	r1, [pc, #96]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8003036:	f002 fb40 	bl	80056ba <HAL_UART_Receive>
 800303a:	4603      	mov	r3, r0
 800303c:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fc98 	bl	8003978 <HAL_ret_handler>
 8003048:	4603      	mov	r3, r0
 800304a:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 800304c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <send_hm10_reset_cmd+0x9a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e019      	b.n	800308e <send_hm10_reset_cmd+0xce>
	}

	/* Validate the HM-10 Device's Reset Response. */
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	e00e      	b.n	800307e <send_hm10_reset_cmd+0xbe>
	{
		if (TxRx_Buffer[i] != HM10_Reset_resp[i])
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <send_hm10_reset_cmd+0xd8>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	490d      	ldr	r1, [pc, #52]	; (80030a0 <send_hm10_reset_cmd+0xe0>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	440b      	add	r3, r1
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <send_hm10_reset_cmd+0xb8>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8003074:	2304      	movs	r3, #4
 8003076:	e00a      	b.n	800308e <send_hm10_reset_cmd+0xce>
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3301      	adds	r3, #1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b07      	cmp	r3, #7
 8003082:	dded      	ble.n	8003060 <send_hm10_reset_cmd+0xa0>
	#if ETX_OTA_VERBOSE
		printf("DONE: A Reset Command has been successfully sent to the HM-10 BT Device.\r\n");
	#endif

	/* Generating Delay to allow the HM-10 BT Device to finish resetting correctly before any other action is request to it. */
	HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8003084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003088:	f001 f95e 	bl	8004348 <HAL_Delay>

	return HM10_EC_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200004dc 	.word	0x200004dc
 800309c:	200004d8 	.word	0x200004d8
 80030a0:	20000018 	.word	0x20000018

080030a4 <send_hm10_renew_cmd>:

HM10_Status send_hm10_renew_cmd()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80030aa:	f000 fc4b 	bl	8003944 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Renew Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Renew Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030b0:	2241      	movs	r2, #65	; 0x41
 80030b2:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030b6:	2254      	movs	r2, #84	; 0x54
 80030b8:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030bc:	222b      	movs	r2, #43	; 0x2b
 80030be:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'R';
 80030c0:	4b2e      	ldr	r3, [pc, #184]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030c2:	2252      	movs	r2, #82	; 0x52
 80030c4:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'E';
 80030c6:	4b2d      	ldr	r3, [pc, #180]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030c8:	2245      	movs	r2, #69	; 0x45
 80030ca:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'N';
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030ce:	224e      	movs	r2, #78	; 0x4e
 80030d0:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030d4:	2245      	movs	r2, #69	; 0x45
 80030d6:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = 'W';
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030da:	2257      	movs	r2, #87	; 0x57
 80030dc:	71da      	strb	r2, [r3, #7]

    /* Send the HM-10 Device's Renew Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <send_hm10_renew_cmd+0xdc>)
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030e6:	2208      	movs	r2, #8
 80030e8:	4924      	ldr	r1, [pc, #144]	; (800317c <send_hm10_renew_cmd+0xd8>)
 80030ea:	f002 fa63 	bl	80055b4 <HAL_UART_Transmit>
 80030ee:	4603      	mov	r3, r0
 80030f0:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fc3e 	bl	8003978 <HAL_ret_handler>
 80030fc:	4603      	mov	r3, r0
 80030fe:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 8003100:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <send_hm10_renew_cmd+0x6a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Renew Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e031      	b.n	8003172 <send_hm10_renew_cmd+0xce>
    }

    /* Receive the HM-10 Device's Renew Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <send_hm10_renew_cmd+0xdc>)
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003116:	2208      	movs	r2, #8
 8003118:	4918      	ldr	r1, [pc, #96]	; (800317c <send_hm10_renew_cmd+0xd8>)
 800311a:	f002 face 	bl	80056ba <HAL_UART_Receive>
 800311e:	4603      	mov	r3, r0
 8003120:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fc26 	bl	8003978 <HAL_ret_handler>
 800312c:	4603      	mov	r3, r0
 800312e:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 8003130:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <send_hm10_renew_cmd+0x9a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e019      	b.n	8003172 <send_hm10_renew_cmd+0xce>
    }

    /* Validate the HM-10 Device's Renew Response. */
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	e00e      	b.n	8003162 <send_hm10_renew_cmd+0xbe>
    {
        if (TxRx_Buffer[i] != HM10_Renew_resp[i])
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <send_hm10_renew_cmd+0xd8>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	490d      	ldr	r1, [pc, #52]	; (8003184 <send_hm10_renew_cmd+0xe0>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	440b      	add	r3, r1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <send_hm10_renew_cmd+0xb8>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_EC_ERR;
 8003158:	2304      	movs	r3, #4
 800315a:	e00a      	b.n	8003172 <send_hm10_renew_cmd+0xce>
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b07      	cmp	r3, #7
 8003166:	dded      	ble.n	8003144 <send_hm10_renew_cmd+0xa0>
	#if ETX_OTA_VERBOSE
        printf("DONE: A Renew Command has been successfully sent to the HM-10 BT Device.\r\n");
    #endif

    /* Generating Delay to allow the HM-10 BT Device to finish renewing correctly before any other action is request to it. */
    HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8003168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800316c:	f001 f8ec 	bl	8004348 <HAL_Delay>

    return HM10_EC_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200004dc 	.word	0x200004dc
 8003180:	200004d8 	.word	0x200004d8
 8003184:	20000020 	.word	0x20000020

08003188 <set_hm10_name>:

HM10_Status set_hm10_name(uint8_t *hm10_name, uint8_t size)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
	/* Validating given name. */
	if (size > HM10_MAX_BLE_NAME_SIZE)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d901      	bls.n	800319e <set_hm10_name+0x16>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested BT Name must not exceed a length of %d bytes (i.e., %d ASCII Characters).\r\n", HM10_MAX_BLE_NAME_SIZE, HM10_MAX_BLE_NAME_SIZE);
		#endif
		return HM10_EC_ERR;
 800319a:	2304      	movs	r3, #4
 800319c:	e0b1      	b.n	8003302 <set_hm10_name+0x17a>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80031a2:	f000 fbcf 	bl	8003944 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Name Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Name Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	73fa      	strb	r2, [r7, #15]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b57      	ldr	r3, [pc, #348]	; (800330c <set_hm10_name+0x184>)
 80031b0:	2141      	movs	r1, #65	; 0x41
 80031b2:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	73fa      	strb	r2, [r7, #15]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <set_hm10_name+0x184>)
 80031be:	2154      	movs	r1, #84	; 0x54
 80031c0:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	73fa      	strb	r2, [r7, #15]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <set_hm10_name+0x184>)
 80031cc:	212b      	movs	r1, #43	; 0x2b
 80031ce:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'N';
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	73fa      	strb	r2, [r7, #15]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <set_hm10_name+0x184>)
 80031da:	214e      	movs	r1, #78	; 0x4e
 80031dc:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	73fa      	strb	r2, [r7, #15]
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <set_hm10_name+0x184>)
 80031e8:	2141      	movs	r1, #65	; 0x41
 80031ea:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'M';
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	73fa      	strb	r2, [r7, #15]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <set_hm10_name+0x184>)
 80031f6:	214d      	movs	r1, #77	; 0x4d
 80031f8:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	73fa      	strb	r2, [r7, #15]
 8003200:	461a      	mov	r2, r3
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <set_hm10_name+0x184>)
 8003204:	2145      	movs	r1, #69	; 0x45
 8003206:	5499      	strb	r1, [r3, r2]

	/** <b>Local variable size_with_offset:</b> Either the total size in bytes stated at the \p size param plus the bytes populated in the Tx/Rx Buffer for only the Name Command, or the total size in bytes stated at the \p size param plus the bytes read from the Tx/Rx Buffer for only the Name Response. */
	uint8_t size_with_offset = size + bytes_populated_in_TxRx_Buffer;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	4413      	add	r3, r2
 800320e:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	73bb      	strb	r3, [r7, #14]
 8003214:	e00c      	b.n	8003230 <set_hm10_name+0xa8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	441a      	add	r2, r3
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	73f9      	strb	r1, [r7, #15]
 8003222:	4619      	mov	r1, r3
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <set_hm10_name+0x184>)
 8003228:	545a      	strb	r2, [r3, r1]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 800322a:	7bbb      	ldrb	r3, [r7, #14]
 800322c:	3301      	adds	r3, #1
 800322e:	73bb      	strb	r3, [r7, #14]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3ee      	bcc.n	8003216 <set_hm10_name+0x8e>
	}

	/* Send the HM-10 Device's Set Name Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <set_hm10_name+0x188>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	b29a      	uxth	r2, r3
 8003240:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003244:	4931      	ldr	r1, [pc, #196]	; (800330c <set_hm10_name+0x184>)
 8003246:	f002 f9b5 	bl	80055b4 <HAL_UART_Transmit>
 800324a:	4603      	mov	r3, r0
 800324c:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fb90 	bl	8003978 <HAL_ret_handler>
 8003258:	4603      	mov	r3, r0
 800325a:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 800325c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <set_hm10_name+0xe2>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Name Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e04b      	b.n	8003302 <set_hm10_name+0x17a>
	}

	/* Receive the HM-10 Device's Set Name Response. */
	bytes_populated_in_TxRx_Buffer = HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME + size;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	3307      	adds	r3, #7
 800326e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <set_hm10_name+0x188>)
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	b29a      	uxth	r2, r3
 8003278:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800327c:	4923      	ldr	r1, [pc, #140]	; (800330c <set_hm10_name+0x184>)
 800327e:	f002 fa1c 	bl	80056ba <HAL_UART_Receive>
 8003282:	4603      	mov	r3, r0
 8003284:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb74 	bl	8003978 <HAL_ret_handler>
 8003290:	4603      	mov	r3, r0
 8003292:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 8003294:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <set_hm10_name+0x11a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e02f      	b.n	8003302 <set_hm10_name+0x17a>
	}

	/* Validate the HM-10 Device's Set Name Response. */
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Name Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Name Response (i.e., @ref HM10_Set_Name_resp_without_name_value ). */
	uint8_t bytes_compared = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	737b      	strb	r3, [r7, #13]
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 80032a6:	e00c      	b.n	80032c2 <set_hm10_name+0x13a>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Name_resp_without_name_value[bytes_compared])
 80032a8:	7b7b      	ldrb	r3, [r7, #13]
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <set_hm10_name+0x184>)
 80032ac:	5cd2      	ldrb	r2, [r2, r3]
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	4918      	ldr	r1, [pc, #96]	; (8003314 <set_hm10_name+0x18c>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <set_hm10_name+0x134>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80032b8:	2304      	movs	r3, #4
 80032ba:	e022      	b.n	8003302 <set_hm10_name+0x17a>
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 80032bc:	7b7b      	ldrb	r3, [r7, #13]
 80032be:	3301      	adds	r3, #1
 80032c0:	737b      	strb	r3, [r7, #13]
 80032c2:	7b7b      	ldrb	r3, [r7, #13]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d9ef      	bls.n	80032a8 <set_hm10_name+0x120>
		}
	}
	size_with_offset = size + bytes_compared;
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	7b7b      	ldrb	r3, [r7, #13]
 80032cc:	4413      	add	r3, r2
 80032ce:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	733b      	strb	r3, [r7, #12]
 80032d4:	e010      	b.n	80032f8 <set_hm10_name+0x170>
	{
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 80032d6:	7b7b      	ldrb	r3, [r7, #13]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	737a      	strb	r2, [r7, #13]
 80032dc:	461a      	mov	r2, r3
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <set_hm10_name+0x184>)
 80032e0:	5c9a      	ldrb	r2, [r3, r2]
 80032e2:	7b3b      	ldrb	r3, [r7, #12]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	440b      	add	r3, r1
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <set_hm10_name+0x16a>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80032ee:	2304      	movs	r3, #4
 80032f0:	e007      	b.n	8003302 <set_hm10_name+0x17a>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 80032f2:	7b3b      	ldrb	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	733b      	strb	r3, [r7, #12]
 80032f8:	7b7a      	ldrb	r2, [r7, #13]
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3ea      	bcc.n	80032d6 <set_hm10_name+0x14e>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Name has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200004dc 	.word	0x200004dc
 8003310:	200004d8 	.word	0x200004d8
 8003314:	20000000 	.word	0x20000000

08003318 <set_hm10_role>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_role(HM10_Role ble_role)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
	/* Validating given role. */
	switch (ble_role)
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	3b30      	subs	r3, #48	; 0x30
 8003326:	2b01      	cmp	r3, #1
 8003328:	d901      	bls.n	800332e <set_hm10_role+0x16>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: Requested BT Role %d is not recognized.\r\n", ble_role);
			#endif
			return HM10_EC_ERR;
 800332a:	2304      	movs	r3, #4
 800332c:	e06b      	b.n	8003406 <set_hm10_role+0xee>
			break;
 800332e:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8003330:	f000 fb08 	bl	8003944 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Role Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Role Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <set_hm10_role+0xf8>)
 8003336:	2241      	movs	r2, #65	; 0x41
 8003338:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 800333a:	4b35      	ldr	r3, [pc, #212]	; (8003410 <set_hm10_role+0xf8>)
 800333c:	2254      	movs	r2, #84	; 0x54
 800333e:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 8003340:	4b33      	ldr	r3, [pc, #204]	; (8003410 <set_hm10_role+0xf8>)
 8003342:	222b      	movs	r2, #43	; 0x2b
 8003344:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 8003346:	4b32      	ldr	r3, [pc, #200]	; (8003410 <set_hm10_role+0xf8>)
 8003348:	2252      	movs	r2, #82	; 0x52
 800334a:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'O';
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <set_hm10_role+0xf8>)
 800334e:	224f      	movs	r2, #79	; 0x4f
 8003350:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'L';
 8003352:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <set_hm10_role+0xf8>)
 8003354:	224c      	movs	r2, #76	; 0x4c
 8003356:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <set_hm10_role+0xf8>)
 800335a:	2245      	movs	r2, #69	; 0x45
 800335c:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = ble_role;
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <set_hm10_role+0xf8>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Role Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <set_hm10_role+0xfc>)
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800336c:	2208      	movs	r2, #8
 800336e:	4928      	ldr	r1, [pc, #160]	; (8003410 <set_hm10_role+0xf8>)
 8003370:	f002 f920 	bl	80055b4 <HAL_UART_Transmit>
 8003374:	4603      	mov	r3, r0
 8003376:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 8003378:	89bb      	ldrh	r3, [r7, #12]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fafb 	bl	8003978 <HAL_ret_handler>
 8003382:	4603      	mov	r3, r0
 8003384:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 8003386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <set_hm10_role+0x7c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Role Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 800338e:	89bb      	ldrh	r3, [r7, #12]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e038      	b.n	8003406 <set_hm10_role+0xee>
	}

	/* Receive the HM-10 Device's Set Role Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_ROLE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <set_hm10_role+0xfc>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800339c:	2208      	movs	r2, #8
 800339e:	491c      	ldr	r1, [pc, #112]	; (8003410 <set_hm10_role+0xf8>)
 80033a0:	f002 f98b 	bl	80056ba <HAL_UART_Receive>
 80033a4:	4603      	mov	r3, r0
 80033a6:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 80033a8:	89bb      	ldrh	r3, [r7, #12]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fae3 	bl	8003978 <HAL_ret_handler>
 80033b2:	4603      	mov	r3, r0
 80033b4:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 80033b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <set_hm10_role+0xac>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 80033be:	89bb      	ldrh	r3, [r7, #12]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e020      	b.n	8003406 <set_hm10_role+0xee>
	}

	/* Validate the HM-10 Device's Set Role Response. */
	/** <b>Local variable role_resp_size_without_role_value:</b> Size in bytes of the Role Response from the HM-10 BT device but without considering the length of the requested role value. */
	uint8_t role_resp_size_without_role_value = HM10_ROLE_RESPONSE_SIZE - 1;
 80033c4:	2307      	movs	r3, #7
 80033c6:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Role Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Role Response (i.e., @ref HM10_Set_Role_resp_without_role_value ). */
	uint8_t bytes_compared = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 80033cc:	e00e      	b.n	80033ec <set_hm10_role+0xd4>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Role_resp_without_role_value[bytes_compared])
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <set_hm10_role+0xf8>)
 80033d2:	5cd2      	ldrb	r2, [r2, r3]
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <set_hm10_role+0x100>)
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	440b      	add	r3, r1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <set_hm10_role+0xce>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80033e2:	2304      	movs	r3, #4
 80033e4:	e00f      	b.n	8003406 <set_hm10_role+0xee>
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3301      	adds	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3ec      	bcc.n	80033ce <set_hm10_role+0xb6>
		}
	}
	if (TxRx_Buffer[bytes_compared] != ble_role)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <set_hm10_role+0xf8>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <set_hm10_role+0xec>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
		#endif
		return HM10_EC_ERR;
 8003400:	2304      	movs	r3, #4
 8003402:	e000      	b.n	8003406 <set_hm10_role+0xee>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A Role has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200004dc 	.word	0x200004dc
 8003414:	200004d8 	.word	0x200004d8
 8003418:	20000008 	.word	0x20000008

0800341c <set_hm10_pin>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin(uint8_t *pin)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	/* Validating given pin. */
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 8003424:	2300      	movs	r3, #0
 8003426:	75fb      	strb	r3, [r7, #23]
 8003428:	e00c      	b.n	8003444 <set_hm10_pin+0x28>
	{
		switch (pin[current_pin_character])
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3b30      	subs	r3, #48	; 0x30
 8003434:	2b09      	cmp	r3, #9
 8003436:	d901      	bls.n	800343c <set_hm10_pin+0x20>
				break;
			default:
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected a number character value in ASCII code on given pin value at index %d, but the following ASCII value was given instead: %c.\r\n", current_pin_character, pin[current_pin_character]);
				#endif
				return HM10_EC_ERR;
 8003438:	2304      	movs	r3, #4
 800343a:	e0ae      	b.n	800359a <set_hm10_pin+0x17e>
				break;
 800343c:	bf00      	nop
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	3301      	adds	r3, #1
 8003442:	75fb      	strb	r3, [r7, #23]
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d9ef      	bls.n	800342a <set_hm10_pin+0xe>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	75bb      	strb	r3, [r7, #22]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 800344e:	f000 fa79 	bl	8003944 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Pin Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Pin Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8003452:	7dbb      	ldrb	r3, [r7, #22]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	75ba      	strb	r2, [r7, #22]
 8003458:	461a      	mov	r2, r3
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <set_hm10_pin+0x188>)
 800345c:	2141      	movs	r1, #65	; 0x41
 800345e:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 8003460:	7dbb      	ldrb	r3, [r7, #22]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	75ba      	strb	r2, [r7, #22]
 8003466:	461a      	mov	r2, r3
 8003468:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <set_hm10_pin+0x188>)
 800346a:	2154      	movs	r1, #84	; 0x54
 800346c:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 800346e:	7dbb      	ldrb	r3, [r7, #22]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	75ba      	strb	r2, [r7, #22]
 8003474:	461a      	mov	r2, r3
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <set_hm10_pin+0x188>)
 8003478:	212b      	movs	r1, #43	; 0x2b
 800347a:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'P';
 800347c:	7dbb      	ldrb	r3, [r7, #22]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	75ba      	strb	r2, [r7, #22]
 8003482:	461a      	mov	r2, r3
 8003484:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <set_hm10_pin+0x188>)
 8003486:	2150      	movs	r1, #80	; 0x50
 8003488:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	75ba      	strb	r2, [r7, #22]
 8003490:	461a      	mov	r2, r3
 8003492:	4b44      	ldr	r3, [pc, #272]	; (80035a4 <set_hm10_pin+0x188>)
 8003494:	2141      	movs	r1, #65	; 0x41
 8003496:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 8003498:	7dbb      	ldrb	r3, [r7, #22]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	75ba      	strb	r2, [r7, #22]
 800349e:	461a      	mov	r2, r3
 80034a0:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <set_hm10_pin+0x188>)
 80034a2:	2153      	movs	r1, #83	; 0x53
 80034a4:	5499      	strb	r1, [r3, r2]
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 80034a6:	7dbb      	ldrb	r3, [r7, #22]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	75ba      	strb	r2, [r7, #22]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <set_hm10_pin+0x188>)
 80034b0:	2153      	movs	r1, #83	; 0x53
 80034b2:	5499      	strb	r1, [r3, r2]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	757b      	strb	r3, [r7, #21]
 80034b8:	e00c      	b.n	80034d4 <set_hm10_pin+0xb8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 80034ba:	7d7b      	ldrb	r3, [r7, #21]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	441a      	add	r2, r3
 80034c0:	7dbb      	ldrb	r3, [r7, #22]
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	75b9      	strb	r1, [r7, #22]
 80034c6:	4619      	mov	r1, r3
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <set_hm10_pin+0x188>)
 80034cc:	545a      	strb	r2, [r3, r1]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80034ce:	7d7b      	ldrb	r3, [r7, #21]
 80034d0:	3301      	adds	r3, #1
 80034d2:	757b      	strb	r3, [r7, #21]
 80034d4:	7dbb      	ldrb	r3, [r7, #22]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d9ef      	bls.n	80034ba <set_hm10_pin+0x9e>
	}

	/* Send the HM-10 Device's Set Pin Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_PIN_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <set_hm10_pin+0x18c>)
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80034e2:	220d      	movs	r2, #13
 80034e4:	492f      	ldr	r1, [pc, #188]	; (80035a4 <set_hm10_pin+0x188>)
 80034e6:	f002 f865 	bl	80055b4 <HAL_UART_Transmit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 80034ee:	8a3b      	ldrh	r3, [r7, #16]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fa40 	bl	8003978 <HAL_ret_handler>
 80034f8:	4603      	mov	r3, r0
 80034fa:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 80034fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <set_hm10_pin+0xee>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Pin Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003504:	8a3b      	ldrh	r3, [r7, #16]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e047      	b.n	800359a <set_hm10_pin+0x17e>
	}

	/* Receive the HM-10 Device's Set Pin Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_PIN_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <set_hm10_pin+0x18c>)
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003512:	220d      	movs	r2, #13
 8003514:	4923      	ldr	r1, [pc, #140]	; (80035a4 <set_hm10_pin+0x188>)
 8003516:	f002 f8d0 	bl	80056ba <HAL_UART_Receive>
 800351a:	4603      	mov	r3, r0
 800351c:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 800351e:	8a3b      	ldrh	r3, [r7, #16]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa28 	bl	8003978 <HAL_ret_handler>
 8003528:	4603      	mov	r3, r0
 800352a:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 800352c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <set_hm10_pin+0x11e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8003534:	8a3b      	ldrh	r3, [r7, #16]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e02f      	b.n	800359a <set_hm10_pin+0x17e>
	}

	/* Validate the HM-10 Device's Set Pin Response. */
	/** <b>Local variable pin_resp_size_without_pin_value:</b> Size in bytes of the Pin Response from the HM-10 BT device but without considering the length of the pin value. */
	uint8_t pin_resp_size_without_pin_value = HM10_PIN_RESPONSE_SIZE - HM10_PIN_VALUE_SIZE;
 800353a:	2307      	movs	r3, #7
 800353c:	73fb      	strb	r3, [r7, #15]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Pin Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Pin Response (i.e., @ref HM10_Set_Pin_resp_without_pin_value ). */
	uint8_t bytes_compared = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	753b      	strb	r3, [r7, #20]
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 8003542:	e00e      	b.n	8003562 <set_hm10_pin+0x146>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Pin_resp_without_pin_value[bytes_compared])
 8003544:	7d3b      	ldrb	r3, [r7, #20]
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <set_hm10_pin+0x188>)
 8003548:	5cd2      	ldrb	r2, [r2, r3]
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <set_hm10_pin+0x190>)
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	7d3b      	ldrb	r3, [r7, #20]
 8003550:	440b      	add	r3, r1
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <set_hm10_pin+0x140>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8003558:	2304      	movs	r3, #4
 800355a:	e01e      	b.n	800359a <set_hm10_pin+0x17e>
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 800355c:	7d3b      	ldrb	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	753b      	strb	r3, [r7, #20]
 8003562:	7d3a      	ldrb	r2, [r7, #20]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3ec      	bcc.n	8003544 <set_hm10_pin+0x128>
		}
	}
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 800356a:	2300      	movs	r3, #0
 800356c:	74fb      	strb	r3, [r7, #19]
 800356e:	e010      	b.n	8003592 <set_hm10_pin+0x176>
	{
		if (TxRx_Buffer[bytes_compared++] != pin[current_pin_character])
 8003570:	7d3b      	ldrb	r3, [r7, #20]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	753a      	strb	r2, [r7, #20]
 8003576:	461a      	mov	r2, r3
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <set_hm10_pin+0x188>)
 800357a:	5c9a      	ldrb	r2, [r3, r2]
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	440b      	add	r3, r1
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <set_hm10_pin+0x170>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8003588:	2304      	movs	r3, #4
 800358a:	e006      	b.n	800359a <set_hm10_pin+0x17e>
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	3301      	adds	r3, #1
 8003590:	74fb      	strb	r3, [r7, #19]
 8003592:	7d3b      	ldrb	r3, [r7, #20]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d9eb      	bls.n	8003570 <set_hm10_pin+0x154>

	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Pin has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200004dc 	.word	0x200004dc
 80035a8:	200004d8 	.word	0x200004d8
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <set_hm10_pin_code_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin_code_mode(HM10_Pin_Code_Mode pin_code_mode)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
	/* Validating given pin code mode. */
	switch (pin_code_mode)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d003      	beq.n	80035c8 <set_hm10_pin_code_mode+0x18>
 80035c0:	2b32      	cmp	r3, #50	; 0x32
 80035c2:	d001      	beq.n	80035c8 <set_hm10_pin_code_mode+0x18>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: An invalid pin code mode value has been given: %c_ASCII.\r\n", pin_code_mode);
			#endif
			return HM10_EC_ERR;
 80035c4:	2304      	movs	r3, #4
 80035c6:	e06b      	b.n	80036a0 <set_hm10_pin_code_mode+0xf0>
			break;
 80035c8:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80035ca:	f000 f9bb 	bl	8003944 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Type Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Type Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035d6:	2254      	movs	r2, #84	; 0x54
 80035d8:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 80035da:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035dc:	222b      	movs	r2, #43	; 0x2b
 80035de:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'T';
 80035e0:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035e2:	2254      	movs	r2, #84	; 0x54
 80035e4:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'Y';
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035e8:	2259      	movs	r2, #89	; 0x59
 80035ea:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'P';
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035ee:	2250      	movs	r2, #80	; 0x50
 80035f0:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035f4:	2245      	movs	r2, #69	; 0x45
 80035f6:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = pin_code_mode;
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Type Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <set_hm10_pin_code_mode+0xfc>)
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003606:	2208      	movs	r2, #8
 8003608:	4927      	ldr	r1, [pc, #156]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 800360a:	f001 ffd3 	bl	80055b4 <HAL_UART_Transmit>
 800360e:	4603      	mov	r3, r0
 8003610:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 8003612:	89bb      	ldrh	r3, [r7, #12]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f9ae 	bl	8003978 <HAL_ret_handler>
 800361c:	4603      	mov	r3, r0
 800361e:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 8003620:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <set_hm10_pin_code_mode+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Type Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8003628:	89bb      	ldrh	r3, [r7, #12]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e038      	b.n	80036a0 <set_hm10_pin_code_mode+0xf0>
	}

	/* Receive the HM-10 Device's Set Type Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_TYPE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800362e:	4b1f      	ldr	r3, [pc, #124]	; (80036ac <set_hm10_pin_code_mode+0xfc>)
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003636:	2208      	movs	r2, #8
 8003638:	491b      	ldr	r1, [pc, #108]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 800363a:	f002 f83e 	bl	80056ba <HAL_UART_Receive>
 800363e:	4603      	mov	r3, r0
 8003640:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 8003642:	89bb      	ldrh	r3, [r7, #12]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f996 	bl	8003978 <HAL_ret_handler>
 800364c:	4603      	mov	r3, r0
 800364e:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 8003650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <set_hm10_pin_code_mode+0xae>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8003658:	89bb      	ldrh	r3, [r7, #12]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e020      	b.n	80036a0 <set_hm10_pin_code_mode+0xf0>
	}

	/* Validate the HM-10 Device's Set Type Response. */
	/** <b>Local variable type_resp_size_without_pin_mode_value:</b> Size in bytes of the Type Response from the HM-10 BT device but without considering the length of the Type value. */
	uint8_t type_resp_size_without_pin_mode_value = HM10_TYPE_RESPONSE_SIZE - 1;
 800365e:	2307      	movs	r3, #7
 8003660:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Type Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Type Response (i.e., @ref HM10_Set_Type_resp_without_type_value ). */
	uint8_t bytes_compared = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 8003666:	e00e      	b.n	8003686 <set_hm10_pin_code_mode+0xd6>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Type_resp_without_type_value[bytes_compared])
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 800366c:	5cd2      	ldrb	r2, [r2, r3]
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <set_hm10_pin_code_mode+0x100>)
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	440b      	add	r3, r1
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <set_hm10_pin_code_mode+0xd0>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Type_resp_without_type_value[bytes_compared]);
			#endif
			return HM10_EC_ERR;
 800367c:	2304      	movs	r3, #4
 800367e:	e00f      	b.n	80036a0 <set_hm10_pin_code_mode+0xf0>
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	3301      	adds	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3ec      	bcc.n	8003668 <set_hm10_pin_code_mode+0xb8>
		}
	}
	if (TxRx_Buffer[bytes_compared] != pin_code_mode)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <set_hm10_pin_code_mode+0xf8>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <set_hm10_pin_code_mode+0xee>
	{
		#if ETX_OTA_VERBOSE
		printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], pin_code_mode);
		#endif
		return HM10_EC_ERR;
 800369a:	2304      	movs	r3, #4
 800369c:	e000      	b.n	80036a0 <set_hm10_pin_code_mode+0xf0>

	#if ETX_OTA_VERBOSE
		printf("DONE: The desired Pin Code Mode has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200004dc 	.word	0x200004dc
 80036ac:	200004d8 	.word	0x200004d8
 80036b0:	20000010 	.word	0x20000010

080036b4 <set_hm10_module_work_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_module_work_mode(HM10_Module_Work_Mode module_work_mode)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
    /* Validating given module work mode. */
    switch (module_work_mode)
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	3b30      	subs	r3, #48	; 0x30
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <set_hm10_module_work_mode+0x16>
            break;
        default:
            #if ETX_OTA_VERBOSE
                printf("ERROR: An invalid module work mode value has been given: %c_ASCII.\r\n", module_work_mode);
            #endif
            return HM10_EC_ERR;
 80036c6:	2304      	movs	r3, #4
 80036c8:	e06b      	b.n	80037a2 <set_hm10_module_work_mode+0xee>
            break;
 80036ca:	bf00      	nop

    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80036cc:	f000 f93a 	bl	8003944 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Set Mode Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Set Mode Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80036d6:	4b35      	ldr	r3, [pc, #212]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036d8:	2254      	movs	r2, #84	; 0x54
 80036da:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 80036dc:	4b33      	ldr	r3, [pc, #204]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036de:	222b      	movs	r2, #43	; 0x2b
 80036e0:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'M';
 80036e2:	4b32      	ldr	r3, [pc, #200]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036e4:	224d      	movs	r2, #77	; 0x4d
 80036e6:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'O';
 80036e8:	4b30      	ldr	r3, [pc, #192]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036ea:	224f      	movs	r2, #79	; 0x4f
 80036ec:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'D';
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036f0:	2244      	movs	r2, #68	; 0x44
 80036f2:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 80036f4:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036f6:	2245      	movs	r2, #69	; 0x45
 80036f8:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = module_work_mode;
 80036fa:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	71d3      	strb	r3, [r2, #7]

    /* Send the HM-10 Device's Set Mode Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <set_hm10_module_work_mode+0xfc>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003708:	2208      	movs	r2, #8
 800370a:	4928      	ldr	r1, [pc, #160]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 800370c:	f001 ff52 	bl	80055b4 <HAL_UART_Transmit>
 8003710:	4603      	mov	r3, r0
 8003712:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 8003714:	89bb      	ldrh	r3, [r7, #12]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f92d 	bl	8003978 <HAL_ret_handler>
 800371e:	4603      	mov	r3, r0
 8003720:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 8003722:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <set_hm10_module_work_mode+0x7c>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Set Mode Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 800372a:	89bb      	ldrh	r3, [r7, #12]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e038      	b.n	80037a2 <set_hm10_module_work_mode+0xee>
    }

    /* Receive the HM-10 Device's Set Mode Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_MODE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <set_hm10_module_work_mode+0xfc>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003738:	2208      	movs	r2, #8
 800373a:	491c      	ldr	r1, [pc, #112]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 800373c:	f001 ffbd 	bl	80056ba <HAL_UART_Receive>
 8003740:	4603      	mov	r3, r0
 8003742:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 8003744:	89bb      	ldrh	r3, [r7, #12]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f915 	bl	8003978 <HAL_ret_handler>
 800374e:	4603      	mov	r3, r0
 8003750:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 8003752:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <set_hm10_module_work_mode+0xac>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 800375a:	89bb      	ldrh	r3, [r7, #12]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e020      	b.n	80037a2 <set_hm10_module_work_mode+0xee>
    }

    /* Validate the HM-10 Device's Set Mode Response. */
    /** <b>Local variable mode_resp_size_without_module_work_mode_value:</b> Size in bytes of the Mode Response from the HM-10 BT device but without considering the length of the Module Work Mode value. */
    uint8_t mode_resp_size_without_module_work_mode_value = HM10_MODE_RESPONSE_SIZE - 1;
 8003760:	2307      	movs	r3, #7
 8003762:	72fb      	strb	r3, [r7, #11]
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Mode Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Mode Response (i.e., @ref HM10_Set_Mode_resp_without_module_work_mode_value ). */
    uint8_t bytes_compared = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 8003768:	e00e      	b.n	8003788 <set_hm10_module_work_mode+0xd4>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared])
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 800376e:	5cd2      	ldrb	r2, [r2, r3]
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <set_hm10_module_work_mode+0x100>)
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	440b      	add	r3, r1
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <set_hm10_module_work_mode+0xce>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared]);
            #endif
            return HM10_EC_ERR;
 800377e:	2304      	movs	r3, #4
 8003780:	e00f      	b.n	80037a2 <set_hm10_module_work_mode+0xee>
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	3301      	adds	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3ec      	bcc.n	800376a <set_hm10_module_work_mode+0xb6>
        }
    }
    if (TxRx_Buffer[bytes_compared] != module_work_mode)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	4a06      	ldr	r2, [pc, #24]	; (80037ac <set_hm10_module_work_mode+0xf8>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
 8003796:	79fa      	ldrb	r2, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <set_hm10_module_work_mode+0xec>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], module_work_mode);
        #endif
        return HM10_EC_ERR;
 800379c:	2304      	movs	r3, #4
 800379e:	e000      	b.n	80037a2 <set_hm10_module_work_mode+0xee>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The desired Module Work Mode has been successfully set in the HM-10 BT Device.\r\n");
    #endif

    return HM10_EC_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200004dc 	.word	0x200004dc
 80037b0:	200004d8 	.word	0x200004d8
 80037b4:	20000014 	.word	0x20000014

080037b8 <disconnect_hm10_from_bt_address>:

    return HM10_EC_OK;
}

HM10_BT_Connection_Status disconnect_hm10_from_bt_address()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80037be:	f000 f8c1 	bl	8003944 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Lost-Connection Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Lost-Connection Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 80037c4:	2241      	movs	r2, #65	; 0x41
 80037c6:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80037c8:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 80037ca:	2254      	movs	r2, #84	; 0x54
 80037cc:	705a      	strb	r2, [r3, #1]

    /* Send the HM-10 Device's Lost-Connection Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <disconnect_hm10_from_bt_address+0x104>)
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80037d6:	2202      	movs	r2, #2
 80037d8:	4937      	ldr	r1, [pc, #220]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 80037da:	f001 feeb 	bl	80055b4 <HAL_UART_Transmit>
 80037de:	4603      	mov	r3, r0
 80037e0:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 80037e2:	88bb      	ldrh	r3, [r7, #4]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f8c6 	bl	8003978 <HAL_ret_handler>
 80037ec:	4603      	mov	r3, r0
 80037ee:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 80037f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <disconnect_hm10_from_bt_address+0x44>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Lost-Connection Command to HM-10 BT Device has failed.\r\n");
        #endif
        return HM10_BT_Connection_Status_Unknown;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e059      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Receive the first part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80037fc:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <disconnect_hm10_from_bt_address+0x104>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003804:	2202      	movs	r2, #2
 8003806:	492c      	ldr	r1, [pc, #176]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 8003808:	f001 ff57 	bl	80056ba <HAL_UART_Receive>
 800380c:	4603      	mov	r3, r0
 800380e:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 8003810:	88bb      	ldrh	r3, [r7, #4]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f8af 	bl	8003978 <HAL_ret_handler>
 800381a:	4603      	mov	r3, r0
 800381c:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 800381e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <disconnect_hm10_from_bt_address+0x72>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return HM10_BT_Connection_Status_Unknown;
 8003826:	2300      	movs	r3, #0
 8003828:	e042      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the first part of the HM-10 Device's Lost-Connection Response. */
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Connection-Lost Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Connection-Lost Response (i.e., @ref HM10_OK_LOST_resp ). */
    uint8_t bytes_compared = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	71fb      	strb	r3, [r7, #7]
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 800382e:	e00c      	b.n	800384a <disconnect_hm10_from_bt_address+0x92>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 8003834:	5cd2      	ldrb	r2, [r2, r3]
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	4921      	ldr	r1, [pc, #132]	; (80038c0 <disconnect_hm10_from_bt_address+0x108>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <disconnect_hm10_from_bt_address+0x8c>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 8003840:	2300      	movs	r3, #0
 8003842:	e035      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	3301      	adds	r3, #1
 8003848:	71fb      	strb	r3, [r7, #7]
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d9ef      	bls.n	8003830 <disconnect_hm10_from_bt_address+0x78>
        }
    }

    /* Receive the second part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, &TxRx_Buffer[bytes_compared], HM10_OK_LOST_RESPONSE_SIZE_WITHOUT_THE_OK_PART, HM10_CUSTOM_HAL_TIMEOUT);
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <disconnect_hm10_from_bt_address+0x104>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 8003858:	1899      	adds	r1, r3, r2
 800385a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800385e:	2205      	movs	r2, #5
 8003860:	f001 ff2b 	bl	80056ba <HAL_UART_Receive>
 8003864:	4603      	mov	r3, r0
 8003866:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 8003868:	88bb      	ldrh	r3, [r7, #4]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f883 	bl	8003978 <HAL_ret_handler>
 8003872:	4603      	mov	r3, r0
 8003874:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 8003876:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d014      	beq.n	80038a8 <disconnect_hm10_from_bt_address+0xf0>
    {
        if (ret == HM10_EC_NR)
 800387e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d101      	bne.n	800388a <disconnect_hm10_from_bt_address+0xd2>
        {
            #if ETX_OTA_VERBOSE
                printf("WARNING: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
            #endif
            return HM10_BT_No_Connection;
 8003886:	2301      	movs	r3, #1
 8003888:	e012      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
            else
            {
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something went wrong when our MCU/MPU was waiting to receive the data (HM-10 Exception code = %d)\r\n", ret);
            }
        #endif
        return HM10_BT_Connection_Status_Unknown;
 800388a:	2300      	movs	r3, #0
 800388c:	e010      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the second part of the HM-10 Device's Lost-Connection Response. */
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <disconnect_hm10_from_bt_address+0x100>)
 8003892:	5cd2      	ldrb	r2, [r2, r3]
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <disconnect_hm10_from_bt_address+0x108>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <disconnect_hm10_from_bt_address+0xea>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 800389e:	2300      	movs	r3, #0
 80038a0:	e006      	b.n	80038b0 <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	3301      	adds	r3, #1
 80038a6:	71fb      	strb	r3, [r7, #7]
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d9ef      	bls.n	800388e <disconnect_hm10_from_bt_address+0xd6>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The HM-10 Device has been disconnected from an on-going Bluetooth Connection.\r\n");
    #endif

    return HM10_BT_Connection_Lost;
 80038ae:	2302      	movs	r3, #2
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200004dc 	.word	0x200004dc
 80038bc:	200004d8 	.word	0x200004d8
 80038c0:	20000028 	.word	0x20000028

080038c4 <send_hm10_ota_data>:

HM10_Status send_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	460b      	mov	r3, r1
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Send the requested data Over the Air (OTA) via the HM-10 BT Device. */
	ret = HAL_UART_Transmit(p_huart, ble_ota_data, size, timeout);
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <send_hm10_ota_data+0x3c>)
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	897a      	ldrh	r2, [r7, #10]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	f001 fe6a 	bl	80055b4 <HAL_UART_Transmit>
 80038e0:	4603      	mov	r3, r0
 80038e2:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 80038e4:	8afb      	ldrh	r3, [r7, #22]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f845 	bl	8003978 <HAL_ret_handler>
 80038ee:	4603      	mov	r3, r0
 80038f0:	82fb      	strh	r3, [r7, #22]

	return ret;
 80038f2:	8afb      	ldrh	r3, [r7, #22]
 80038f4:	b2db      	uxtb	r3, r3
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200004d8 	.word	0x200004d8

08003904 <get_hm10_ota_data>:

HM10_Status get_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	460b      	mov	r3, r1
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, ble_ota_data, size, timeout);
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <get_hm10_ota_data+0x3c>)
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	897a      	ldrh	r2, [r7, #10]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68f9      	ldr	r1, [r7, #12]
 800391c:	f001 fecd 	bl	80056ba <HAL_UART_Receive>
 8003920:	4603      	mov	r3, r0
 8003922:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 8003924:	8afb      	ldrh	r3, [r7, #22]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f825 	bl	8003978 <HAL_ret_handler>
 800392e:	4603      	mov	r3, r0
 8003930:	82fb      	strh	r3, [r7, #22]

	return ret;
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	b2db      	uxtb	r3, r3
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200004d8 	.word	0x200004d8

08003944 <HAL_uart_rx_flush>:

static void HAL_uart_rx_flush()
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function type. */
	HAL_StatusTypeDef  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_uart_rx_flush+0x2c>)
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003952:	2201      	movs	r2, #1
 8003954:	4907      	ldr	r1, [pc, #28]	; (8003974 <HAL_uart_rx_flush+0x30>)
 8003956:	f001 feb0 	bl	80056ba <HAL_UART_Receive>
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_TIMEOUT)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d001      	beq.n	8003968 <HAL_uart_rx_flush+0x24>
	{
		HAL_uart_rx_flush();
 8003964:	f7ff ffee 	bl	8003944 <HAL_uart_rx_flush>
	}
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200004d8 	.word	0x200004d8
 8003974:	200004dc 	.word	0x200004dc

08003978 <HAL_ret_handler>:

static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d006      	beq.n	8003996 <HAL_ret_handler+0x1e>
 8003988:	2b00      	cmp	r3, #0
 800398a:	dd06      	ble.n	800399a <HAL_ret_handler+0x22>
 800398c:	3b02      	subs	r3, #2
 800398e:	2b01      	cmp	r3, #1
 8003990:	d803      	bhi.n	800399a <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return HM10_EC_NR;
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return HM10_EC_ERR;
 8003996:	2304      	movs	r3, #4
 8003998:	e000      	b.n	800399c <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 800399a:	79fb      	ldrb	r3, [r7, #7]
    }
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
	...

080039a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ae:	f000 fc69 	bl	8004284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039b2:	f000 f875 	bl	8003aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039b6:	f000 f92b 	bl	8003c10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80039ba:	f000 f8ab 	bl	8003b14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80039be:	f000 f8d3 	bl	8003b68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80039c2:	f000 f8fb 	bl	8003bbc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /** <b>Local variable is_app_fw_validation_ok:</b> Flag used to indicate whether the Application Firmware has been successfully validated via its CRC with a \c 1 or, otherwise with a \c 0 . */
  uint8_t is_app_fw_validation_ok = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	71bb      	strb	r3, [r7, #6]
  uint32_t current_tick;
  /** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref ETX_OTA_Status function type. */
  ETX_OTA_Status ret;

  /* Send a message from the Bootloader showing the current Bootloader version there. */
  printf("Starting Bootloader v%d.%d\r\n", BL_version[0], BL_version[1]);
 80039ca:	2300      	movs	r3, #0
 80039cc:	2204      	movs	r2, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	482f      	ldr	r0, [pc, #188]	; (8003a90 <main+0xe8>)
 80039d2:	f002 f8b1 	bl	8005b38 <iprintf>

  /* We initialize the Firmware Update Configurations sub-module and the ETX OTA Protocol module. */
  custom_firmware_update_config_init();
 80039d6:	f000 f991 	bl	8003cfc <custom_firmware_update_config_init>
  custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol_BT, &huart3);
 80039da:	492e      	ldr	r1, [pc, #184]	; (8003a94 <main+0xec>)
 80039dc:	2001      	movs	r0, #1
 80039de:	f000 f9c3 	bl	8003d68 <custom_init_etx_ota_protocol_module>

  /* Validate both the Bootloader and Application Firmwares in our MCU/MPU. */
  validate_bootloader_firmware();
 80039e2:	f000 f9eb 	bl	8003dbc <validate_bootloader_firmware>
  validate_application_firmware(&is_app_fw_validation_ok);
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fa0d 	bl	8003e08 <validate_application_firmware>

  /* Execute the Delay for the Pre ETX OTA Requests Hearing stage and then flush the Rx of the UART from which the ETX OTA Protocol will be used in this MCU/MPU. */
  HAL_Delay(PRE_ETX_OTA_REQUESTS_HEARING_DELAY);
 80039ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80039f2:	f000 fca9 	bl	8004348 <HAL_Delay>
  HAL_uart_rx_flush(&huart3);
 80039f6:	4827      	ldr	r0, [pc, #156]	; (8003a94 <main+0xec>)
 80039f8:	f000 fa3c 	bl	8003e74 <HAL_uart_rx_flush>
   Check if a Firmware Image is received during the next @ref ETX_CUSTOM_HAL_TIMEOUT seconds and, if true, install it
   if it is an Application Firmware Image. Otherwise, jump the MCU/MPU into its Application Firmware. However, if there
   is no existing or valid Application Firmware installed in our MCU, then wait indefinitely to receive an Application
   Firmware Update via the ETX OTA Protocol.
   */
  end_tick = HAL_GetTick() + ETX_CUSTOM_HAL_TIMEOUT;
 80039fc:	f000 fc9a 	bl	8004334 <HAL_GetTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8003a06:	3328      	adds	r3, #40	; 0x28
 8003a08:	60bb      	str	r3, [r7, #8]
  #endif
  do
  {
	  do
	  {
		  printf("Waiting for an ETX OTA Transaction...\r\n");
 8003a0a:	4823      	ldr	r0, [pc, #140]	; (8003a98 <main+0xf0>)
 8003a0c:	f002 f8fa 	bl	8005c04 <puts>
		  ret = firmware_image_download_and_install();
 8003a10:	f7fe fc3e 	bl	8002290 <firmware_image_download_and_install>
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
		  switch (ret)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d81f      	bhi.n	8003a5e <main+0xb6>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <main+0x7c>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a39 	.word	0x08003a39
 8003a28:	08003a3f 	.word	0x08003a3f
 8003a2c:	08003a47 	.word	0x08003a47
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a57 	.word	0x08003a57
					else
					{
						printf("DONE: Application Firmware Update has successfully concluded! Rebooting MCU/MPU...\r\n");
					}
				#endif
				HAL_NVIC_SystemReset();
 8003a38:	f000 fd97 	bl	800456a <HAL_NVIC_SystemReset>
				break;
 8003a3c:	e016      	b.n	8003a6c <main+0xc4>
			case ETX_OTA_EC_STOP:
				#if ETX_OTA_VERBOSE
					printf("DONE: Firmware Update process has been aborted. Try again...\r\n");
				#endif
				current_tick = HAL_GetTick();
 8003a3e:	f000 fc79 	bl	8004334 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]
				break;
 8003a44:	e012      	b.n	8003a6c <main+0xc4>
			case ETX_OTA_EC_NR:
				// No response was received from host. Therefore, try hearing for a response from the host again in case our MCU/MPU is still in DFU mode.
				current_tick = HAL_GetTick();
 8003a46:	f000 fc75 	bl	8004334 <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]
				break;
 8003a4c:	e00e      	b.n	8003a6c <main+0xc4>
			case ETX_OTA_EC_NA:
				#if ETX_OTA_VERBOSE
					printf("WARNING: Application or Bootloader Firmware Image was expected, but request for something else was received instead.\r\n");
				#endif
				current_tick = HAL_GetTick();
 8003a4e:	f000 fc71 	bl	8004334 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]
				break;
 8003a54:	e00a      	b.n	8003a6c <main+0xc4>
			case ETX_OTA_EC_ERR:
				#if ETX_OTA_VERBOSE
				    printf("ERROR: ETX OTA process has failed. Try again...\r\n");
                #endif
                current_tick = HAL_GetTick();
 8003a56:	f000 fc6d 	bl	8004334 <HAL_GetTick>
 8003a5a:	60f8      	str	r0, [r7, #12]
				break;
 8003a5c:	e006      	b.n	8003a6c <main+0xc4>
			default:
				#if ETX_OTA_VERBOSE
					printf("ERROR: Exception Code received %d is not recognized. Our MCU/MPU will halt!.\r\n", ret);
				#endif
				HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a64:	480d      	ldr	r0, [pc, #52]	; (8003a9c <main+0xf4>)
 8003a66:	f001 f92c 	bl	8004cc2 <HAL_GPIO_WritePin>
				while (1);
 8003a6a:	e7fe      	b.n	8003a6a <main+0xc2>
		  }
	  }
	  while ((current_tick<end_tick) || (is_app_fw_validation_ok==0));
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3ca      	bcc.n	8003a0a <main+0x62>
 8003a74:	79bb      	ldrb	r3, [r7, #6]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0c7      	beq.n	8003a0a <main+0x62>
	            transaction that could not be completed and, therefore, having as a result that the current Application
	            Firmware is no longer valid. Therefore, by validating the Application Firmware again here, the @ref main
	            program can guarantee to successfully loop in the Bootloader Firmware and continue asking for an ETX OTA
	            Request until an ETX OTA Firmware Update transaction is successfully completed.
      */
	  validate_application_firmware(&is_app_fw_validation_ok);
 8003a7a:	1dbb      	adds	r3, r7, #6
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9c3 	bl	8003e08 <validate_application_firmware>
  }
  while (is_app_fw_validation_ok == 0);
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0c0      	beq.n	8003a0a <main+0x62>
  /* Make the MCU/MPU jump into its Application Firmware. */
  #if ETX_OTA_VERBOSE
    printf("Our MCU/MPU has leaved DFU mode.\r\n");
  #endif
  goto_application_firmware();
 8003a88:	f000 fa0c 	bl	8003ea4 <goto_application_firmware>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <main+0xe4>
 8003a8e:	bf00      	nop
 8003a90:	0800692c 	.word	0x0800692c
 8003a94:	20000580 	.word	0x20000580
 8003a98:	0800694c 	.word	0x0800694c
 8003a9c:	40011000 	.word	0x40011000

08003aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b090      	sub	sp, #64	; 0x40
 8003aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa6:	f107 0318 	add.w	r3, r7, #24
 8003aaa:	2228      	movs	r2, #40	; 0x28
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 f988 	bl	8005dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f90d 	bl	8004cf4 <HAL_RCC_OscConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8003ae0:	f000 f9ee 	bl	8003ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003aec:	2390      	movs	r3, #144	; 0x90
 8003aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fb7b 	bl	80051f8 <HAL_RCC_ClockConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003b08:	f000 f9da 	bl	8003ec0 <Error_Handler>
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3740      	adds	r7, #64	; 0x40
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <MX_USART1_UART_Init+0x50>)
 8003b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b3e:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b4a:	4805      	ldr	r0, [pc, #20]	; (8003b60 <MX_USART1_UART_Init+0x4c>)
 8003b4c:	f001 fce2 	bl	8005514 <HAL_UART_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b56:	f000 f9b3 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200004f0 	.word	0x200004f0
 8003b64:	40013800 	.word	0x40013800

08003b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <MX_USART2_UART_Init+0x50>)
 8003b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b8e:	220c      	movs	r2, #12
 8003b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_USART2_UART_Init+0x4c>)
 8003ba0:	f001 fcb8 	bl	8005514 <HAL_UART_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003baa:	f000 f989 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000538 	.word	0x20000538
 8003bb8:	40004400 	.word	0x40004400

08003bbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <MX_USART3_UART_Init+0x50>)
 8003bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003be2:	220c      	movs	r2, #12
 8003be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <MX_USART3_UART_Init+0x4c>)
 8003bf4:	f001 fc8e 	bl	8005514 <HAL_UART_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bfe:	f000 f95f 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000580 	.word	0x20000580
 8003c0c:	40004800 	.word	0x40004800

08003c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c16:	f107 0310 	add.w	r3, r7, #16
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c24:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c2a:	f043 0310 	orr.w	r3, r3, #16
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c42:	f043 0320 	orr.w	r3, r3, #32
 8003c46:	6193      	str	r3, [r2, #24]
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6193      	str	r3, [r2, #24]
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c72:	f043 0308 	orr.w	r3, r3, #8
 8003c76:	6193      	str	r3, [r2, #24]
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <MX_GPIO_Init+0xc0>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003c84:	2201      	movs	r2, #1
 8003c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c8a:	4812      	ldr	r0, [pc, #72]	; (8003cd4 <MX_GPIO_Init+0xc4>)
 8003c8c:	f001 f819 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	480a      	ldr	r0, [pc, #40]	; (8003cd4 <MX_GPIO_Init+0xc4>)
 8003caa:	f000 fe6f 	bl	800498c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <MX_GPIO_Init+0xc4>)
 8003cc4:	f000 fe62 	bl	800498c <HAL_GPIO_Init>

}
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40011000 	.word	0x40011000

08003cd8 <__io_putchar>:
	/* With GCC, small printf (option LD Linker->Libraries->Small printf set to 'Yes') calls __io_putchar(). */
	int __io_putchar(int ch)
#else
	int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here. */
	/* NOTE: The characters written into the UART1 Protocol will be looped until the end of transmission. */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003ce0:	1d39      	adds	r1, r7, #4
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4803      	ldr	r0, [pc, #12]	; (8003cf8 <__io_putchar+0x20>)
 8003cea:	f001 fc63 	bl	80055b4 <HAL_UART_Transmit>
	return ch;
 8003cee:	687b      	ldr	r3, [r7, #4]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200004f0 	.word	0x200004f0

08003cfc <custom_firmware_update_config_init>:

static void custom_firmware_update_config_init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
    int16_t ret;
    /** <b>Local variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
    uint8_t attempts = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
        printf("Initializing the Firmware Update Configurations sub-module...\r\n");
    #endif
    do
    {
        /* Delay of 500 milliseconds. */
        end_tick = HAL_GetTick() + 500;
 8003d06:	f000 fb15 	bl	8004334 <HAL_GetTick>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003d10:	607b      	str	r3, [r7, #4]
        current_tick = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
        while (current_tick < end_tick)
 8003d16:	e002      	b.n	8003d1e <custom_firmware_update_config_init+0x22>
        {
            current_tick = HAL_GetTick();
 8003d18:	f000 fb0c 	bl	8004334 <HAL_GetTick>
 8003d1c:	60b8      	str	r0, [r7, #8]
        while (current_tick < end_tick)
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3f8      	bcc.n	8003d18 <custom_firmware_update_config_init+0x1c>
        }

        /* We attempt to initialize the Firmware Update Configurations sub-module. */
        ret = firmware_update_configurations_init();
 8003d26:	f7fe ff5d 	bl	8002be4 <firmware_update_configurations_init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	807b      	strh	r3, [r7, #2]
        attempts++;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	3301      	adds	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
        if (ret == FIRM_UPDT_CONF_EC_OK)
 8003d34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <custom_firmware_update_config_init+0x48>
        {
            /* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
            firmware_update_configurations_read(&fw_config);
 8003d3c:	4808      	ldr	r0, [pc, #32]	; (8003d60 <custom_firmware_update_config_init+0x64>)
 8003d3e:	f7fe ffab 	bl	8002c98 <firmware_update_configurations_read>
            #if ETX_OTA_VERBOSE
                printf("DONE: Firmware Update Configurations sub-module has been successfully initialized.\r\n");
            #endif

            return;
 8003d42:	e009      	b.n	8003d58 <custom_firmware_update_config_init+0x5c>
        }
        #if ETX_OTA_VERBOSE
            printf("WARNING: The Firmware Update Configurations sub-module could not be initialized at attempt %d...\r\n", attempts);
        #endif
    }
    while(attempts < 3);
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d9dd      	bls.n	8003d06 <custom_firmware_update_config_init+0xa>

    #if ETX_OTA_VERBOSE
        printf("ERROR: The Firmware Update Configurations sub-module could not be initialized. Our MCU/MPU will halt!.\r\n");
    #endif
    HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d50:	4804      	ldr	r0, [pc, #16]	; (8003d64 <custom_firmware_update_config_init+0x68>)
 8003d52:	f000 ffb6 	bl	8004cc2 <HAL_GPIO_WritePin>
    while (1);
 8003d56:	e7fe      	b.n	8003d56 <custom_firmware_update_config_init+0x5a>
}
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200005c8 	.word	0x200005c8
 8003d64:	40011000 	.word	0x40011000

08003d68 <custom_init_etx_ota_protocol_module>:

static void custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol hw_protocol, UART_HandleTypeDef *p_huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
    ETX_OTA_Status ret;

    #if ETX_OTA_VERBOSE
        printf("Initializing the ETX OTA Firmware Update Module.\r\n");
    #endif
    GPIO_is_hm10_default_settings.GPIO_Port = GPIO_is_hm10_default_settings_Port;
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <custom_init_etx_ota_protocol_module+0x48>)
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <custom_init_etx_ota_protocol_module+0x4c>)
 8003d78:	601a      	str	r2, [r3, #0]
    GPIO_is_hm10_default_settings.GPIO_Pin = GPIO_is_hm10_default_settings_Pin;
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <custom_init_etx_ota_protocol_module+0x48>)
 8003d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d80:	809a      	strh	r2, [r3, #4]

    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings);
 8003d82:	79f8      	ldrb	r0, [r7, #7]
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <custom_init_etx_ota_protocol_module+0x48>)
 8003d86:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <custom_init_etx_ota_protocol_module+0x50>)
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	f7fe f9df 	bl	800214c <init_firmware_update_module>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	73fb      	strb	r3, [r7, #15]
    if (ret != ETX_OTA_EC_OK)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d006      	beq.n	8003da6 <custom_init_etx_ota_protocol_module+0x3e>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The ETX OTA Firmware Update Module could not be initialized. Our MCU/MPU will halt!.\r\n");
        #endif
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d9e:	4805      	ldr	r0, [pc, #20]	; (8003db4 <custom_init_etx_ota_protocol_module+0x4c>)
 8003da0:	f000 ff8f 	bl	8004cc2 <HAL_GPIO_WritePin>
        while (1);
 8003da4:	e7fe      	b.n	8003da4 <custom_init_etx_ota_protocol_module+0x3c>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The ETX OTA Firmware Update Module has been successfully initialized.\r\n");
    #endif
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200005e0 	.word	0x200005e0
 8003db4:	40011000 	.word	0x40011000
 8003db8:	200005c8 	.word	0x200005c8

08003dbc <validate_bootloader_firmware>:

static void validate_bootloader_firmware(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
    #if ETX_OTA_VERBOSE
        printf("Validating the Bootloader Firmware of our MCU/MPU...\r\n");
    #endif
    if (fw_config.BL_fw_rec_crc != DATA_BLOCK_32BIT_ERASED_VALUE)
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <validate_bootloader_firmware+0x40>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d012      	beq.n	8003df2 <validate_bootloader_firmware+0x36>
    {
        /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Bootloader Firmware. */
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) BOOTLOADER_FIRMWARE_ADDRESS, fw_config.BL_fw_size);
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <validate_bootloader_firmware+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	480b      	ldr	r0, [pc, #44]	; (8003e00 <validate_bootloader_firmware+0x44>)
 8003dd4:	f7fe fed4 	bl	8002b80 <crc32_mpeg2>
 8003dd8:	6078      	str	r0, [r7, #4]

        if (cal_crc != fw_config.BL_fw_rec_crc)
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <validate_bootloader_firmware+0x40>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d006      	beq.n	8003df2 <validate_bootloader_firmware+0x36>
            #if ETX_OTA_VERBOSE
                printf("The recorded 32-bit CRC of the installed Bootloader Firmware mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
                       (unsigned int) cal_crc, (unsigned int) fw_config.BL_fw_rec_crc);
                printf("ERROR: The Bootloader Firmware currently installed in our MCU/MPU is corrupted. Our MCU/MPU will halt!.\r\n");
            #endif
            HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dea:	4806      	ldr	r0, [pc, #24]	; (8003e04 <validate_bootloader_firmware+0x48>)
 8003dec:	f000 ff69 	bl	8004cc2 <HAL_GPIO_WritePin>
            while (1);
 8003df0:	e7fe      	b.n	8003df0 <validate_bootloader_firmware+0x34>
        }
    }
	#if ETX_OTA_VERBOSE
		printf("DONE: Bootloader Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200005c8 	.word	0x200005c8
 8003e00:	08002000 	.word	0x08002000
 8003e04:	40011000 	.word	0x40011000

08003e08 <validate_application_firmware>:

static void validate_application_firmware(uint8_t *is_app_fw_validation_ok)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    #if ETX_OTA_VERBOSE
        printf("Validating the Application Firmware of our MCU/MPU...\r\n");
    #endif
    if ((fw_config.App_fw_rec_crc==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <validate_application_firmware+0x64>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d008      	beq.n	8003e2c <validate_application_firmware+0x24>
 8003e1a:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <validate_application_firmware+0x64>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d003      	beq.n	8003e2c <validate_application_firmware+0x24>
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <validate_application_firmware+0x64>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <validate_application_firmware+0x2c>
    {
        #if ETX_OTA_VERBOSE
            printf("WARNING: No Application Firmware has been identified to be installed in our MCU/MPU.\r\n");
        #endif
        *is_app_fw_validation_ok = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
        }
    }
    #if ETX_OTA_VERBOSE
		printf("DONE: Application Firmware of our MCU/MPU has been successfully validated.\r\n");
	#endif
}
 8003e32:	e016      	b.n	8003e62 <validate_application_firmware+0x5a>
    else if (fw_config.is_bl_fw_stored_in_app_fw == BT_FW_STORED_IN_APP_FW)
 8003e34:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <validate_application_firmware+0x64>)
 8003e36:	7d9b      	ldrb	r3, [r3, #22]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d103      	bne.n	8003e44 <validate_application_firmware+0x3c>
        *is_app_fw_validation_ok = 0;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
}
 8003e42:	e00e      	b.n	8003e62 <validate_application_firmware+0x5a>
        uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <validate_application_firmware+0x64>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4809      	ldr	r0, [pc, #36]	; (8003e70 <validate_application_firmware+0x68>)
 8003e4c:	f7fe fe98 	bl	8002b80 <crc32_mpeg2>
 8003e50:	60f8      	str	r0, [r7, #12]
        if (cal_crc != fw_config.App_fw_rec_crc)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <validate_application_firmware+0x64>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d002      	beq.n	8003e62 <validate_application_firmware+0x5a>
            *is_app_fw_validation_ok = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200005c8 	.word	0x200005c8
 8003e70:	08008000 	.word	0x08008000

08003e74 <HAL_uart_rx_flush>:

static void HAL_uart_rx_flush(UART_HandleTypeDef *p_huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef  ret;
    /** <b>Local variable buff:</b> @ref uint8_t Type variable used to temporarily hold an available byte of data from the UART from which it is desired to flush its Rx. */
    uint8_t buff;

    /* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
    ret = HAL_UART_Receive(p_huart, &buff, 1, 1);
 8003e7c:	f107 010e 	add.w	r1, r7, #14
 8003e80:	2301      	movs	r3, #1
 8003e82:	2201      	movs	r2, #1
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f001 fc18 	bl	80056ba <HAL_UART_Receive>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_TIMEOUT)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d002      	beq.n	8003e9a <HAL_uart_rx_flush+0x26>
    {
        HAL_uart_rx_flush(p_huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ffed 	bl	8003e74 <HAL_uart_rx_flush>
    }
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <goto_application_firmware>:

static void goto_application_firmware(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
	/* Create function pointer with no arguments that points to the Memory Location Address of the Reset Handler of the Application Firmware. */
	#if ETX_OTA_VERBOSE
		printf("Jumping into Application Firmware\r\n");
	#endif
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (APPLICATION_FIRMWARE_RESET_HANDLER_ADDRESS));
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <goto_application_firmware+0x18>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	607b      	str	r3, [r7, #4]
	/* NOTE: Some MCUs might have already the ASM code available so that the Main Stack Pointer (MSP) is recycled, but this is not the case for all MCUs. */
	/* Therefore, if you were to need to do this from scratch, you would have to do the following: */
	//__set_MSP( ( *(volatile uint32_t *) APPLICATION_FIRMWARE_ADDRESS );

	/* Call the Application's Reset Handler. */
	app_reset_handler();
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4798      	blx	r3
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08008004 	.word	0x08008004

08003ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec4:	b672      	cpsid	i
}
 8003ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <Error_Handler+0x8>
	...

08003ecc <HAL_MspInit>:
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_MspInit+0x40>)
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_MspInit+0x40>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6193      	str	r3, [r2, #24]
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_MspInit+0x40>)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_MspInit+0x40>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_MspInit+0x40>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	61d3      	str	r3, [r2, #28]
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_MspInit+0x40>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_UART_MspInit>:
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08c      	sub	sp, #48	; 0x30
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	f107 0320 	add.w	r3, r7, #32
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a53      	ldr	r2, [pc, #332]	; (8004078 <HAL_UART_MspInit+0x168>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d132      	bne.n	8003f96 <HAL_UART_MspInit+0x86>
 8003f30:	4b52      	ldr	r3, [pc, #328]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4a51      	ldr	r2, [pc, #324]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3a:	6193      	str	r3, [r2, #24]
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4b4c      	ldr	r3, [pc, #304]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	6193      	str	r3, [r2, #24]
 8003f54:	4b49      	ldr	r3, [pc, #292]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	2302      	movs	r3, #2
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	f107 0320 	add.w	r3, r7, #32
 8003f72:	4619      	mov	r1, r3
 8003f74:	4842      	ldr	r0, [pc, #264]	; (8004080 <HAL_UART_MspInit+0x170>)
 8003f76:	f000 fd09 	bl	800498c <HAL_GPIO_Init>
 8003f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	2300      	movs	r3, #0
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f88:	f107 0320 	add.w	r3, r7, #32
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	483c      	ldr	r0, [pc, #240]	; (8004080 <HAL_UART_MspInit+0x170>)
 8003f90:	f000 fcfc 	bl	800498c <HAL_GPIO_Init>
 8003f94:	e06c      	b.n	8004070 <HAL_UART_MspInit+0x160>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3a      	ldr	r2, [pc, #232]	; (8004084 <HAL_UART_MspInit+0x174>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d130      	bne.n	8004002 <HAL_UART_MspInit+0xf2>
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4a35      	ldr	r2, [pc, #212]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003faa:	61d3      	str	r3, [r2, #28]
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a2f      	ldr	r2, [pc, #188]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_UART_MspInit+0x16c>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	2303      	movs	r3, #3
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fdc:	f107 0320 	add.w	r3, r7, #32
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4827      	ldr	r0, [pc, #156]	; (8004080 <HAL_UART_MspInit+0x170>)
 8003fe4:	f000 fcd2 	bl	800498c <HAL_GPIO_Init>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	f107 0320 	add.w	r3, r7, #32
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4821      	ldr	r0, [pc, #132]	; (8004080 <HAL_UART_MspInit+0x170>)
 8003ffc:	f000 fcc6 	bl	800498c <HAL_GPIO_Init>
 8004000:	e036      	b.n	8004070 <HAL_UART_MspInit+0x160>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a20      	ldr	r2, [pc, #128]	; (8004088 <HAL_UART_MspInit+0x178>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d131      	bne.n	8004070 <HAL_UART_MspInit+0x160>
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_UART_MspInit+0x16c>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_UART_MspInit+0x16c>)
 8004012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004016:	61d3      	str	r3, [r2, #28]
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_UART_MspInit+0x16c>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_UART_MspInit+0x16c>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_UART_MspInit+0x16c>)
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	6193      	str	r3, [r2, #24]
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_UART_MspInit+0x16c>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	2302      	movs	r3, #2
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	2303      	movs	r3, #3
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	f107 0320 	add.w	r3, r7, #32
 800404e:	4619      	mov	r1, r3
 8004050:	480e      	ldr	r0, [pc, #56]	; (800408c <HAL_UART_MspInit+0x17c>)
 8004052:	f000 fc9b 	bl	800498c <HAL_GPIO_Init>
 8004056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	2300      	movs	r3, #0
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
 8004064:	f107 0320 	add.w	r3, r7, #32
 8004068:	4619      	mov	r1, r3
 800406a:	4808      	ldr	r0, [pc, #32]	; (800408c <HAL_UART_MspInit+0x17c>)
 800406c:	f000 fc8e 	bl	800498c <HAL_GPIO_Init>
 8004070:	bf00      	nop
 8004072:	3730      	adds	r7, #48	; 0x30
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40013800 	.word	0x40013800
 800407c:	40021000 	.word	0x40021000
 8004080:	40010800 	.word	0x40010800
 8004084:	40004400 	.word	0x40004400
 8004088:	40004800 	.word	0x40004800
 800408c:	40010c00 	.word	0x40010c00

08004090 <NMI_Handler>:
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
 8004094:	e7fe      	b.n	8004094 <NMI_Handler+0x4>

08004096 <HardFault_Handler>:
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0
 800409a:	e7fe      	b.n	800409a <HardFault_Handler+0x4>

0800409c <MemManage_Handler>:
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
 80040a0:	e7fe      	b.n	80040a0 <MemManage_Handler+0x4>

080040a2 <BusFault_Handler>:
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	e7fe      	b.n	80040a6 <BusFault_Handler+0x4>

080040a8 <UsageFault_Handler>:
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	e7fe      	b.n	80040ac <UsageFault_Handler+0x4>

080040ae <SVC_Handler>:
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <DebugMon_Handler>:
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <PendSV_Handler>:
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <SysTick_Handler>:
 80040d2:	b580      	push	{r7, lr}
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	f000 f91b 	bl	8004310 <HAL_IncTick>
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}

080040de <_read>:
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e00a      	b.n	8004106 <_read+0x28>
 80040f0:	f3af 8000 	nop.w
 80040f4:	4601      	mov	r1, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	60ba      	str	r2, [r7, #8]
 80040fc:	b2ca      	uxtb	r2, r1
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	dbf0      	blt.n	80040f0 <_read+0x12>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_write>:
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e009      	b.n	800413e <_write+0x26>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	60ba      	str	r2, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fdd0 	bl	8003cd8 <__io_putchar>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	dbf1      	blt.n	800412a <_write+0x12>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <_close>:
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <_fstat>:
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	2300      	movs	r3, #0
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <_isatty>:
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <_lseek>:
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	2300      	movs	r3, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <_sbrk>:
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <_sbrk+0x5c>)
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <_sbrk+0x60>)
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <_sbrk+0x22>
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <_sbrk+0x64>)
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <_sbrk+0x68>)
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <_sbrk+0x64>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d207      	bcs.n	80041f0 <_sbrk+0x40>
 80041e0:	f001 fe3e 	bl	8005e60 <__errno>
 80041e4:	4603      	mov	r3, r0
 80041e6:	220c      	movs	r2, #12
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e009      	b.n	8004204 <_sbrk+0x54>
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <_sbrk+0x64>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_sbrk+0x64>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <_sbrk+0x64>)
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20005000 	.word	0x20005000
 8004210:	00000400 	.word	0x00000400
 8004214:	200005e8 	.word	0x200005e8
 8004218:	20000760 	.word	0x20000760

0800421c <SystemInit>:
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit (void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <SystemInit+0x14>)
 8004222:	4a04      	ldr	r2, [pc, #16]	; (8004234 <SystemInit+0x18>)
 8004224:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00
 8004234:	08002000 	.word	0x08002000

08004238 <Reset_Handler>:
 8004238:	f7ff fff0 	bl	800421c <SystemInit>
 800423c:	480b      	ldr	r0, [pc, #44]	; (800426c <LoopFillZerobss+0xe>)
 800423e:	490c      	ldr	r1, [pc, #48]	; (8004270 <LoopFillZerobss+0x12>)
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <LoopFillZerobss+0x16>)
 8004242:	2300      	movs	r3, #0
 8004244:	e002      	b.n	800424c <LoopCopyDataInit>

08004246 <CopyDataInit>:
 8004246:	58d4      	ldr	r4, [r2, r3]
 8004248:	50c4      	str	r4, [r0, r3]
 800424a:	3304      	adds	r3, #4

0800424c <LoopCopyDataInit>:
 800424c:	18c4      	adds	r4, r0, r3
 800424e:	428c      	cmp	r4, r1
 8004250:	d3f9      	bcc.n	8004246 <CopyDataInit>
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <LoopFillZerobss+0x1a>)
 8004254:	4c09      	ldr	r4, [pc, #36]	; (800427c <LoopFillZerobss+0x1e>)
 8004256:	2300      	movs	r3, #0
 8004258:	e001      	b.n	800425e <LoopFillZerobss>

0800425a <FillZerobss>:
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	3204      	adds	r2, #4

0800425e <LoopFillZerobss>:
 800425e:	42a2      	cmp	r2, r4
 8004260:	d3fb      	bcc.n	800425a <FillZerobss>
 8004262:	f001 fe03 	bl	8005e6c <__libc_init_array>
 8004266:	f7ff fb9f 	bl	80039a8 <main>
 800426a:	4770      	bx	lr
 800426c:	20000000 	.word	0x20000000
 8004270:	20000098 	.word	0x20000098
 8004274:	08006ddc 	.word	0x08006ddc
 8004278:	20000098 	.word	0x20000098
 800427c:	2000075c 	.word	0x2000075c

08004280 <ADC1_2_IRQHandler>:
 8004280:	e7fe      	b.n	8004280 <ADC1_2_IRQHandler>
	...

08004284 <HAL_Init>:
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_Init+0x28>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <HAL_Init+0x28>)
 800428e:	f043 0310 	orr.w	r3, r3, #16
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	2003      	movs	r0, #3
 8004296:	f000 f941 	bl	800451c <HAL_NVIC_SetPriorityGrouping>
 800429a:	200f      	movs	r0, #15
 800429c:	f000 f808 	bl	80042b0 <HAL_InitTick>
 80042a0:	f7ff fe14 	bl	8003ecc <HAL_MspInit>
 80042a4:	2300      	movs	r3, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40022000 	.word	0x40022000

080042b0 <HAL_InitTick>:
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_InitTick+0x54>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_InitTick+0x58>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f94f 	bl	8004572 <HAL_SYSTICK_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_InitTick+0x2e>
 80042da:	2301      	movs	r3, #1
 80042dc:	e00e      	b.n	80042fc <HAL_InitTick+0x4c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d80a      	bhi.n	80042fa <HAL_InitTick+0x4a>
 80042e4:	2200      	movs	r2, #0
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f000 f921 	bl	8004532 <HAL_NVIC_SetPriority>
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <HAL_InitTick+0x5c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <HAL_InitTick+0x4c>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000030 	.word	0x20000030
 8004308:	20000038 	.word	0x20000038
 800430c:	20000034 	.word	0x20000034

08004310 <HAL_IncTick>:
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_IncTick+0x1c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_IncTick+0x20>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4413      	add	r3, r2
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <HAL_IncTick+0x20>)
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000038 	.word	0x20000038
 8004330:	200005ec 	.word	0x200005ec

08004334 <HAL_GetTick>:
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <HAL_GetTick+0x10>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	200005ec 	.word	0x200005ec

08004348 <HAL_Delay>:
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	f7ff fff0 	bl	8004334 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d005      	beq.n	800436e <HAL_Delay+0x26>
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_Delay+0x44>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	bf00      	nop
 8004370:	f7ff ffe0 	bl	8004334 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d8f7      	bhi.n	8004370 <HAL_Delay+0x28>
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000038 	.word	0x20000038

08004390 <__NVIC_SetPriorityGrouping>:
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ac:	4013      	ands	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	021a      	lsls	r2, r3, #8
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	60d3      	str	r3, [r2, #12]
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_GetPriorityGrouping>:
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <__NVIC_GetPriorityGrouping+0x18>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_SetPriority>:
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	6039      	str	r1, [r7, #0]
 80043fe:	71fb      	strb	r3, [r7, #7]
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	2b00      	cmp	r3, #0
 8004406:	db0a      	blt.n	800441e <__NVIC_SetPriority+0x2a>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	490c      	ldr	r1, [pc, #48]	; (8004440 <__NVIC_SetPriority+0x4c>)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	440b      	add	r3, r1
 8004418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800441c:	e00a      	b.n	8004434 <__NVIC_SetPriority+0x40>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4908      	ldr	r1, [pc, #32]	; (8004444 <__NVIC_SetPriority+0x50>)
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	3b04      	subs	r3, #4
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	440b      	add	r3, r1
 8004432:	761a      	strb	r2, [r3, #24]
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e100 	.word	0xe000e100
 8004444:	e000ed00 	.word	0xe000ed00

08004448 <NVIC_EncodePriority>:
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f1c3 0307 	rsb	r3, r3, #7
 8004462:	2b04      	cmp	r3, #4
 8004464:	bf28      	it	cs
 8004466:	2304      	movcs	r3, #4
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	3304      	adds	r3, #4
 800446e:	2b06      	cmp	r3, #6
 8004470:	d902      	bls.n	8004478 <NVIC_EncodePriority+0x30>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3b03      	subs	r3, #3
 8004476:	e000      	b.n	800447a <NVIC_EncodePriority+0x32>
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 32ff 	mov.w	r2, #4294967295
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43da      	mvns	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	401a      	ands	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	409a      	lsls	r2, r3
 8004490:	f04f 31ff 	mov.w	r1, #4294967295
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	43d9      	mvns	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	400b      	ands	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <__NVIC_SystemReset>:
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	bf00      	nop
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <__NVIC_SystemReset+0x24>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044be:	4904      	ldr	r1, [pc, #16]	; (80044d0 <__NVIC_SystemReset+0x24>)
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__NVIC_SystemReset+0x28>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <__NVIC_SystemReset+0x20>
 80044d0:	e000ed00 	.word	0xe000ed00
 80044d4:	05fa0004 	.word	0x05fa0004

080044d8 <SysTick_Config>:
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e8:	d301      	bcc.n	80044ee <SysTick_Config+0x16>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00f      	b.n	800450e <SysTick_Config+0x36>
 80044ee:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <SysTick_Config+0x40>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	6053      	str	r3, [r2, #4]
 80044f6:	210f      	movs	r1, #15
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	f7ff ff7a 	bl	80043f4 <__NVIC_SetPriority>
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <SysTick_Config+0x40>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <SysTick_Config+0x40>)
 8004508:	2207      	movs	r2, #7
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	2300      	movs	r3, #0
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	e000e010 	.word	0xe000e010

0800451c <HAL_NVIC_SetPriorityGrouping>:
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff33 	bl	8004390 <__NVIC_SetPriorityGrouping>
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_NVIC_SetPriority>:
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	f7ff ff48 	bl	80043d8 <__NVIC_GetPriorityGrouping>
 8004548:	6178      	str	r0, [r7, #20]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff ff7a 	bl	8004448 <NVIC_EncodePriority>
 8004554:	4602      	mov	r2, r0
 8004556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff49 	bl	80043f4 <__NVIC_SetPriority>
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_NVIC_SystemReset>:
 800456a:	b580      	push	{r7, lr}
 800456c:	af00      	add	r7, sp, #0
 800456e:	f7ff ff9d 	bl	80044ac <__NVIC_SystemReset>

08004572 <HAL_SYSTICK_Config>:
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffac 	bl	80044d8 <SysTick_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_FLASH_Program>:
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	e9c7 2300 	strd	r2, r3, [r7]
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	2300      	movs	r3, #0
 80045a0:	75bb      	strb	r3, [r7, #22]
 80045a2:	2300      	movs	r3, #0
 80045a4:	757b      	strb	r3, [r7, #21]
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <HAL_FLASH_Program+0xd8>)
 80045a8:	7e1b      	ldrb	r3, [r3, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_FLASH_Program+0x26>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e054      	b.n	800465c <HAL_FLASH_Program+0xd0>
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <HAL_FLASH_Program+0xd8>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	761a      	strb	r2, [r3, #24]
 80045b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045bc:	f000 f8a8 	bl	8004710 <FLASH_WaitForLastOperation>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d144      	bne.n	8004654 <HAL_FLASH_Program+0xc8>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <HAL_FLASH_Program+0x4a>
 80045d0:	2301      	movs	r3, #1
 80045d2:	757b      	strb	r3, [r7, #21]
 80045d4:	e007      	b.n	80045e6 <HAL_FLASH_Program+0x5a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d102      	bne.n	80045e2 <HAL_FLASH_Program+0x56>
 80045dc:	2302      	movs	r3, #2
 80045de:	757b      	strb	r3, [r7, #21]
 80045e0:	e001      	b.n	80045e6 <HAL_FLASH_Program+0x5a>
 80045e2:	2304      	movs	r3, #4
 80045e4:	757b      	strb	r3, [r7, #21]
 80045e6:	2300      	movs	r3, #0
 80045e8:	75bb      	strb	r3, [r7, #22]
 80045ea:	e02d      	b.n	8004648 <HAL_FLASH_Program+0xbc>
 80045ec:	7dbb      	ldrb	r3, [r7, #22]
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	eb02 0c03 	add.w	ip, r2, r3
 80045f6:	7dbb      	ldrb	r3, [r7, #22]
 80045f8:	0119      	lsls	r1, r3, #4
 80045fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045fe:	f1c1 0620 	rsb	r6, r1, #32
 8004602:	f1a1 0020 	sub.w	r0, r1, #32
 8004606:	fa22 f401 	lsr.w	r4, r2, r1
 800460a:	fa03 f606 	lsl.w	r6, r3, r6
 800460e:	4334      	orrs	r4, r6
 8004610:	fa23 f000 	lsr.w	r0, r3, r0
 8004614:	4304      	orrs	r4, r0
 8004616:	fa23 f501 	lsr.w	r5, r3, r1
 800461a:	b2a3      	uxth	r3, r4
 800461c:	4619      	mov	r1, r3
 800461e:	4660      	mov	r0, ip
 8004620:	f000 f85a 	bl	80046d8 <FLASH_Program_HalfWord>
 8004624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004628:	f000 f872 	bl	8004710 <FLASH_WaitForLastOperation>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]
 8004630:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <HAL_FLASH_Program+0xdc>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <HAL_FLASH_Program+0xdc>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	6113      	str	r3, [r2, #16]
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <HAL_FLASH_Program+0xc6>
 8004642:	7dbb      	ldrb	r3, [r7, #22]
 8004644:	3301      	adds	r3, #1
 8004646:	75bb      	strb	r3, [r7, #22]
 8004648:	7dba      	ldrb	r2, [r7, #22]
 800464a:	7d7b      	ldrb	r3, [r7, #21]
 800464c:	429a      	cmp	r2, r3
 800464e:	d3cd      	bcc.n	80045ec <HAL_FLASH_Program+0x60>
 8004650:	e000      	b.n	8004654 <HAL_FLASH_Program+0xc8>
 8004652:	bf00      	nop
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_FLASH_Program+0xd8>)
 8004656:	2200      	movs	r2, #0
 8004658:	761a      	strb	r2, [r3, #24]
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004664:	200005f0 	.word	0x200005f0
 8004668:	40022000 	.word	0x40022000

0800466c <HAL_FLASH_Unlock>:
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	2300      	movs	r3, #0
 8004674:	71fb      	strb	r3, [r7, #7]
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <HAL_FLASH_Unlock+0x40>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <HAL_FLASH_Unlock+0x32>
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_FLASH_Unlock+0x40>)
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_FLASH_Unlock+0x44>)
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_FLASH_Unlock+0x40>)
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <HAL_FLASH_Unlock+0x48>)
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_FLASH_Unlock+0x40>)
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_FLASH_Unlock+0x32>
 800469a:	2301      	movs	r3, #1
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40022000 	.word	0x40022000
 80046b0:	45670123 	.word	0x45670123
 80046b4:	cdef89ab 	.word	0xcdef89ab

080046b8 <HAL_FLASH_Lock>:
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_FLASH_Lock+0x1c>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <HAL_FLASH_Lock+0x1c>)
 80046c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c6:	6113      	str	r3, [r2, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40022000 	.word	0x40022000

080046d8 <FLASH_Program_HalfWord>:
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <FLASH_Program_HalfWord+0x30>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <FLASH_Program_HalfWord+0x34>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <FLASH_Program_HalfWord+0x34>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6113      	str	r3, [r2, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	887a      	ldrh	r2, [r7, #2]
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	200005f0 	.word	0x200005f0
 800470c:	40022000 	.word	0x40022000

08004710 <FLASH_WaitForLastOperation>:
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	f7ff fe0c 	bl	8004334 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	e010      	b.n	8004742 <FLASH_WaitForLastOperation+0x32>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d00c      	beq.n	8004742 <FLASH_WaitForLastOperation+0x32>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <FLASH_WaitForLastOperation+0x2e>
 800472e:	f7ff fe01 	bl	8004334 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d201      	bcs.n	8004742 <FLASH_WaitForLastOperation+0x32>
 800473e:	2303      	movs	r3, #3
 8004740:	e025      	b.n	800478e <FLASH_WaitForLastOperation+0x7e>
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e8      	bne.n	8004720 <FLASH_WaitForLastOperation+0x10>
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <FLASH_WaitForLastOperation+0x50>
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 800475c:	2220      	movs	r2, #32
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <FLASH_WaitForLastOperation+0x74>
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <FLASH_WaitForLastOperation+0x74>
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <FLASH_WaitForLastOperation+0x88>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <FLASH_WaitForLastOperation+0x7c>
 8004784:	f000 f80a 	bl	800479c <FLASH_SetErrorCode>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <FLASH_WaitForLastOperation+0x7e>
 800478c:	2300      	movs	r3, #0
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000

0800479c <FLASH_SetErrorCode>:
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <FLASH_SetErrorCode+0x98>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <FLASH_SetErrorCode+0x2a>
 80047b2:	4b21      	ldr	r3, [pc, #132]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047bc:	61d3      	str	r3, [r2, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <FLASH_SetErrorCode+0x98>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <FLASH_SetErrorCode+0x4a>
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047dc:	61d3      	str	r3, [r2, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <FLASH_SetErrorCode+0x98>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <FLASH_SetErrorCode+0x6e>
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <FLASH_SetErrorCode+0x9c>)
 80047fc:	61d3      	str	r3, [r2, #28]
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <FLASH_SetErrorCode+0x98>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <FLASH_SetErrorCode+0x98>)
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	61d3      	str	r3, [r2, #28]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f240 1201 	movw	r2, #257	; 0x101
 8004810:	4293      	cmp	r3, r2
 8004812:	d106      	bne.n	8004822 <FLASH_SetErrorCode+0x86>
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <FLASH_SetErrorCode+0x98>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4a06      	ldr	r2, [pc, #24]	; (8004834 <FLASH_SetErrorCode+0x98>)
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	61d3      	str	r3, [r2, #28]
 8004820:	e002      	b.n	8004828 <FLASH_SetErrorCode+0x8c>
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <FLASH_SetErrorCode+0x98>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60d3      	str	r3, [r2, #12]
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40022000 	.word	0x40022000
 8004838:	200005f0 	.word	0x200005f0

0800483c <HAL_FLASHEx_Erase>:
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	4b2f      	ldr	r3, [pc, #188]	; (800490c <HAL_FLASHEx_Erase+0xd0>)
 8004850:	7e1b      	ldrb	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_FLASHEx_Erase+0x1e>
 8004856:	2302      	movs	r3, #2
 8004858:	e053      	b.n	8004902 <HAL_FLASHEx_Erase+0xc6>
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_FLASHEx_Erase+0xd0>)
 800485c:	2201      	movs	r2, #1
 800485e:	761a      	strb	r2, [r3, #24]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d116      	bne.n	8004896 <HAL_FLASHEx_Erase+0x5a>
 8004868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800486c:	f7ff ff50 	bl	8004710 <FLASH_WaitForLastOperation>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d141      	bne.n	80048fa <HAL_FLASHEx_Erase+0xbe>
 8004876:	2001      	movs	r0, #1
 8004878:	f000 f84c 	bl	8004914 <FLASH_MassErase>
 800487c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004880:	f7ff ff46 	bl	8004710 <FLASH_WaitForLastOperation>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_FLASHEx_Erase+0xd4>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <HAL_FLASHEx_Erase+0xd4>)
 800488e:	f023 0304 	bic.w	r3, r3, #4
 8004892:	6113      	str	r3, [r2, #16]
 8004894:	e031      	b.n	80048fa <HAL_FLASHEx_Erase+0xbe>
 8004896:	f24c 3050 	movw	r0, #50000	; 0xc350
 800489a:	f7ff ff39 	bl	8004710 <FLASH_WaitForLastOperation>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d12a      	bne.n	80048fa <HAL_FLASHEx_Erase+0xbe>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	e019      	b.n	80048e8 <HAL_FLASHEx_Erase+0xac>
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f000 f849 	bl	800494c <FLASH_PageErase>
 80048ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048be:	f7ff ff27 	bl	8004710 <FLASH_WaitForLastOperation>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_FLASHEx_Erase+0xd4>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <HAL_FLASHEx_Erase+0xd4>)
 80048cc:	f023 0302 	bic.w	r3, r3, #2
 80048d0:	6113      	str	r3, [r2, #16]
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_FLASHEx_Erase+0xa4>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e00c      	b.n	80048fa <HAL_FLASHEx_Erase+0xbe>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	029a      	lsls	r2, r3, #10
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4413      	add	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3dc      	bcc.n	80048b4 <HAL_FLASHEx_Erase+0x78>
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <HAL_FLASHEx_Erase+0xd0>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	761a      	strb	r2, [r3, #24]
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200005f0 	.word	0x200005f0
 8004910:	40022000 	.word	0x40022000

08004914 <FLASH_MassErase>:
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <FLASH_MassErase+0x30>)
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <FLASH_MassErase+0x34>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <FLASH_MassErase+0x34>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6113      	str	r3, [r2, #16]
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <FLASH_MassErase+0x34>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4a05      	ldr	r2, [pc, #20]	; (8004948 <FLASH_MassErase+0x34>)
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	6113      	str	r3, [r2, #16]
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	200005f0 	.word	0x200005f0
 8004948:	40022000 	.word	0x40022000

0800494c <FLASH_PageErase>:
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <FLASH_PageErase+0x38>)
 8004956:	2200      	movs	r2, #0
 8004958:	61da      	str	r2, [r3, #28]
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <FLASH_PageErase+0x3c>)
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <FLASH_PageErase+0x3c>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6113      	str	r3, [r2, #16]
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <FLASH_PageErase+0x3c>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6153      	str	r3, [r2, #20]
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <FLASH_PageErase+0x3c>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a05      	ldr	r2, [pc, #20]	; (8004988 <FLASH_PageErase+0x3c>)
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	6113      	str	r3, [r2, #16]
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	200005f0 	.word	0x200005f0
 8004988:	40022000 	.word	0x40022000

0800498c <HAL_GPIO_Init>:
 800498c:	b480      	push	{r7}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	e169      	b.n	8004c74 <HAL_GPIO_Init+0x2e8>
 80049a0:	2201      	movs	r2, #1
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 8158 	bne.w	8004c6e <HAL_GPIO_Init+0x2e2>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4a9a      	ldr	r2, [pc, #616]	; (8004c2c <HAL_GPIO_Init+0x2a0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d05e      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049c8:	4a98      	ldr	r2, [pc, #608]	; (8004c2c <HAL_GPIO_Init+0x2a0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d875      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049ce:	4a98      	ldr	r2, [pc, #608]	; (8004c30 <HAL_GPIO_Init+0x2a4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d058      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049d4:	4a96      	ldr	r2, [pc, #600]	; (8004c30 <HAL_GPIO_Init+0x2a4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d86f      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049da:	4a96      	ldr	r2, [pc, #600]	; (8004c34 <HAL_GPIO_Init+0x2a8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d052      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049e0:	4a94      	ldr	r2, [pc, #592]	; (8004c34 <HAL_GPIO_Init+0x2a8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d869      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049e6:	4a94      	ldr	r2, [pc, #592]	; (8004c38 <HAL_GPIO_Init+0x2ac>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04c      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049ec:	4a92      	ldr	r2, [pc, #584]	; (8004c38 <HAL_GPIO_Init+0x2ac>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d863      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049f2:	4a92      	ldr	r2, [pc, #584]	; (8004c3c <HAL_GPIO_Init+0x2b0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d046      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 80049f8:	4a90      	ldr	r2, [pc, #576]	; (8004c3c <HAL_GPIO_Init+0x2b0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d85d      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 80049fe:	2b12      	cmp	r3, #18
 8004a00:	d82a      	bhi.n	8004a58 <HAL_GPIO_Init+0xcc>
 8004a02:	2b12      	cmp	r3, #18
 8004a04:	d859      	bhi.n	8004aba <HAL_GPIO_Init+0x12e>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_GPIO_Init+0x80>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a87 	.word	0x08004a87
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a73 	.word	0x08004a73
 8004a18:	08004ab5 	.word	0x08004ab5
 8004a1c:	08004abb 	.word	0x08004abb
 8004a20:	08004abb 	.word	0x08004abb
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004abb 	.word	0x08004abb
 8004a2c:	08004abb 	.word	0x08004abb
 8004a30:	08004abb 	.word	0x08004abb
 8004a34:	08004abb 	.word	0x08004abb
 8004a38:	08004abb 	.word	0x08004abb
 8004a3c:	08004abb 	.word	0x08004abb
 8004a40:	08004abb 	.word	0x08004abb
 8004a44:	08004abb 	.word	0x08004abb
 8004a48:	08004abb 	.word	0x08004abb
 8004a4c:	08004abb 	.word	0x08004abb
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	4a79      	ldr	r2, [pc, #484]	; (8004c40 <HAL_GPIO_Init+0x2b4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0xfa>
 8004a5e:	e02c      	b.n	8004aba <HAL_GPIO_Init+0x12e>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	e029      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	e024      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	3308      	adds	r3, #8
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	e01f      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	330c      	adds	r3, #12
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	e01a      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_GPIO_Init+0x108>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	e013      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_GPIO_Init+0x11c>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	611a      	str	r2, [r3, #16]
 8004aa6:	e009      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	615a      	str	r2, [r3, #20]
 8004ab2:	e003      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	e000      	b.n	8004abc <HAL_GPIO_Init+0x130>
 8004aba:	bf00      	nop
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2bff      	cmp	r3, #255	; 0xff
 8004ac0:	d801      	bhi.n	8004ac6 <HAL_GPIO_Init+0x13a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	e001      	b.n	8004aca <HAL_GPIO_Init+0x13e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2bff      	cmp	r3, #255	; 0xff
 8004ad0:	d802      	bhi.n	8004ad8 <HAL_GPIO_Init+0x14c>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	e002      	b.n	8004ade <HAL_GPIO_Init+0x152>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	3b08      	subs	r3, #8
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	6a39      	ldr	r1, [r7, #32]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	431a      	orrs	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80b1 	beq.w	8004c6e <HAL_GPIO_Init+0x2e2>
 8004b0c:	4b4d      	ldr	r3, [pc, #308]	; (8004c44 <HAL_GPIO_Init+0x2b8>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4a4c      	ldr	r2, [pc, #304]	; (8004c44 <HAL_GPIO_Init+0x2b8>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6193      	str	r3, [r2, #24]
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_GPIO_Init+0x2b8>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a48      	ldr	r2, [pc, #288]	; (8004c48 <HAL_GPIO_Init+0x2bc>)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a40      	ldr	r2, [pc, #256]	; (8004c4c <HAL_GPIO_Init+0x2c0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_GPIO_Init+0x1ec>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <HAL_GPIO_Init+0x2c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00d      	beq.n	8004b74 <HAL_GPIO_Init+0x1e8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3e      	ldr	r2, [pc, #248]	; (8004c54 <HAL_GPIO_Init+0x2c8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d007      	beq.n	8004b70 <HAL_GPIO_Init+0x1e4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <HAL_GPIO_Init+0x2cc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <HAL_GPIO_Init+0x1e0>
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e006      	b.n	8004b7a <HAL_GPIO_Init+0x1ee>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e004      	b.n	8004b7a <HAL_GPIO_Init+0x1ee>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e002      	b.n	8004b7a <HAL_GPIO_Init+0x1ee>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_GPIO_Init+0x1ee>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	f002 0203 	and.w	r2, r2, #3
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	4093      	lsls	r3, r2
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	492f      	ldr	r1, [pc, #188]	; (8004c48 <HAL_GPIO_Init+0x2bc>)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	3302      	adds	r3, #2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_GPIO_Init+0x226>
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	492c      	ldr	r1, [pc, #176]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x234>
 8004bb2:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	4928      	ldr	r1, [pc, #160]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <HAL_GPIO_Init+0x24e>
 8004bcc:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	4922      	ldr	r1, [pc, #136]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
 8004bd8:	e006      	b.n	8004be8 <HAL_GPIO_Init+0x25c>
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	491e      	ldr	r1, [pc, #120]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60cb      	str	r3, [r1, #12]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <HAL_GPIO_Init+0x276>
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4918      	ldr	r1, [pc, #96]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
 8004c00:	e006      	b.n	8004c10 <HAL_GPIO_Init+0x284>
 8004c02:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	4914      	ldr	r1, [pc, #80]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d021      	beq.n	8004c60 <HAL_GPIO_Init+0x2d4>
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	490e      	ldr	r1, [pc, #56]	; (8004c5c <HAL_GPIO_Init+0x2d0>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	e021      	b.n	8004c6e <HAL_GPIO_Init+0x2e2>
 8004c2a:	bf00      	nop
 8004c2c:	10320000 	.word	0x10320000
 8004c30:	10310000 	.word	0x10310000
 8004c34:	10220000 	.word	0x10220000
 8004c38:	10210000 	.word	0x10210000
 8004c3c:	10120000 	.word	0x10120000
 8004c40:	10110000 	.word	0x10110000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010800 	.word	0x40010800
 8004c50:	40010c00 	.word	0x40010c00
 8004c54:	40011000 	.word	0x40011000
 8004c58:	40011400 	.word	0x40011400
 8004c5c:	40010400 	.word	0x40010400
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_GPIO_Init+0x304>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	4909      	ldr	r1, [pc, #36]	; (8004c90 <HAL_GPIO_Init+0x304>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	3301      	adds	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f ae8e 	bne.w	80049a0 <HAL_GPIO_Init+0x14>
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	372c      	adds	r7, #44	; 0x2c
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	40010400 	.word	0x40010400

08004c94 <HAL_GPIO_ReadPin>:
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	887b      	ldrh	r3, [r7, #2]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_GPIO_ReadPin+0x1e>
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e001      	b.n	8004cb6 <HAL_GPIO_ReadPin+0x22>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_GPIO_WritePin>:
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	807b      	strh	r3, [r7, #2]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	707b      	strb	r3, [r7, #1]
 8004cd2:	787b      	ldrb	r3, [r7, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_WritePin+0x1e>
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]
 8004cde:	e003      	b.n	8004ce8 <HAL_GPIO_WritePin+0x26>
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	041a      	lsls	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_RCC_OscConfig>:
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e272      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8087 	beq.w	8004e22 <HAL_RCC_OscConfig+0x12e>
 8004d14:	4b92      	ldr	r3, [pc, #584]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d00c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x46>
 8004d20:	4b8f      	ldr	r3, [pc, #572]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d112      	bne.n	8004d52 <HAL_RCC_OscConfig+0x5e>
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCC_OscConfig+0x5e>
 8004d3a:	4b89      	ldr	r3, [pc, #548]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d06c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x12c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d168      	bne.n	8004e20 <HAL_RCC_OscConfig+0x12c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e24c      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCC_OscConfig+0x76>
 8004d5c:	4b80      	ldr	r3, [pc, #512]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a7f      	ldr	r2, [pc, #508]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e02e      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x98>
 8004d72:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7a      	ldr	r2, [pc, #488]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b78      	ldr	r3, [pc, #480]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a77      	ldr	r2, [pc, #476]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e01d      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0xbc>
 8004d96:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a71      	ldr	r2, [pc, #452]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a6e      	ldr	r2, [pc, #440]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004db0:	4b6b      	ldr	r3, [pc, #428]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6a      	ldr	r2, [pc, #424]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a67      	ldr	r2, [pc, #412]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <HAL_RCC_OscConfig+0x104>
 8004dd0:	f7ff fab0 	bl	8004334 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0xf6>
 8004dd8:	f7ff faac 	bl	8004334 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0xf6>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e200      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xe4>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x12e>
 8004df8:	f7ff fa9c 	bl	8004334 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x11e>
 8004e00:	f7ff fa98 	bl	8004334 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x11e>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1ec      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004e12:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x10c>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x12e>
 8004e20:	bf00      	nop
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x202>
 8004e2e:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x15e>
 8004e3a:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d11c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x18c>
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <HAL_RCC_OscConfig+0x18c>
 8004e52:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_RCC_OscConfig+0x176>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x176>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e1c0      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4939      	ldr	r1, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_OscConfig+0x1d6>
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f7ff fa51 	bl	8004334 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1b4>
 8004e96:	f7ff fa4d 	bl	8004334 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1b4>
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1a1      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1a2>
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4927      	ldr	r1, [pc, #156]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f7ff fa30 	bl	8004334 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x1f6>
 8004ed8:	f7ff fa2c 	bl	8004334 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x1f6>
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e180      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1e4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03a      	beq.n	8004f78 <HAL_RCC_OscConfig+0x284>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <HAL_RCC_OscConfig+0x24a>
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f7ff fa10 	bl	8004334 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x236>
 8004f18:	f7ff fa0c 	bl	8004334 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x236>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e160      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x224>
 8004f36:	2001      	movs	r0, #1
 8004f38:	f000 face 	bl	80054d8 <RCC_Delay>
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x284>
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f7ff f9f6 	bl	8004334 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]
 8004f4a:	e00f      	b.n	8004f6c <HAL_RCC_OscConfig+0x278>
 8004f4c:	f7ff f9f2 	bl	8004334 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d908      	bls.n	8004f6c <HAL_RCC_OscConfig+0x278>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e146      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	42420000 	.word	0x42420000
 8004f68:	42420480 	.word	0x42420480
 8004f6c:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e9      	bne.n	8004f4c <HAL_RCC_OscConfig+0x258>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a6 	beq.w	80050d2 <HAL_RCC_OscConfig+0x3de>
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
 8004f8a:	4b8b      	ldr	r3, [pc, #556]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x2be>
 8004f96:	4b88      	ldr	r3, [pc, #544]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4a87      	ldr	r2, [pc, #540]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	61d3      	str	r3, [r2, #28]
 8004fa2:	4b85      	ldr	r3, [pc, #532]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
 8004fb2:	4b82      	ldr	r3, [pc, #520]	; (80051bc <HAL_RCC_OscConfig+0x4c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2fc>
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <HAL_RCC_OscConfig+0x4c8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a7e      	ldr	r2, [pc, #504]	; (80051bc <HAL_RCC_OscConfig+0x4c8>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	f7ff f9b3 	bl	8004334 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
 8004fd2:	f7ff f9af 	bl	8004334 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e103      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8004fe4:	4b75      	ldr	r3, [pc, #468]	; (80051bc <HAL_RCC_OscConfig+0x4c8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2de>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x312>
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a6e      	ldr	r2, [pc, #440]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	e02d      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x334>
 800500e:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a69      	ldr	r2, [pc, #420]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a66      	ldr	r2, [pc, #408]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6213      	str	r3, [r2, #32]
 8005026:	e01c      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d10c      	bne.n	800504a <HAL_RCC_OscConfig+0x356>
 8005030:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4a60      	ldr	r2, [pc, #384]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6213      	str	r3, [r2, #32]
 800503c:	4b5e      	ldr	r3, [pc, #376]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4a5d      	ldr	r2, [pc, #372]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6213      	str	r3, [r2, #32]
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 800504a:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a5a      	ldr	r2, [pc, #360]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6213      	str	r3, [r2, #32]
 8005056:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a57      	ldr	r2, [pc, #348]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6213      	str	r3, [r2, #32]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d015      	beq.n	8005096 <HAL_RCC_OscConfig+0x3a2>
 800506a:	f7ff f963 	bl	8004334 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x394>
 8005072:	f7ff f95f 	bl	8004334 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x394>
 8005084:	2303      	movs	r3, #3
 8005086:	e0b1      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ee      	beq.n	8005072 <HAL_RCC_OscConfig+0x37e>
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x3cc>
 8005096:	f7ff f94d 	bl	8004334 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
 800509e:	f7ff f949 	bl	8004334 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
 80050b0:	2303      	movs	r3, #3
 80050b2:	e09b      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_OscConfig+0x3aa>
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3de>
 80050c6:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4a3b      	ldr	r2, [pc, #236]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	61d3      	str	r3, [r2, #28]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8087 	beq.w	80051ea <HAL_RCC_OscConfig+0x4f6>
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d061      	beq.n	80051ac <HAL_RCC_OscConfig+0x4b8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d146      	bne.n	800517e <HAL_RCC_OscConfig+0x48a>
 80050f0:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f7ff f91d 	bl	8004334 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x41c>
 80050fe:	f7ff f919 	bl	8004334 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x41c>
 800510c:	2303      	movs	r3, #3
 800510e:	e06d      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8005110:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x40a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005124:	d108      	bne.n	8005138 <HAL_RCC_OscConfig+0x444>
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4921      	ldr	r1, [pc, #132]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a19      	ldr	r1, [r3, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	430b      	orrs	r3, r1
 800514a:	491b      	ldr	r1, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f7ff f8ed 	bl	8004334 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x47c>
 800515e:	f7ff f8e9 	bl	8004334 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x47c>
 800516c:	2303      	movs	r3, #3
 800516e:	e03d      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x46a>
 800517c:	e035      	b.n	80051ea <HAL_RCC_OscConfig+0x4f6>
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f7ff f8d6 	bl	8004334 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x4aa>
 800518c:	f7ff f8d2 	bl	8004334 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x4aa>
 800519a:	2303      	movs	r3, #3
 800519c:	e026      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x498>
 80051aa:	e01e      	b.n	80051ea <HAL_RCC_OscConfig+0x4f6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4d0>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e019      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40007000 	.word	0x40007000
 80051c0:	42420060 	.word	0x42420060
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCC_OscConfig+0x500>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d106      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4f2>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x4f6>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_RCC_OscConfig+0x4f8>
 80051ea:	2300      	movs	r3, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_RCC_ClockConfig>:
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
 8005208:	2301      	movs	r3, #1
 800520a:	e0d0      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d910      	bls.n	800523c <HAL_RCC_ClockConfig+0x44>
 800521a:	4b67      	ldr	r3, [pc, #412]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	4965      	ldr	r1, [pc, #404]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
 800522a:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x44>
 8005238:	2301      	movs	r3, #1
 800523a:	e0b8      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_RCC_ClockConfig+0x92>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x68>
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 800525a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800525e:	6053      	str	r3, [r2, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x80>
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005276:	6053      	str	r3, [r2, #4]
 8005278:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	494d      	ldr	r1, [pc, #308]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	604b      	str	r3, [r1, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d040      	beq.n	8005318 <HAL_RCC_ClockConfig+0x120>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xb6>
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xce>
 80052b6:	4b41      	ldr	r3, [pc, #260]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e073      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 80052c6:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e06b      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 80052d6:	4b39      	ldr	r3, [pc, #228]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4936      	ldr	r1, [pc, #216]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]
 80052e8:	f7ff f824 	bl	8004334 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_ClockConfig+0x10e>
 80052f0:	f7ff f820 	bl	8004334 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x10e>
 8005302:	2303      	movs	r3, #3
 8005304:	e053      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 8005306:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 020c 	and.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	429a      	cmp	r2, r3
 8005316:	d1eb      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xf8>
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d210      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x150>
 8005326:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0207 	bic.w	r2, r3, #7
 800532e:	4922      	ldr	r1, [pc, #136]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x150>
 8005344:	2301      	movs	r3, #1
 8005346:	e032      	b.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RCC_ClockConfig+0x16e>
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4916      	ldr	r1, [pc, #88]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_RCC_ClockConfig+0x18e>
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	604b      	str	r3, [r1, #4]
 8005386:	f000 f821 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800538a:	4602      	mov	r2, r0
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	490a      	ldr	r1, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005398:	5ccb      	ldrb	r3, [r1, r3]
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1cc>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1d0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe ff82 	bl	80042b0 <HAL_InitTick>
 80053ac:	2300      	movs	r3, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40022000 	.word	0x40022000
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08006d74 	.word	0x08006d74
 80053c4:	20000030 	.word	0x20000030
 80053c8:	20000034 	.word	0x20000034

080053cc <HAL_RCC_GetSysClockFreq>:
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <HAL_RCC_GetSysClockFreq+0x94>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d002      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x30>
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x36>
 80053fa:	e027      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x80>
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCC_GetSysClockFreq+0x98>)
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e027      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x86>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	0c9b      	lsrs	r3, r3, #18
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_RCC_GetSysClockFreq+0x9c>)
 800540c:	5cd3      	ldrb	r3, [r2, r3]
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d010      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x70>
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_RCC_GetSysClockFreq+0x94>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	0c5b      	lsrs	r3, r3, #17
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	4a11      	ldr	r2, [pc, #68]	; (800546c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <HAL_RCC_GetSysClockFreq+0x98>)
 800542e:	fb03 f202 	mul.w	r2, r3, r2
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e004      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x7a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e002      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x86>
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetSysClockFreq+0x98>)
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	bf00      	nop
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
 8005464:	007a1200 	.word	0x007a1200
 8005468:	08006d8c 	.word	0x08006d8c
 800546c:	08006d9c 	.word	0x08006d9c
 8005470:	003d0900 	.word	0x003d0900

08005474 <HAL_RCC_GetHCLKFreq>:
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <HAL_RCC_GetHCLKFreq+0x10>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000030 	.word	0x20000030

08005488 <HAL_RCC_GetPCLK1Freq>:
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
 800548c:	f7ff fff2 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4903      	ldr	r1, [pc, #12]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	08006d84 	.word	0x08006d84

080054b0 <HAL_RCC_GetPCLK2Freq>:
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f7ff ffde 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	0adb      	lsrs	r3, r3, #11
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	4903      	ldr	r1, [pc, #12]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	4618      	mov	r0, r3
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	08006d84 	.word	0x08006d84

080054d8 <RCC_Delay>:
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <RCC_Delay+0x34>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <RCC_Delay+0x38>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a5b      	lsrs	r3, r3, #9
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	bf00      	nop
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	60fa      	str	r2, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f9      	bne.n	80054f4 <RCC_Delay+0x1c>
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	20000030 	.word	0x20000030
 8005510:	10624dd3 	.word	0x10624dd3

08005514 <HAL_UART_Init>:
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Init+0x12>
 8005522:	2301      	movs	r3, #1
 8005524:	e042      	b.n	80055ac <HAL_UART_Init+0x98>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_UART_Init+0x2c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fce8 	bl	8003f10 <HAL_UART_MspInit>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f9af 	bl	80058bc <UART_SetConfig>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556c:	611a      	str	r2, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557c:	615a      	str	r2, [r3, #20]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	635a      	str	r2, [r3, #52]	; 0x34
 80055aa:	2300      	movs	r3, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_Transmit>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d16d      	bne.n	80056b0 <HAL_UART_Transmit+0xfc>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Transmit+0x2c>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Transmit+0x30>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e066      	b.n	80056b2 <HAL_UART_Transmit+0xfe>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	; 0x21
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f2:	f7fe fe9f 	bl	8004334 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	849a      	strh	r2, [r3, #36]	; 0x24
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	84da      	strh	r2, [r3, #38]	; 0x26
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d108      	bne.n	8005620 <HAL_UART_Transmit+0x6c>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <HAL_UART_Transmit+0x6c>
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e003      	b.n	8005628 <HAL_UART_Transmit+0x74>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e02a      	b.n	8005680 <HAL_UART_Transmit+0xcc>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f8d2 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_Transmit+0x90>
 8005640:	2303      	movs	r3, #3
 8005642:	e036      	b.n	80056b2 <HAL_UART_Transmit+0xfe>
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_UART_Transmit+0xae>
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3302      	adds	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e007      	b.n	8005672 <HAL_UART_Transmit+0xbe>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1cf      	bne.n	800562a <HAL_UART_Transmit+0x76>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2140      	movs	r1, #64	; 0x40
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f8a2 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_Transmit+0xf0>
 80056a0:	2303      	movs	r3, #3
 80056a2:	e006      	b.n	80056b2 <HAL_UART_Transmit+0xfe>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_UART_Transmit+0xfe>
 80056b0:	2302      	movs	r3, #2
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_UART_Receive>:
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af02      	add	r7, sp, #8
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d17c      	bne.n	80057d4 <HAL_UART_Receive+0x11a>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_UART_Receive+0x2c>
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Receive+0x30>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e075      	b.n	80057d6 <HAL_UART_Receive+0x11c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	645a      	str	r2, [r3, #68]	; 0x44
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2222      	movs	r2, #34	; 0x22
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
 80056fe:	f7fe fe19 	bl	8004334 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	859a      	strh	r2, [r3, #44]	; 0x2c
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	d108      	bne.n	800572c <HAL_UART_Receive+0x72>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <HAL_UART_Receive+0x72>
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e003      	b.n	8005734 <HAL_UART_Receive+0x7a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e043      	b.n	80057be <HAL_UART_Receive+0x104>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2120      	movs	r1, #32
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f84c 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_Receive+0x96>
 800574c:	2303      	movs	r3, #3
 800574e:	e042      	b.n	80057d6 <HAL_UART_Receive+0x11c>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10c      	bne.n	8005770 <HAL_UART_Receive+0xb6>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	b29a      	uxth	r2, r3
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	3302      	adds	r3, #2
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	e01f      	b.n	80057b0 <HAL_UART_Receive+0xf6>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d007      	beq.n	800578a <HAL_UART_Receive+0xd0>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <HAL_UART_Receive+0xde>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_UART_Receive+0xde>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e008      	b.n	80057aa <HAL_UART_Receive+0xf0>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1b6      	bne.n	8005736 <HAL_UART_Receive+0x7c>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Receive+0x11c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <UART_WaitOnFlagUntilTimeout>:
 80057de:	b580      	push	{r7, lr}
 80057e0:	b090      	sub	sp, #64	; 0x40
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	e050      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xb4>
 80057f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d04c      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xb4>
 80057f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x30>
 80057fe:	f7fe fd99 	bl	8004334 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580a:	429a      	cmp	r2, r3
 800580c:	d241      	bcs.n	8005892 <UART_WaitOnFlagUntilTimeout+0xb4>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582e:	637a      	str	r2, [r7, #52]	; 0x34
 8005830:	633b      	str	r3, [r7, #48]	; 0x30
 8005832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x30>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3314      	adds	r3, #20
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005862:	623a      	str	r2, [r7, #32]
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	69f9      	ldr	r1, [r7, #28]
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0x64>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588e:	2303      	movs	r3, #3
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xd4>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d09f      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x12>
 80058b0:	2300      	movs	r3, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	3740      	adds	r7, #64	; 0x40
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <UART_SetConfig>:
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058f6:	f023 030c 	bic.w	r3, r3, #12
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	430b      	orrs	r3, r1
 8005902:	60d3      	str	r3, [r2, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	615a      	str	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <UART_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d103      	bne.n	800592c <UART_SetConfig+0x70>
 8005924:	f7ff fdc4 	bl	80054b0 <HAL_RCC_GetPCLK2Freq>
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	e002      	b.n	8005932 <UART_SetConfig+0x76>
 800592c:	f7ff fdac 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <UART_SetConfig+0x118>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	0119      	lsls	r1, r3, #4
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009a      	lsls	r2, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fbb2 f2f3 	udiv	r2, r2, r3
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <UART_SetConfig+0x118>)
 800596a:	fba3 0302 	umull	r0, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	fb00 f303 	mul.w	r3, r0, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <UART_SetConfig+0x118>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	4419      	add	r1, r3
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <UART_SetConfig+0x118>)
 80059a2:	fba3 0302 	umull	r0, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2064      	movs	r0, #100	; 0x64
 80059aa:	fb00 f303 	mul.w	r3, r0, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <UART_SetConfig+0x118>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	440a      	add	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40013800 	.word	0x40013800
 80059d4:	51eb851f 	.word	0x51eb851f

080059d8 <std>:
 80059d8:	2300      	movs	r3, #0
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	e9c0 3300 	strd	r3, r3, [r0]
 80059e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059e6:	6083      	str	r3, [r0, #8]
 80059e8:	8181      	strh	r1, [r0, #12]
 80059ea:	6643      	str	r3, [r0, #100]	; 0x64
 80059ec:	81c2      	strh	r2, [r0, #14]
 80059ee:	6183      	str	r3, [r0, #24]
 80059f0:	4619      	mov	r1, r3
 80059f2:	2208      	movs	r2, #8
 80059f4:	305c      	adds	r0, #92	; 0x5c
 80059f6:	f000 f9e5 	bl	8005dc4 <memset>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <std+0x38>)
 80059fc:	6224      	str	r4, [r4, #32]
 80059fe:	6263      	str	r3, [r4, #36]	; 0x24
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <std+0x3c>)
 8005a02:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <std+0x40>)
 8005a06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <std+0x44>)
 8005a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	bf00      	nop
 8005a10:	08005c15 	.word	0x08005c15
 8005a14:	08005c37 	.word	0x08005c37
 8005a18:	08005c6f 	.word	0x08005c6f
 8005a1c:	08005c93 	.word	0x08005c93

08005a20 <stdio_exit_handler>:
 8005a20:	4a02      	ldr	r2, [pc, #8]	; (8005a2c <stdio_exit_handler+0xc>)
 8005a22:	4903      	ldr	r1, [pc, #12]	; (8005a30 <stdio_exit_handler+0x10>)
 8005a24:	4803      	ldr	r0, [pc, #12]	; (8005a34 <stdio_exit_handler+0x14>)
 8005a26:	f000 b869 	b.w	8005afc <_fwalk_sglue>
 8005a2a:	bf00      	nop
 8005a2c:	2000003c 	.word	0x2000003c
 8005a30:	0800676d 	.word	0x0800676d
 8005a34:	20000048 	.word	0x20000048

08005a38 <cleanup_stdio>:
 8005a38:	6841      	ldr	r1, [r0, #4]
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <cleanup_stdio+0x34>)
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	4604      	mov	r4, r0
 8005a42:	d001      	beq.n	8005a48 <cleanup_stdio+0x10>
 8005a44:	f000 fe92 	bl	800676c <_fflush_r>
 8005a48:	68a1      	ldr	r1, [r4, #8]
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <cleanup_stdio+0x38>)
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d002      	beq.n	8005a56 <cleanup_stdio+0x1e>
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fe8b 	bl	800676c <_fflush_r>
 8005a56:	68e1      	ldr	r1, [r4, #12]
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <cleanup_stdio+0x3c>)
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	d004      	beq.n	8005a68 <cleanup_stdio+0x30>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a64:	f000 be82 	b.w	800676c <_fflush_r>
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000610 	.word	0x20000610
 8005a70:	20000678 	.word	0x20000678
 8005a74:	200006e0 	.word	0x200006e0

08005a78 <global_stdio_init.part.0>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <global_stdio_init.part.0+0x30>)
 8005a7c:	4c0b      	ldr	r4, [pc, #44]	; (8005aac <global_stdio_init.part.0+0x34>)
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <global_stdio_init.part.0+0x38>)
 8005a80:	4620      	mov	r0, r4
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2104      	movs	r1, #4
 8005a86:	2200      	movs	r2, #0
 8005a88:	f7ff ffa6 	bl	80059d8 <std>
 8005a8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a90:	2201      	movs	r2, #1
 8005a92:	2109      	movs	r1, #9
 8005a94:	f7ff ffa0 	bl	80059d8 <std>
 8005a98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa2:	2112      	movs	r1, #18
 8005aa4:	f7ff bf98 	b.w	80059d8 <std>
 8005aa8:	20000748 	.word	0x20000748
 8005aac:	20000610 	.word	0x20000610
 8005ab0:	08005a21 	.word	0x08005a21

08005ab4 <__sfp_lock_acquire>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__sfp_lock_acquire+0x8>)
 8005ab6:	f000 b9fd 	b.w	8005eb4 <__retarget_lock_acquire_recursive>
 8005aba:	bf00      	nop
 8005abc:	20000751 	.word	0x20000751

08005ac0 <__sfp_lock_release>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <__sfp_lock_release+0x8>)
 8005ac2:	f000 b9f8 	b.w	8005eb6 <__retarget_lock_release_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	20000751 	.word	0x20000751

08005acc <__sinit>:
 8005acc:	b510      	push	{r4, lr}
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f7ff fff0 	bl	8005ab4 <__sfp_lock_acquire>
 8005ad4:	6a23      	ldr	r3, [r4, #32]
 8005ad6:	b11b      	cbz	r3, 8005ae0 <__sinit+0x14>
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f7ff bff0 	b.w	8005ac0 <__sfp_lock_release>
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__sinit+0x28>)
 8005ae2:	6223      	str	r3, [r4, #32]
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <__sinit+0x2c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f5      	bne.n	8005ad8 <__sinit+0xc>
 8005aec:	f7ff ffc4 	bl	8005a78 <global_stdio_init.part.0>
 8005af0:	e7f2      	b.n	8005ad8 <__sinit+0xc>
 8005af2:	bf00      	nop
 8005af4:	08005a39 	.word	0x08005a39
 8005af8:	20000748 	.word	0x20000748

08005afc <_fwalk_sglue>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4607      	mov	r7, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	4614      	mov	r4, r2
 8005b06:	2600      	movs	r6, #0
 8005b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b10:	d505      	bpl.n	8005b1e <_fwalk_sglue+0x22>
 8005b12:	6824      	ldr	r4, [r4, #0]
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d1f7      	bne.n	8005b08 <_fwalk_sglue+0xc>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1e:	89ab      	ldrh	r3, [r5, #12]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d907      	bls.n	8005b34 <_fwalk_sglue+0x38>
 8005b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	d003      	beq.n	8005b34 <_fwalk_sglue+0x38>
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4638      	mov	r0, r7
 8005b30:	47c0      	blx	r8
 8005b32:	4306      	orrs	r6, r0
 8005b34:	3568      	adds	r5, #104	; 0x68
 8005b36:	e7e9      	b.n	8005b0c <_fwalk_sglue+0x10>

08005b38 <iprintf>:
 8005b38:	b40f      	push	{r0, r1, r2, r3}
 8005b3a:	b507      	push	{r0, r1, r2, lr}
 8005b3c:	4906      	ldr	r1, [pc, #24]	; (8005b58 <iprintf+0x20>)
 8005b3e:	ab04      	add	r3, sp, #16
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b46:	6881      	ldr	r1, [r0, #8]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	f000 fadf 	bl	800610c <_vfiprintf_r>
 8005b4e:	b003      	add	sp, #12
 8005b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	20000094 	.word	0x20000094

08005b5c <_puts_r>:
 8005b5c:	6a03      	ldr	r3, [r0, #32]
 8005b5e:	b570      	push	{r4, r5, r6, lr}
 8005b60:	4605      	mov	r5, r0
 8005b62:	460e      	mov	r6, r1
 8005b64:	6884      	ldr	r4, [r0, #8]
 8005b66:	b90b      	cbnz	r3, 8005b6c <_puts_r+0x10>
 8005b68:	f7ff ffb0 	bl	8005acc <__sinit>
 8005b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b6e:	07db      	lsls	r3, r3, #31
 8005b70:	d405      	bmi.n	8005b7e <_puts_r+0x22>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	0598      	lsls	r0, r3, #22
 8005b76:	d402      	bmi.n	8005b7e <_puts_r+0x22>
 8005b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7a:	f000 f99b 	bl	8005eb4 <__retarget_lock_acquire_recursive>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	0719      	lsls	r1, r3, #28
 8005b82:	d513      	bpl.n	8005bac <_puts_r+0x50>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b18b      	cbz	r3, 8005bac <_puts_r+0x50>
 8005b88:	3e01      	subs	r6, #1
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b90:	3b01      	subs	r3, #1
 8005b92:	60a3      	str	r3, [r4, #8]
 8005b94:	b9e9      	cbnz	r1, 8005bd2 <_puts_r+0x76>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da2e      	bge.n	8005bf8 <_puts_r+0x9c>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f87b 	bl	8005c9a <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d007      	beq.n	8005bb8 <_puts_r+0x5c>
 8005ba8:	250a      	movs	r5, #10
 8005baa:	e007      	b.n	8005bbc <_puts_r+0x60>
 8005bac:	4621      	mov	r1, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f8b0 	bl	8005d14 <__swsetup_r>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d0e7      	beq.n	8005b88 <_puts_r+0x2c>
 8005bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8005bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bbe:	07da      	lsls	r2, r3, #31
 8005bc0:	d405      	bmi.n	8005bce <_puts_r+0x72>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_puts_r+0x72>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bca:	f000 f974 	bl	8005eb6 <__retarget_lock_release_recursive>
 8005bce:	4628      	mov	r0, r5
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da04      	bge.n	8005be0 <_puts_r+0x84>
 8005bd6:	69a2      	ldr	r2, [r4, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	dc06      	bgt.n	8005bea <_puts_r+0x8e>
 8005bdc:	290a      	cmp	r1, #10
 8005bde:	d004      	beq.n	8005bea <_puts_r+0x8e>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	6022      	str	r2, [r4, #0]
 8005be6:	7019      	strb	r1, [r3, #0]
 8005be8:	e7cf      	b.n	8005b8a <_puts_r+0x2e>
 8005bea:	4622      	mov	r2, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 f854 	bl	8005c9a <__swbuf_r>
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d1c9      	bne.n	8005b8a <_puts_r+0x2e>
 8005bf6:	e7df      	b.n	8005bb8 <_puts_r+0x5c>
 8005bf8:	250a      	movs	r5, #10
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	6022      	str	r2, [r4, #0]
 8005c00:	701d      	strb	r5, [r3, #0]
 8005c02:	e7db      	b.n	8005bbc <_puts_r+0x60>

08005c04 <puts>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <puts+0xc>)
 8005c06:	4601      	mov	r1, r0
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f7ff bfa7 	b.w	8005b5c <_puts_r>
 8005c0e:	bf00      	nop
 8005c10:	20000094 	.word	0x20000094

08005c14 <__sread>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	460c      	mov	r4, r1
 8005c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1c:	f000 f8fc 	bl	8005e18 <_read_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	bfab      	itete	ge
 8005c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c26:	89a3      	ldrhlt	r3, [r4, #12]
 8005c28:	181b      	addge	r3, r3, r0
 8005c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c2e:	bfac      	ite	ge
 8005c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c32:	81a3      	strhlt	r3, [r4, #12]
 8005c34:	bd10      	pop	{r4, pc}

08005c36 <__swrite>:
 8005c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	898b      	ldrh	r3, [r1, #12]
 8005c3e:	4605      	mov	r5, r0
 8005c40:	05db      	lsls	r3, r3, #23
 8005c42:	460c      	mov	r4, r1
 8005c44:	4616      	mov	r6, r2
 8005c46:	d505      	bpl.n	8005c54 <__swrite+0x1e>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c50:	f000 f8d0 	bl	8005df4 <_lseek_r>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	4632      	mov	r2, r6
 8005c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	4628      	mov	r0, r5
 8005c60:	463b      	mov	r3, r7
 8005c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	f000 b8e7 	b.w	8005e3c <_write_r>

08005c6e <__sseek>:
 8005c6e:	b510      	push	{r4, lr}
 8005c70:	460c      	mov	r4, r1
 8005c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c76:	f000 f8bd 	bl	8005df4 <_lseek_r>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	bf15      	itete	ne
 8005c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c8a:	81a3      	strheq	r3, [r4, #12]
 8005c8c:	bf18      	it	ne
 8005c8e:	81a3      	strhne	r3, [r4, #12]
 8005c90:	bd10      	pop	{r4, pc}

08005c92 <__sclose>:
 8005c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c96:	f000 b89d 	b.w	8005dd4 <_close_r>

08005c9a <__swbuf_r>:
 8005c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9c:	460e      	mov	r6, r1
 8005c9e:	4614      	mov	r4, r2
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	b118      	cbz	r0, 8005cac <__swbuf_r+0x12>
 8005ca4:	6a03      	ldr	r3, [r0, #32]
 8005ca6:	b90b      	cbnz	r3, 8005cac <__swbuf_r+0x12>
 8005ca8:	f7ff ff10 	bl	8005acc <__sinit>
 8005cac:	69a3      	ldr	r3, [r4, #24]
 8005cae:	60a3      	str	r3, [r4, #8]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	071a      	lsls	r2, r3, #28
 8005cb4:	d525      	bpl.n	8005d02 <__swbuf_r+0x68>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	b31b      	cbz	r3, 8005d02 <__swbuf_r+0x68>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	6922      	ldr	r2, [r4, #16]
 8005cbe:	b2f6      	uxtb	r6, r6
 8005cc0:	1a98      	subs	r0, r3, r2
 8005cc2:	6963      	ldr	r3, [r4, #20]
 8005cc4:	4637      	mov	r7, r6
 8005cc6:	4283      	cmp	r3, r0
 8005cc8:	dc04      	bgt.n	8005cd4 <__swbuf_r+0x3a>
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 fd4d 	bl	800676c <_fflush_r>
 8005cd2:	b9e0      	cbnz	r0, 8005d0e <__swbuf_r+0x74>
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	6022      	str	r2, [r4, #0]
 8005ce0:	701e      	strb	r6, [r3, #0]
 8005ce2:	6962      	ldr	r2, [r4, #20]
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d004      	beq.n	8005cf4 <__swbuf_r+0x5a>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	07db      	lsls	r3, r3, #31
 8005cee:	d506      	bpl.n	8005cfe <__swbuf_r+0x64>
 8005cf0:	2e0a      	cmp	r6, #10
 8005cf2:	d104      	bne.n	8005cfe <__swbuf_r+0x64>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fd38 	bl	800676c <_fflush_r>
 8005cfc:	b938      	cbnz	r0, 8005d0e <__swbuf_r+0x74>
 8005cfe:	4638      	mov	r0, r7
 8005d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	f000 f805 	bl	8005d14 <__swsetup_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0d5      	beq.n	8005cba <__swbuf_r+0x20>
 8005d0e:	f04f 37ff 	mov.w	r7, #4294967295
 8005d12:	e7f4      	b.n	8005cfe <__swbuf_r+0x64>

08005d14 <__swsetup_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4b2a      	ldr	r3, [pc, #168]	; (8005dc0 <__swsetup_r+0xac>)
 8005d18:	4605      	mov	r5, r0
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	b118      	cbz	r0, 8005d28 <__swsetup_r+0x14>
 8005d20:	6a03      	ldr	r3, [r0, #32]
 8005d22:	b90b      	cbnz	r3, 8005d28 <__swsetup_r+0x14>
 8005d24:	f7ff fed2 	bl	8005acc <__sinit>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2e:	0718      	lsls	r0, r3, #28
 8005d30:	d422      	bmi.n	8005d78 <__swsetup_r+0x64>
 8005d32:	06d9      	lsls	r1, r3, #27
 8005d34:	d407      	bmi.n	8005d46 <__swsetup_r+0x32>
 8005d36:	2309      	movs	r3, #9
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	e034      	b.n	8005db0 <__swsetup_r+0x9c>
 8005d46:	0758      	lsls	r0, r3, #29
 8005d48:	d512      	bpl.n	8005d70 <__swsetup_r+0x5c>
 8005d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4c:	b141      	cbz	r1, 8005d60 <__swsetup_r+0x4c>
 8005d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d52:	4299      	cmp	r1, r3
 8005d54:	d002      	beq.n	8005d5c <__swsetup_r+0x48>
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f8bc 	bl	8005ed4 <_free_r>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f043 0308 	orr.w	r3, r3, #8
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	b94b      	cbnz	r3, 8005d90 <__swsetup_r+0x7c>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d86:	d003      	beq.n	8005d90 <__swsetup_r+0x7c>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 fd3b 	bl	8006806 <__smakebuf_r>
 8005d90:	89a0      	ldrh	r0, [r4, #12]
 8005d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d96:	f010 0301 	ands.w	r3, r0, #1
 8005d9a:	d00a      	beq.n	8005db2 <__swsetup_r+0x9e>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	6963      	ldr	r3, [r4, #20]
 8005da2:	425b      	negs	r3, r3
 8005da4:	61a3      	str	r3, [r4, #24]
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	b943      	cbnz	r3, 8005dbc <__swsetup_r+0xa8>
 8005daa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dae:	d1c4      	bne.n	8005d3a <__swsetup_r+0x26>
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	0781      	lsls	r1, r0, #30
 8005db4:	bf58      	it	pl
 8005db6:	6963      	ldrpl	r3, [r4, #20]
 8005db8:	60a3      	str	r3, [r4, #8]
 8005dba:	e7f4      	b.n	8005da6 <__swsetup_r+0x92>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	e7f7      	b.n	8005db0 <__swsetup_r+0x9c>
 8005dc0:	20000094 	.word	0x20000094

08005dc4 <memset>:
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4402      	add	r2, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <_close_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4d05      	ldr	r5, [pc, #20]	; (8005df0 <_close_r+0x1c>)
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fe f9b6 	bl	8004150 <_close>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_close_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_close_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	2000074c 	.word	0x2000074c

08005df4 <_lseek_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4d05      	ldr	r5, [pc, #20]	; (8005e14 <_lseek_r+0x20>)
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7fe f9c8 	bl	8004198 <_lseek>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_lseek_r+0x1e>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_lseek_r+0x1e>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	2000074c 	.word	0x2000074c

08005e18 <_read_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	2200      	movs	r2, #0
 8005e22:	4d05      	ldr	r5, [pc, #20]	; (8005e38 <_read_r+0x20>)
 8005e24:	602a      	str	r2, [r5, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	f7fe f959 	bl	80040de <_read>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_read_r+0x1e>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_read_r+0x1e>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	2000074c 	.word	0x2000074c

08005e3c <_write_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	2200      	movs	r2, #0
 8005e46:	4d05      	ldr	r5, [pc, #20]	; (8005e5c <_write_r+0x20>)
 8005e48:	602a      	str	r2, [r5, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f7fe f964 	bl	8004118 <_write>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d102      	bne.n	8005e5a <_write_r+0x1e>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b103      	cbz	r3, 8005e5a <_write_r+0x1e>
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	2000074c 	.word	0x2000074c

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	; (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000094 	.word	0x20000094

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	2600      	movs	r6, #0
 8005e70:	4d0c      	ldr	r5, [pc, #48]	; (8005ea4 <__libc_init_array+0x38>)
 8005e72:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e74:	1b64      	subs	r4, r4, r5
 8005e76:	10a4      	asrs	r4, r4, #2
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	f000 fd40 	bl	8006900 <_init>
 8005e80:	2600      	movs	r6, #0
 8005e82:	4d0a      	ldr	r5, [pc, #40]	; (8005eac <__libc_init_array+0x40>)
 8005e84:	4c0a      	ldr	r4, [pc, #40]	; (8005eb0 <__libc_init_array+0x44>)
 8005e86:	1b64      	subs	r4, r4, r5
 8005e88:	10a4      	asrs	r4, r4, #2
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08006dd4 	.word	0x08006dd4
 8005ea8:	08006dd4 	.word	0x08006dd4
 8005eac:	08006dd4 	.word	0x08006dd4
 8005eb0:	08006dd8 	.word	0x08006dd8

08005eb4 <__retarget_lock_acquire_recursive>:
 8005eb4:	4770      	bx	lr

08005eb6 <__retarget_lock_release_recursive>:
 8005eb6:	4770      	bx	lr

08005eb8 <memcpy>:
 8005eb8:	440a      	add	r2, r1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	4770      	bx	lr
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed0:	d1f9      	bne.n	8005ec6 <memcpy+0xe>
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <_free_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d040      	beq.n	8005f5e <_free_r+0x8a>
 8005edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee0:	1f0c      	subs	r4, r1, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfb8      	it	lt
 8005ee6:	18e4      	addlt	r4, r4, r3
 8005ee8:	f000 f8dc 	bl	80060a4 <__malloc_lock>
 8005eec:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <_free_r+0x8c>)
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	b933      	cbnz	r3, 8005f00 <_free_r+0x2c>
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6014      	str	r4, [r2, #0]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005efc:	f000 b8d8 	b.w	80060b0 <__malloc_unlock>
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	d908      	bls.n	8005f16 <_free_r+0x42>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	1821      	adds	r1, r4, r0
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf01      	itttt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	1809      	addeq	r1, r1, r0
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	e7ed      	b.n	8005ef2 <_free_r+0x1e>
 8005f16:	461a      	mov	r2, r3
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b10b      	cbz	r3, 8005f20 <_free_r+0x4c>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x42>
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	1850      	adds	r0, r2, r1
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x6c>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	1850      	adds	r0, r2, r1
 8005f2e:	4283      	cmp	r3, r0
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	d1e0      	bne.n	8005ef6 <_free_r+0x22>
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4408      	add	r0, r1
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	6053      	str	r3, [r2, #4]
 8005f3e:	e7da      	b.n	8005ef6 <_free_r+0x22>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x74>
 8005f42:	230c      	movs	r3, #12
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	e7d6      	b.n	8005ef6 <_free_r+0x22>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf01      	itttt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	1809      	addeq	r1, r1, r0
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6054      	str	r4, [r2, #4]
 8005f5c:	e7cb      	b.n	8005ef6 <_free_r+0x22>
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000754 	.word	0x20000754

08005f64 <sbrk_aligned>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4e0e      	ldr	r6, [pc, #56]	; (8005fa0 <sbrk_aligned+0x3c>)
 8005f68:	460c      	mov	r4, r1
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b911      	cbnz	r1, 8005f76 <sbrk_aligned+0x12>
 8005f70:	f000 fca8 	bl	80068c4 <_sbrk_r>
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fca3 	bl	80068c4 <_sbrk_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d00a      	beq.n	8005f98 <sbrk_aligned+0x34>
 8005f82:	1cc4      	adds	r4, r0, #3
 8005f84:	f024 0403 	bic.w	r4, r4, #3
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d007      	beq.n	8005f9c <sbrk_aligned+0x38>
 8005f8c:	1a21      	subs	r1, r4, r0
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fc98 	bl	80068c4 <_sbrk_r>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d101      	bne.n	8005f9c <sbrk_aligned+0x38>
 8005f98:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	20000758 	.word	0x20000758

08005fa4 <_malloc_r>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	1ccd      	adds	r5, r1, #3
 8005faa:	f025 0503 	bic.w	r5, r5, #3
 8005fae:	3508      	adds	r5, #8
 8005fb0:	2d0c      	cmp	r5, #12
 8005fb2:	bf38      	it	cc
 8005fb4:	250c      	movcc	r5, #12
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	4607      	mov	r7, r0
 8005fba:	db01      	blt.n	8005fc0 <_malloc_r+0x1c>
 8005fbc:	42a9      	cmp	r1, r5
 8005fbe:	d905      	bls.n	8005fcc <_malloc_r+0x28>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060a0 <_malloc_r+0xfc>
 8005fd0:	f000 f868 	bl	80060a4 <__malloc_lock>
 8005fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd8:	461c      	mov	r4, r3
 8005fda:	bb5c      	cbnz	r4, 8006034 <_malloc_r+0x90>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7ff ffc0 	bl	8005f64 <sbrk_aligned>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	d155      	bne.n	8006096 <_malloc_r+0xf2>
 8005fea:	f8d8 4000 	ldr.w	r4, [r8]
 8005fee:	4626      	mov	r6, r4
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	d145      	bne.n	8006080 <_malloc_r+0xdc>
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	d048      	beq.n	800608a <_malloc_r+0xe6>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	eb04 0903 	add.w	r9, r4, r3
 8006002:	f000 fc5f 	bl	80068c4 <_sbrk_r>
 8006006:	4581      	cmp	r9, r0
 8006008:	d13f      	bne.n	800608a <_malloc_r+0xe6>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	4638      	mov	r0, r7
 800600e:	1a6d      	subs	r5, r5, r1
 8006010:	4629      	mov	r1, r5
 8006012:	f7ff ffa7 	bl	8005f64 <sbrk_aligned>
 8006016:	3001      	adds	r0, #1
 8006018:	d037      	beq.n	800608a <_malloc_r+0xe6>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	442b      	add	r3, r5
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	f8d8 3000 	ldr.w	r3, [r8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d038      	beq.n	800609a <_malloc_r+0xf6>
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	42a2      	cmp	r2, r4
 800602c:	d12b      	bne.n	8006086 <_malloc_r+0xe2>
 800602e:	2200      	movs	r2, #0
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	e00f      	b.n	8006054 <_malloc_r+0xb0>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	1b52      	subs	r2, r2, r5
 8006038:	d41f      	bmi.n	800607a <_malloc_r+0xd6>
 800603a:	2a0b      	cmp	r2, #11
 800603c:	d917      	bls.n	800606e <_malloc_r+0xca>
 800603e:	1961      	adds	r1, r4, r5
 8006040:	42a3      	cmp	r3, r4
 8006042:	6025      	str	r5, [r4, #0]
 8006044:	bf18      	it	ne
 8006046:	6059      	strne	r1, [r3, #4]
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	bf08      	it	eq
 800604c:	f8c8 1000 	streq.w	r1, [r8]
 8006050:	5162      	str	r2, [r4, r5]
 8006052:	604b      	str	r3, [r1, #4]
 8006054:	4638      	mov	r0, r7
 8006056:	f104 060b 	add.w	r6, r4, #11
 800605a:	f000 f829 	bl	80060b0 <__malloc_unlock>
 800605e:	f026 0607 	bic.w	r6, r6, #7
 8006062:	1d23      	adds	r3, r4, #4
 8006064:	1af2      	subs	r2, r6, r3
 8006066:	d0ae      	beq.n	8005fc6 <_malloc_r+0x22>
 8006068:	1b9b      	subs	r3, r3, r6
 800606a:	50a3      	str	r3, [r4, r2]
 800606c:	e7ab      	b.n	8005fc6 <_malloc_r+0x22>
 800606e:	42a3      	cmp	r3, r4
 8006070:	6862      	ldr	r2, [r4, #4]
 8006072:	d1dd      	bne.n	8006030 <_malloc_r+0x8c>
 8006074:	f8c8 2000 	str.w	r2, [r8]
 8006078:	e7ec      	b.n	8006054 <_malloc_r+0xb0>
 800607a:	4623      	mov	r3, r4
 800607c:	6864      	ldr	r4, [r4, #4]
 800607e:	e7ac      	b.n	8005fda <_malloc_r+0x36>
 8006080:	4634      	mov	r4, r6
 8006082:	6876      	ldr	r6, [r6, #4]
 8006084:	e7b4      	b.n	8005ff0 <_malloc_r+0x4c>
 8006086:	4613      	mov	r3, r2
 8006088:	e7cc      	b.n	8006024 <_malloc_r+0x80>
 800608a:	230c      	movs	r3, #12
 800608c:	4638      	mov	r0, r7
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	f000 f80e 	bl	80060b0 <__malloc_unlock>
 8006094:	e797      	b.n	8005fc6 <_malloc_r+0x22>
 8006096:	6025      	str	r5, [r4, #0]
 8006098:	e7dc      	b.n	8006054 <_malloc_r+0xb0>
 800609a:	605b      	str	r3, [r3, #4]
 800609c:	deff      	udf	#255	; 0xff
 800609e:	bf00      	nop
 80060a0:	20000754 	.word	0x20000754

080060a4 <__malloc_lock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__malloc_lock+0x8>)
 80060a6:	f7ff bf05 	b.w	8005eb4 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	20000750 	.word	0x20000750

080060b0 <__malloc_unlock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__malloc_unlock+0x8>)
 80060b2:	f7ff bf00 	b.w	8005eb6 <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	20000750 	.word	0x20000750

080060bc <__sfputc_r>:
 80060bc:	6893      	ldr	r3, [r2, #8]
 80060be:	b410      	push	{r4}
 80060c0:	3b01      	subs	r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	da07      	bge.n	80060d8 <__sfputc_r+0x1c>
 80060c8:	6994      	ldr	r4, [r2, #24]
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	db01      	blt.n	80060d2 <__sfputc_r+0x16>
 80060ce:	290a      	cmp	r1, #10
 80060d0:	d102      	bne.n	80060d8 <__sfputc_r+0x1c>
 80060d2:	bc10      	pop	{r4}
 80060d4:	f7ff bde1 	b.w	8005c9a <__swbuf_r>
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	1c58      	adds	r0, r3, #1
 80060dc:	6010      	str	r0, [r2, #0]
 80060de:	7019      	strb	r1, [r3, #0]
 80060e0:	4608      	mov	r0, r1
 80060e2:	bc10      	pop	{r4}
 80060e4:	4770      	bx	lr

080060e6 <__sfputs_r>:
 80060e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	18d5      	adds	r5, r2, r3
 80060f0:	42ac      	cmp	r4, r5
 80060f2:	d101      	bne.n	80060f8 <__sfputs_r+0x12>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e007      	b.n	8006108 <__sfputs_r+0x22>
 80060f8:	463a      	mov	r2, r7
 80060fa:	4630      	mov	r0, r6
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	f7ff ffdc 	bl	80060bc <__sfputc_r>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d1f3      	bne.n	80060f0 <__sfputs_r+0xa>
 8006108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800610c <_vfiprintf_r>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	460d      	mov	r5, r1
 8006112:	4614      	mov	r4, r2
 8006114:	4698      	mov	r8, r3
 8006116:	4606      	mov	r6, r0
 8006118:	b09d      	sub	sp, #116	; 0x74
 800611a:	b118      	cbz	r0, 8006124 <_vfiprintf_r+0x18>
 800611c:	6a03      	ldr	r3, [r0, #32]
 800611e:	b90b      	cbnz	r3, 8006124 <_vfiprintf_r+0x18>
 8006120:	f7ff fcd4 	bl	8005acc <__sinit>
 8006124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	d405      	bmi.n	8006136 <_vfiprintf_r+0x2a>
 800612a:	89ab      	ldrh	r3, [r5, #12]
 800612c:	059a      	lsls	r2, r3, #22
 800612e:	d402      	bmi.n	8006136 <_vfiprintf_r+0x2a>
 8006130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006132:	f7ff febf 	bl	8005eb4 <__retarget_lock_acquire_recursive>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	071b      	lsls	r3, r3, #28
 800613a:	d501      	bpl.n	8006140 <_vfiprintf_r+0x34>
 800613c:	692b      	ldr	r3, [r5, #16]
 800613e:	b99b      	cbnz	r3, 8006168 <_vfiprintf_r+0x5c>
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff fde6 	bl	8005d14 <__swsetup_r>
 8006148:	b170      	cbz	r0, 8006168 <_vfiprintf_r+0x5c>
 800614a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800614c:	07dc      	lsls	r4, r3, #31
 800614e:	d504      	bpl.n	800615a <_vfiprintf_r+0x4e>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	b01d      	add	sp, #116	; 0x74
 8006156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	0598      	lsls	r0, r3, #22
 800615e:	d4f7      	bmi.n	8006150 <_vfiprintf_r+0x44>
 8006160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006162:	f7ff fea8 	bl	8005eb6 <__retarget_lock_release_recursive>
 8006166:	e7f3      	b.n	8006150 <_vfiprintf_r+0x44>
 8006168:	2300      	movs	r3, #0
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	2320      	movs	r3, #32
 800616e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006172:	2330      	movs	r3, #48	; 0x30
 8006174:	f04f 0901 	mov.w	r9, #1
 8006178:	f8cd 800c 	str.w	r8, [sp, #12]
 800617c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800632c <_vfiprintf_r+0x220>
 8006180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006184:	4623      	mov	r3, r4
 8006186:	469a      	mov	sl, r3
 8006188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618c:	b10a      	cbz	r2, 8006192 <_vfiprintf_r+0x86>
 800618e:	2a25      	cmp	r2, #37	; 0x25
 8006190:	d1f9      	bne.n	8006186 <_vfiprintf_r+0x7a>
 8006192:	ebba 0b04 	subs.w	fp, sl, r4
 8006196:	d00b      	beq.n	80061b0 <_vfiprintf_r+0xa4>
 8006198:	465b      	mov	r3, fp
 800619a:	4622      	mov	r2, r4
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffa1 	bl	80060e6 <__sfputs_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	f000 80a9 	beq.w	80062fc <_vfiprintf_r+0x1f0>
 80061aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ac:	445a      	add	r2, fp
 80061ae:	9209      	str	r2, [sp, #36]	; 0x24
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a1 	beq.w	80062fc <_vfiprintf_r+0x1f0>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f04f 32ff 	mov.w	r2, #4294967295
 80061c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c4:	f10a 0a01 	add.w	sl, sl, #1
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061d0:	931a      	str	r3, [sp, #104]	; 0x68
 80061d2:	4654      	mov	r4, sl
 80061d4:	2205      	movs	r2, #5
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	4854      	ldr	r0, [pc, #336]	; (800632c <_vfiprintf_r+0x220>)
 80061dc:	f000 fb82 	bl	80068e4 <memchr>
 80061e0:	9a04      	ldr	r2, [sp, #16]
 80061e2:	b9d8      	cbnz	r0, 800621c <_vfiprintf_r+0x110>
 80061e4:	06d1      	lsls	r1, r2, #27
 80061e6:	bf44      	itt	mi
 80061e8:	2320      	movmi	r3, #32
 80061ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ee:	0713      	lsls	r3, r2, #28
 80061f0:	bf44      	itt	mi
 80061f2:	232b      	movmi	r3, #43	; 0x2b
 80061f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f8:	f89a 3000 	ldrb.w	r3, [sl]
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d015      	beq.n	800622c <_vfiprintf_r+0x120>
 8006200:	4654      	mov	r4, sl
 8006202:	2000      	movs	r0, #0
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	9a07      	ldr	r2, [sp, #28]
 800620a:	4621      	mov	r1, r4
 800620c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006210:	3b30      	subs	r3, #48	; 0x30
 8006212:	2b09      	cmp	r3, #9
 8006214:	d94d      	bls.n	80062b2 <_vfiprintf_r+0x1a6>
 8006216:	b1b0      	cbz	r0, 8006246 <_vfiprintf_r+0x13a>
 8006218:	9207      	str	r2, [sp, #28]
 800621a:	e014      	b.n	8006246 <_vfiprintf_r+0x13a>
 800621c:	eba0 0308 	sub.w	r3, r0, r8
 8006220:	fa09 f303 	lsl.w	r3, r9, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	46a2      	mov	sl, r4
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	e7d2      	b.n	80061d2 <_vfiprintf_r+0xc6>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	1d19      	adds	r1, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9103      	str	r1, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfbb      	ittet	lt
 8006238:	425b      	neglt	r3, r3
 800623a:	f042 0202 	orrlt.w	r2, r2, #2
 800623e:	9307      	strge	r3, [sp, #28]
 8006240:	9307      	strlt	r3, [sp, #28]
 8006242:	bfb8      	it	lt
 8006244:	9204      	strlt	r2, [sp, #16]
 8006246:	7823      	ldrb	r3, [r4, #0]
 8006248:	2b2e      	cmp	r3, #46	; 0x2e
 800624a:	d10c      	bne.n	8006266 <_vfiprintf_r+0x15a>
 800624c:	7863      	ldrb	r3, [r4, #1]
 800624e:	2b2a      	cmp	r3, #42	; 0x2a
 8006250:	d134      	bne.n	80062bc <_vfiprintf_r+0x1b0>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	3402      	adds	r4, #2
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	9203      	str	r2, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfb8      	it	lt
 8006260:	f04f 33ff 	movlt.w	r3, #4294967295
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006330 <_vfiprintf_r+0x224>
 800626a:	2203      	movs	r2, #3
 800626c:	4650      	mov	r0, sl
 800626e:	7821      	ldrb	r1, [r4, #0]
 8006270:	f000 fb38 	bl	80068e4 <memchr>
 8006274:	b138      	cbz	r0, 8006286 <_vfiprintf_r+0x17a>
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	9b04      	ldr	r3, [sp, #16]
 800627a:	eba0 000a 	sub.w	r0, r0, sl
 800627e:	4082      	lsls	r2, r0
 8006280:	4313      	orrs	r3, r2
 8006282:	3401      	adds	r4, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628a:	2206      	movs	r2, #6
 800628c:	4829      	ldr	r0, [pc, #164]	; (8006334 <_vfiprintf_r+0x228>)
 800628e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006292:	f000 fb27 	bl	80068e4 <memchr>
 8006296:	2800      	cmp	r0, #0
 8006298:	d03f      	beq.n	800631a <_vfiprintf_r+0x20e>
 800629a:	4b27      	ldr	r3, [pc, #156]	; (8006338 <_vfiprintf_r+0x22c>)
 800629c:	bb1b      	cbnz	r3, 80062e6 <_vfiprintf_r+0x1da>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	3308      	adds	r3, #8
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ac:	443b      	add	r3, r7
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	e768      	b.n	8006184 <_vfiprintf_r+0x78>
 80062b2:	460c      	mov	r4, r1
 80062b4:	2001      	movs	r0, #1
 80062b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ba:	e7a6      	b.n	800620a <_vfiprintf_r+0xfe>
 80062bc:	2300      	movs	r3, #0
 80062be:	f04f 0c0a 	mov.w	ip, #10
 80062c2:	4619      	mov	r1, r3
 80062c4:	3401      	adds	r4, #1
 80062c6:	9305      	str	r3, [sp, #20]
 80062c8:	4620      	mov	r0, r4
 80062ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ce:	3a30      	subs	r2, #48	; 0x30
 80062d0:	2a09      	cmp	r2, #9
 80062d2:	d903      	bls.n	80062dc <_vfiprintf_r+0x1d0>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c6      	beq.n	8006266 <_vfiprintf_r+0x15a>
 80062d8:	9105      	str	r1, [sp, #20]
 80062da:	e7c4      	b.n	8006266 <_vfiprintf_r+0x15a>
 80062dc:	4604      	mov	r4, r0
 80062de:	2301      	movs	r3, #1
 80062e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e4:	e7f0      	b.n	80062c8 <_vfiprintf_r+0x1bc>
 80062e6:	ab03      	add	r3, sp, #12
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	462a      	mov	r2, r5
 80062ec:	4630      	mov	r0, r6
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <_vfiprintf_r+0x230>)
 80062f0:	a904      	add	r1, sp, #16
 80062f2:	f3af 8000 	nop.w
 80062f6:	4607      	mov	r7, r0
 80062f8:	1c78      	adds	r0, r7, #1
 80062fa:	d1d6      	bne.n	80062aa <_vfiprintf_r+0x19e>
 80062fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062fe:	07d9      	lsls	r1, r3, #31
 8006300:	d405      	bmi.n	800630e <_vfiprintf_r+0x202>
 8006302:	89ab      	ldrh	r3, [r5, #12]
 8006304:	059a      	lsls	r2, r3, #22
 8006306:	d402      	bmi.n	800630e <_vfiprintf_r+0x202>
 8006308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630a:	f7ff fdd4 	bl	8005eb6 <__retarget_lock_release_recursive>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	f53f af1d 	bmi.w	8006150 <_vfiprintf_r+0x44>
 8006316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006318:	e71c      	b.n	8006154 <_vfiprintf_r+0x48>
 800631a:	ab03      	add	r3, sp, #12
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	462a      	mov	r2, r5
 8006320:	4630      	mov	r0, r6
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <_vfiprintf_r+0x230>)
 8006324:	a904      	add	r1, sp, #16
 8006326:	f000 f87d 	bl	8006424 <_printf_i>
 800632a:	e7e4      	b.n	80062f6 <_vfiprintf_r+0x1ea>
 800632c:	08006d9e 	.word	0x08006d9e
 8006330:	08006da4 	.word	0x08006da4
 8006334:	08006da8 	.word	0x08006da8
 8006338:	00000000 	.word	0x00000000
 800633c:	080060e7 	.word	0x080060e7

08006340 <_printf_common>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	4616      	mov	r6, r2
 8006346:	4699      	mov	r9, r3
 8006348:	688a      	ldr	r2, [r1, #8]
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	4607      	mov	r7, r0
 800634e:	4293      	cmp	r3, r2
 8006350:	bfb8      	it	lt
 8006352:	4613      	movlt	r3, r2
 8006354:	6033      	str	r3, [r6, #0]
 8006356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800635a:	460c      	mov	r4, r1
 800635c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006360:	b10a      	cbz	r2, 8006366 <_printf_common+0x26>
 8006362:	3301      	adds	r3, #1
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	0699      	lsls	r1, r3, #26
 800636a:	bf42      	ittt	mi
 800636c:	6833      	ldrmi	r3, [r6, #0]
 800636e:	3302      	addmi	r3, #2
 8006370:	6033      	strmi	r3, [r6, #0]
 8006372:	6825      	ldr	r5, [r4, #0]
 8006374:	f015 0506 	ands.w	r5, r5, #6
 8006378:	d106      	bne.n	8006388 <_printf_common+0x48>
 800637a:	f104 0a19 	add.w	sl, r4, #25
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	6832      	ldr	r2, [r6, #0]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc2b      	bgt.n	80063e0 <_printf_common+0xa0>
 8006388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800638c:	1e13      	subs	r3, r2, #0
 800638e:	6822      	ldr	r2, [r4, #0]
 8006390:	bf18      	it	ne
 8006392:	2301      	movne	r3, #1
 8006394:	0692      	lsls	r2, r2, #26
 8006396:	d430      	bmi.n	80063fa <_printf_common+0xba>
 8006398:	4649      	mov	r1, r9
 800639a:	4638      	mov	r0, r7
 800639c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a0:	47c0      	blx	r8
 80063a2:	3001      	adds	r0, #1
 80063a4:	d023      	beq.n	80063ee <_printf_common+0xae>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6922      	ldr	r2, [r4, #16]
 80063aa:	f003 0306 	and.w	r3, r3, #6
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	bf14      	ite	ne
 80063b2:	2500      	movne	r5, #0
 80063b4:	6833      	ldreq	r3, [r6, #0]
 80063b6:	f04f 0600 	mov.w	r6, #0
 80063ba:	bf08      	it	eq
 80063bc:	68e5      	ldreq	r5, [r4, #12]
 80063be:	f104 041a 	add.w	r4, r4, #26
 80063c2:	bf08      	it	eq
 80063c4:	1aed      	subeq	r5, r5, r3
 80063c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80063ca:	bf08      	it	eq
 80063cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d0:	4293      	cmp	r3, r2
 80063d2:	bfc4      	itt	gt
 80063d4:	1a9b      	subgt	r3, r3, r2
 80063d6:	18ed      	addgt	r5, r5, r3
 80063d8:	42b5      	cmp	r5, r6
 80063da:	d11a      	bne.n	8006412 <_printf_common+0xd2>
 80063dc:	2000      	movs	r0, #0
 80063de:	e008      	b.n	80063f2 <_printf_common+0xb2>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4652      	mov	r2, sl
 80063e4:	4649      	mov	r1, r9
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d103      	bne.n	80063f6 <_printf_common+0xb6>
 80063ee:	f04f 30ff 	mov.w	r0, #4294967295
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f6:	3501      	adds	r5, #1
 80063f8:	e7c1      	b.n	800637e <_printf_common+0x3e>
 80063fa:	2030      	movs	r0, #48	; 0x30
 80063fc:	18e1      	adds	r1, r4, r3
 80063fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006408:	4422      	add	r2, r4
 800640a:	3302      	adds	r3, #2
 800640c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006410:	e7c2      	b.n	8006398 <_printf_common+0x58>
 8006412:	2301      	movs	r3, #1
 8006414:	4622      	mov	r2, r4
 8006416:	4649      	mov	r1, r9
 8006418:	4638      	mov	r0, r7
 800641a:	47c0      	blx	r8
 800641c:	3001      	adds	r0, #1
 800641e:	d0e6      	beq.n	80063ee <_printf_common+0xae>
 8006420:	3601      	adds	r6, #1
 8006422:	e7d9      	b.n	80063d8 <_printf_common+0x98>

08006424 <_printf_i>:
 8006424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	7e0f      	ldrb	r7, [r1, #24]
 800642a:	4691      	mov	r9, r2
 800642c:	2f78      	cmp	r7, #120	; 0x78
 800642e:	4680      	mov	r8, r0
 8006430:	460c      	mov	r4, r1
 8006432:	469a      	mov	sl, r3
 8006434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800643a:	d807      	bhi.n	800644c <_printf_i+0x28>
 800643c:	2f62      	cmp	r7, #98	; 0x62
 800643e:	d80a      	bhi.n	8006456 <_printf_i+0x32>
 8006440:	2f00      	cmp	r7, #0
 8006442:	f000 80d5 	beq.w	80065f0 <_printf_i+0x1cc>
 8006446:	2f58      	cmp	r7, #88	; 0x58
 8006448:	f000 80c1 	beq.w	80065ce <_printf_i+0x1aa>
 800644c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006454:	e03a      	b.n	80064cc <_printf_i+0xa8>
 8006456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800645a:	2b15      	cmp	r3, #21
 800645c:	d8f6      	bhi.n	800644c <_printf_i+0x28>
 800645e:	a101      	add	r1, pc, #4	; (adr r1, 8006464 <_printf_i+0x40>)
 8006460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064d1 	.word	0x080064d1
 800646c:	0800644d 	.word	0x0800644d
 8006470:	0800644d 	.word	0x0800644d
 8006474:	0800644d 	.word	0x0800644d
 8006478:	0800644d 	.word	0x0800644d
 800647c:	080064d1 	.word	0x080064d1
 8006480:	0800644d 	.word	0x0800644d
 8006484:	0800644d 	.word	0x0800644d
 8006488:	0800644d 	.word	0x0800644d
 800648c:	0800644d 	.word	0x0800644d
 8006490:	080065d7 	.word	0x080065d7
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006591 	.word	0x08006591
 800649c:	0800644d 	.word	0x0800644d
 80064a0:	0800644d 	.word	0x0800644d
 80064a4:	080065f9 	.word	0x080065f9
 80064a8:	0800644d 	.word	0x0800644d
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	0800644d 	.word	0x0800644d
 80064b4:	0800644d 	.word	0x0800644d
 80064b8:	08006599 	.word	0x08006599
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	602a      	str	r2, [r5, #0]
 80064c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0a0      	b.n	8006612 <_printf_i+0x1ee>
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	0607      	lsls	r7, r0, #24
 80064d6:	f103 0104 	add.w	r1, r3, #4
 80064da:	6029      	str	r1, [r5, #0]
 80064dc:	d501      	bpl.n	80064e2 <_printf_i+0xbe>
 80064de:	681e      	ldr	r6, [r3, #0]
 80064e0:	e003      	b.n	80064ea <_printf_i+0xc6>
 80064e2:	0646      	lsls	r6, r0, #25
 80064e4:	d5fb      	bpl.n	80064de <_printf_i+0xba>
 80064e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	da03      	bge.n	80064f6 <_printf_i+0xd2>
 80064ee:	232d      	movs	r3, #45	; 0x2d
 80064f0:	4276      	negs	r6, r6
 80064f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f6:	230a      	movs	r3, #10
 80064f8:	4859      	ldr	r0, [pc, #356]	; (8006660 <_printf_i+0x23c>)
 80064fa:	e012      	b.n	8006522 <_printf_i+0xfe>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	6820      	ldr	r0, [r4, #0]
 8006500:	1d19      	adds	r1, r3, #4
 8006502:	6029      	str	r1, [r5, #0]
 8006504:	0605      	lsls	r5, r0, #24
 8006506:	d501      	bpl.n	800650c <_printf_i+0xe8>
 8006508:	681e      	ldr	r6, [r3, #0]
 800650a:	e002      	b.n	8006512 <_printf_i+0xee>
 800650c:	0641      	lsls	r1, r0, #25
 800650e:	d5fb      	bpl.n	8006508 <_printf_i+0xe4>
 8006510:	881e      	ldrh	r6, [r3, #0]
 8006512:	2f6f      	cmp	r7, #111	; 0x6f
 8006514:	bf0c      	ite	eq
 8006516:	2308      	moveq	r3, #8
 8006518:	230a      	movne	r3, #10
 800651a:	4851      	ldr	r0, [pc, #324]	; (8006660 <_printf_i+0x23c>)
 800651c:	2100      	movs	r1, #0
 800651e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006522:	6865      	ldr	r5, [r4, #4]
 8006524:	2d00      	cmp	r5, #0
 8006526:	bfa8      	it	ge
 8006528:	6821      	ldrge	r1, [r4, #0]
 800652a:	60a5      	str	r5, [r4, #8]
 800652c:	bfa4      	itt	ge
 800652e:	f021 0104 	bicge.w	r1, r1, #4
 8006532:	6021      	strge	r1, [r4, #0]
 8006534:	b90e      	cbnz	r6, 800653a <_printf_i+0x116>
 8006536:	2d00      	cmp	r5, #0
 8006538:	d04b      	beq.n	80065d2 <_printf_i+0x1ae>
 800653a:	4615      	mov	r5, r2
 800653c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006540:	fb03 6711 	mls	r7, r3, r1, r6
 8006544:	5dc7      	ldrb	r7, [r0, r7]
 8006546:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800654a:	4637      	mov	r7, r6
 800654c:	42bb      	cmp	r3, r7
 800654e:	460e      	mov	r6, r1
 8006550:	d9f4      	bls.n	800653c <_printf_i+0x118>
 8006552:	2b08      	cmp	r3, #8
 8006554:	d10b      	bne.n	800656e <_printf_i+0x14a>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	07de      	lsls	r6, r3, #31
 800655a:	d508      	bpl.n	800656e <_printf_i+0x14a>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	6861      	ldr	r1, [r4, #4]
 8006560:	4299      	cmp	r1, r3
 8006562:	bfde      	ittt	le
 8006564:	2330      	movle	r3, #48	; 0x30
 8006566:	f805 3c01 	strble.w	r3, [r5, #-1]
 800656a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800656e:	1b52      	subs	r2, r2, r5
 8006570:	6122      	str	r2, [r4, #16]
 8006572:	464b      	mov	r3, r9
 8006574:	4621      	mov	r1, r4
 8006576:	4640      	mov	r0, r8
 8006578:	f8cd a000 	str.w	sl, [sp]
 800657c:	aa03      	add	r2, sp, #12
 800657e:	f7ff fedf 	bl	8006340 <_printf_common>
 8006582:	3001      	adds	r0, #1
 8006584:	d14a      	bne.n	800661c <_printf_i+0x1f8>
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	b004      	add	sp, #16
 800658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	f043 0320 	orr.w	r3, r3, #32
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	2778      	movs	r7, #120	; 0x78
 800659a:	4832      	ldr	r0, [pc, #200]	; (8006664 <_printf_i+0x240>)
 800659c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	6829      	ldr	r1, [r5, #0]
 80065a4:	061f      	lsls	r7, r3, #24
 80065a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80065aa:	d402      	bmi.n	80065b2 <_printf_i+0x18e>
 80065ac:	065f      	lsls	r7, r3, #25
 80065ae:	bf48      	it	mi
 80065b0:	b2b6      	uxthmi	r6, r6
 80065b2:	07df      	lsls	r7, r3, #31
 80065b4:	bf48      	it	mi
 80065b6:	f043 0320 	orrmi.w	r3, r3, #32
 80065ba:	6029      	str	r1, [r5, #0]
 80065bc:	bf48      	it	mi
 80065be:	6023      	strmi	r3, [r4, #0]
 80065c0:	b91e      	cbnz	r6, 80065ca <_printf_i+0x1a6>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f023 0320 	bic.w	r3, r3, #32
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	2310      	movs	r3, #16
 80065cc:	e7a6      	b.n	800651c <_printf_i+0xf8>
 80065ce:	4824      	ldr	r0, [pc, #144]	; (8006660 <_printf_i+0x23c>)
 80065d0:	e7e4      	b.n	800659c <_printf_i+0x178>
 80065d2:	4615      	mov	r5, r2
 80065d4:	e7bd      	b.n	8006552 <_printf_i+0x12e>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	6826      	ldr	r6, [r4, #0]
 80065da:	1d18      	adds	r0, r3, #4
 80065dc:	6961      	ldr	r1, [r4, #20]
 80065de:	6028      	str	r0, [r5, #0]
 80065e0:	0635      	lsls	r5, r6, #24
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	d501      	bpl.n	80065ea <_printf_i+0x1c6>
 80065e6:	6019      	str	r1, [r3, #0]
 80065e8:	e002      	b.n	80065f0 <_printf_i+0x1cc>
 80065ea:	0670      	lsls	r0, r6, #25
 80065ec:	d5fb      	bpl.n	80065e6 <_printf_i+0x1c2>
 80065ee:	8019      	strh	r1, [r3, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	4615      	mov	r5, r2
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	e7bc      	b.n	8006572 <_printf_i+0x14e>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	2100      	movs	r1, #0
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f96d 	bl	80068e4 <memchr>
 800660a:	b108      	cbz	r0, 8006610 <_printf_i+0x1ec>
 800660c:	1b40      	subs	r0, r0, r5
 800660e:	6060      	str	r0, [r4, #4]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	6123      	str	r3, [r4, #16]
 8006614:	2300      	movs	r3, #0
 8006616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661a:	e7aa      	b.n	8006572 <_printf_i+0x14e>
 800661c:	462a      	mov	r2, r5
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	47d0      	blx	sl
 8006626:	3001      	adds	r0, #1
 8006628:	d0ad      	beq.n	8006586 <_printf_i+0x162>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	079b      	lsls	r3, r3, #30
 800662e:	d413      	bmi.n	8006658 <_printf_i+0x234>
 8006630:	68e0      	ldr	r0, [r4, #12]
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	4298      	cmp	r0, r3
 8006636:	bfb8      	it	lt
 8006638:	4618      	movlt	r0, r3
 800663a:	e7a6      	b.n	800658a <_printf_i+0x166>
 800663c:	2301      	movs	r3, #1
 800663e:	4632      	mov	r2, r6
 8006640:	4649      	mov	r1, r9
 8006642:	4640      	mov	r0, r8
 8006644:	47d0      	blx	sl
 8006646:	3001      	adds	r0, #1
 8006648:	d09d      	beq.n	8006586 <_printf_i+0x162>
 800664a:	3501      	adds	r5, #1
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	9903      	ldr	r1, [sp, #12]
 8006650:	1a5b      	subs	r3, r3, r1
 8006652:	42ab      	cmp	r3, r5
 8006654:	dcf2      	bgt.n	800663c <_printf_i+0x218>
 8006656:	e7eb      	b.n	8006630 <_printf_i+0x20c>
 8006658:	2500      	movs	r5, #0
 800665a:	f104 0619 	add.w	r6, r4, #25
 800665e:	e7f5      	b.n	800664c <_printf_i+0x228>
 8006660:	08006daf 	.word	0x08006daf
 8006664:	08006dc0 	.word	0x08006dc0

08006668 <__sflush_r>:
 8006668:	898a      	ldrh	r2, [r1, #12]
 800666a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666c:	4605      	mov	r5, r0
 800666e:	0710      	lsls	r0, r2, #28
 8006670:	460c      	mov	r4, r1
 8006672:	d457      	bmi.n	8006724 <__sflush_r+0xbc>
 8006674:	684b      	ldr	r3, [r1, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	dc04      	bgt.n	8006684 <__sflush_r+0x1c>
 800667a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	dc01      	bgt.n	8006684 <__sflush_r+0x1c>
 8006680:	2000      	movs	r0, #0
 8006682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006686:	2e00      	cmp	r6, #0
 8006688:	d0fa      	beq.n	8006680 <__sflush_r+0x18>
 800668a:	2300      	movs	r3, #0
 800668c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006690:	682f      	ldr	r7, [r5, #0]
 8006692:	6a21      	ldr	r1, [r4, #32]
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	d032      	beq.n	80066fe <__sflush_r+0x96>
 8006698:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	075a      	lsls	r2, r3, #29
 800669e:	d505      	bpl.n	80066ac <__sflush_r+0x44>
 80066a0:	6863      	ldr	r3, [r4, #4]
 80066a2:	1ac0      	subs	r0, r0, r3
 80066a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066a6:	b10b      	cbz	r3, 80066ac <__sflush_r+0x44>
 80066a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066aa:	1ac0      	subs	r0, r0, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	4602      	mov	r2, r0
 80066b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b2:	4628      	mov	r0, r5
 80066b4:	6a21      	ldr	r1, [r4, #32]
 80066b6:	47b0      	blx	r6
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	d106      	bne.n	80066cc <__sflush_r+0x64>
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	291d      	cmp	r1, #29
 80066c2:	d82b      	bhi.n	800671c <__sflush_r+0xb4>
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <__sflush_r+0x100>)
 80066c6:	410a      	asrs	r2, r1
 80066c8:	07d6      	lsls	r6, r2, #31
 80066ca:	d427      	bmi.n	800671c <__sflush_r+0xb4>
 80066cc:	2200      	movs	r2, #0
 80066ce:	6062      	str	r2, [r4, #4]
 80066d0:	6922      	ldr	r2, [r4, #16]
 80066d2:	04d9      	lsls	r1, r3, #19
 80066d4:	6022      	str	r2, [r4, #0]
 80066d6:	d504      	bpl.n	80066e2 <__sflush_r+0x7a>
 80066d8:	1c42      	adds	r2, r0, #1
 80066da:	d101      	bne.n	80066e0 <__sflush_r+0x78>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b903      	cbnz	r3, 80066e2 <__sflush_r+0x7a>
 80066e0:	6560      	str	r0, [r4, #84]	; 0x54
 80066e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e4:	602f      	str	r7, [r5, #0]
 80066e6:	2900      	cmp	r1, #0
 80066e8:	d0ca      	beq.n	8006680 <__sflush_r+0x18>
 80066ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d002      	beq.n	80066f8 <__sflush_r+0x90>
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7ff fbee 	bl	8005ed4 <_free_r>
 80066f8:	2000      	movs	r0, #0
 80066fa:	6360      	str	r0, [r4, #52]	; 0x34
 80066fc:	e7c1      	b.n	8006682 <__sflush_r+0x1a>
 80066fe:	2301      	movs	r3, #1
 8006700:	4628      	mov	r0, r5
 8006702:	47b0      	blx	r6
 8006704:	1c41      	adds	r1, r0, #1
 8006706:	d1c8      	bne.n	800669a <__sflush_r+0x32>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0c5      	beq.n	800669a <__sflush_r+0x32>
 800670e:	2b1d      	cmp	r3, #29
 8006710:	d001      	beq.n	8006716 <__sflush_r+0xae>
 8006712:	2b16      	cmp	r3, #22
 8006714:	d101      	bne.n	800671a <__sflush_r+0xb2>
 8006716:	602f      	str	r7, [r5, #0]
 8006718:	e7b2      	b.n	8006680 <__sflush_r+0x18>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	e7ae      	b.n	8006682 <__sflush_r+0x1a>
 8006724:	690f      	ldr	r7, [r1, #16]
 8006726:	2f00      	cmp	r7, #0
 8006728:	d0aa      	beq.n	8006680 <__sflush_r+0x18>
 800672a:	0793      	lsls	r3, r2, #30
 800672c:	bf18      	it	ne
 800672e:	2300      	movne	r3, #0
 8006730:	680e      	ldr	r6, [r1, #0]
 8006732:	bf08      	it	eq
 8006734:	694b      	ldreq	r3, [r1, #20]
 8006736:	1bf6      	subs	r6, r6, r7
 8006738:	600f      	str	r7, [r1, #0]
 800673a:	608b      	str	r3, [r1, #8]
 800673c:	2e00      	cmp	r6, #0
 800673e:	dd9f      	ble.n	8006680 <__sflush_r+0x18>
 8006740:	4633      	mov	r3, r6
 8006742:	463a      	mov	r2, r7
 8006744:	4628      	mov	r0, r5
 8006746:	6a21      	ldr	r1, [r4, #32]
 8006748:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800674c:	47e0      	blx	ip
 800674e:	2800      	cmp	r0, #0
 8006750:	dc06      	bgt.n	8006760 <__sflush_r+0xf8>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	e790      	b.n	8006682 <__sflush_r+0x1a>
 8006760:	4407      	add	r7, r0
 8006762:	1a36      	subs	r6, r6, r0
 8006764:	e7ea      	b.n	800673c <__sflush_r+0xd4>
 8006766:	bf00      	nop
 8006768:	dfbffffe 	.word	0xdfbffffe

0800676c <_fflush_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	690b      	ldr	r3, [r1, #16]
 8006770:	4605      	mov	r5, r0
 8006772:	460c      	mov	r4, r1
 8006774:	b913      	cbnz	r3, 800677c <_fflush_r+0x10>
 8006776:	2500      	movs	r5, #0
 8006778:	4628      	mov	r0, r5
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	b118      	cbz	r0, 8006786 <_fflush_r+0x1a>
 800677e:	6a03      	ldr	r3, [r0, #32]
 8006780:	b90b      	cbnz	r3, 8006786 <_fflush_r+0x1a>
 8006782:	f7ff f9a3 	bl	8005acc <__sinit>
 8006786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f3      	beq.n	8006776 <_fflush_r+0xa>
 800678e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006790:	07d0      	lsls	r0, r2, #31
 8006792:	d404      	bmi.n	800679e <_fflush_r+0x32>
 8006794:	0599      	lsls	r1, r3, #22
 8006796:	d402      	bmi.n	800679e <_fflush_r+0x32>
 8006798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679a:	f7ff fb8b 	bl	8005eb4 <__retarget_lock_acquire_recursive>
 800679e:	4628      	mov	r0, r5
 80067a0:	4621      	mov	r1, r4
 80067a2:	f7ff ff61 	bl	8006668 <__sflush_r>
 80067a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a8:	4605      	mov	r5, r0
 80067aa:	07da      	lsls	r2, r3, #31
 80067ac:	d4e4      	bmi.n	8006778 <_fflush_r+0xc>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	059b      	lsls	r3, r3, #22
 80067b2:	d4e1      	bmi.n	8006778 <_fflush_r+0xc>
 80067b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b6:	f7ff fb7e 	bl	8005eb6 <__retarget_lock_release_recursive>
 80067ba:	e7dd      	b.n	8006778 <_fflush_r+0xc>

080067bc <__swhatbuf_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	4615      	mov	r5, r2
 80067c6:	2900      	cmp	r1, #0
 80067c8:	461e      	mov	r6, r3
 80067ca:	b096      	sub	sp, #88	; 0x58
 80067cc:	da0c      	bge.n	80067e8 <__swhatbuf_r+0x2c>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	2100      	movs	r1, #0
 80067d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067d6:	bf0c      	ite	eq
 80067d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80067dc:	2340      	movne	r3, #64	; 0x40
 80067de:	2000      	movs	r0, #0
 80067e0:	6031      	str	r1, [r6, #0]
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	b016      	add	sp, #88	; 0x58
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	466a      	mov	r2, sp
 80067ea:	f000 f849 	bl	8006880 <_fstat_r>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	dbed      	blt.n	80067ce <__swhatbuf_r+0x12>
 80067f2:	9901      	ldr	r1, [sp, #4]
 80067f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80067f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80067fc:	4259      	negs	r1, r3
 80067fe:	4159      	adcs	r1, r3
 8006800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006804:	e7eb      	b.n	80067de <__swhatbuf_r+0x22>

08006806 <__smakebuf_r>:
 8006806:	898b      	ldrh	r3, [r1, #12]
 8006808:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800680a:	079d      	lsls	r5, r3, #30
 800680c:	4606      	mov	r6, r0
 800680e:	460c      	mov	r4, r1
 8006810:	d507      	bpl.n	8006822 <__smakebuf_r+0x1c>
 8006812:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	2301      	movs	r3, #1
 800681c:	6163      	str	r3, [r4, #20]
 800681e:	b002      	add	sp, #8
 8006820:	bd70      	pop	{r4, r5, r6, pc}
 8006822:	466a      	mov	r2, sp
 8006824:	ab01      	add	r3, sp, #4
 8006826:	f7ff ffc9 	bl	80067bc <__swhatbuf_r>
 800682a:	9900      	ldr	r1, [sp, #0]
 800682c:	4605      	mov	r5, r0
 800682e:	4630      	mov	r0, r6
 8006830:	f7ff fbb8 	bl	8005fa4 <_malloc_r>
 8006834:	b948      	cbnz	r0, 800684a <__smakebuf_r+0x44>
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	059a      	lsls	r2, r3, #22
 800683c:	d4ef      	bmi.n	800681e <__smakebuf_r+0x18>
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	f043 0302 	orr.w	r3, r3, #2
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	e7e3      	b.n	8006812 <__smakebuf_r+0xc>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	6020      	str	r0, [r4, #0]
 800684e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	9b00      	ldr	r3, [sp, #0]
 8006856:	6120      	str	r0, [r4, #16]
 8006858:	6163      	str	r3, [r4, #20]
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	b15b      	cbz	r3, 8006876 <__smakebuf_r+0x70>
 800685e:	4630      	mov	r0, r6
 8006860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006864:	f000 f81e 	bl	80068a4 <_isatty_r>
 8006868:	b128      	cbz	r0, 8006876 <__smakebuf_r+0x70>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	431d      	orrs	r5, r3
 800687a:	81a5      	strh	r5, [r4, #12]
 800687c:	e7cf      	b.n	800681e <__smakebuf_r+0x18>
	...

08006880 <_fstat_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	2300      	movs	r3, #0
 8006884:	4d06      	ldr	r5, [pc, #24]	; (80068a0 <_fstat_r+0x20>)
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	4611      	mov	r1, r2
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	f7fd fc6a 	bl	8004166 <_fstat>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d102      	bne.n	800689c <_fstat_r+0x1c>
 8006896:	682b      	ldr	r3, [r5, #0]
 8006898:	b103      	cbz	r3, 800689c <_fstat_r+0x1c>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	2000074c 	.word	0x2000074c

080068a4 <_isatty_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	2300      	movs	r3, #0
 80068a8:	4d05      	ldr	r5, [pc, #20]	; (80068c0 <_isatty_r+0x1c>)
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fd fc68 	bl	8004184 <_isatty>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_isatty_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_isatty_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	2000074c 	.word	0x2000074c

080068c4 <_sbrk_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	2300      	movs	r3, #0
 80068c8:	4d05      	ldr	r5, [pc, #20]	; (80068e0 <_sbrk_r+0x1c>)
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	f7fd fc6e 	bl	80041b0 <_sbrk>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_sbrk_r+0x1a>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_sbrk_r+0x1a>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	2000074c 	.word	0x2000074c

080068e4 <memchr>:
 80068e4:	4603      	mov	r3, r0
 80068e6:	b510      	push	{r4, lr}
 80068e8:	b2c9      	uxtb	r1, r1
 80068ea:	4402      	add	r2, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	d101      	bne.n	80068f6 <memchr+0x12>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e003      	b.n	80068fe <memchr+0x1a>
 80068f6:	7804      	ldrb	r4, [r0, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	428c      	cmp	r4, r1
 80068fc:	d1f6      	bne.n	80068ec <memchr+0x8>
 80068fe:	bd10      	pop	{r4, pc}

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
