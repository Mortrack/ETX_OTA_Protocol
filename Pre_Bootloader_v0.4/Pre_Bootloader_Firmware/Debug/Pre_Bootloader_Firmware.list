
Pre_Bootloader_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc4  08001cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc4  08001cc4  00011cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08001cd8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001cd8  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ace  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001572  00000000  00000000  00023b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  000250b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003cb  00000000  00000000  00025600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a3a  00000000  00000000  000259cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d7c  00000000  00000000  0003c405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080014  00000000  00000000  00043181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001290  00000000  00000000  000c3198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000c4428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001888 	.word	0x08001888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001888 	.word	0x08001888

0800014c <crc32_mpeg2>:
        0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
        0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4,
};												/**< @brief Global 32-bit CRC (MPEG-2) Lookup Table. */

uint32_t crc32_mpeg2(uint8_t *p_data, uint32_t data_length)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    /** <b>Local variable checksum:</b> Will hold the resulting checksum of the 32-bit CRC Hash Function to be calculated. @note A checksum is any sort of mathematical operation that it is performed on data to represent its number of bits in a transmission message. This is usually used by programmers to detect high-level errors within data transmissions. The way this is used is prior to transmission, such that every piece of data or file can be assigned a checksum value after running a cryptographic has function, which in this particular case, the has function is 32-bit CRC. */
    uint32_t checksum = 0xFFFFFFFF;
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	617b      	str	r3, [r7, #20]

    /* Validate the length of the data from which it is being requested to calculate the 32-bit CRC. */
    if (data_length == 0xFFFFFFFF)
 800015c:	683b      	ldr	r3, [r7, #0]
 800015e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000162:	d101      	bne.n	8000168 <crc32_mpeg2+0x1c>
    {
    	return checksum;
 8000164:	697b      	ldr	r3, [r7, #20]
 8000166:	e01c      	b.n	80001a2 <crc32_mpeg2+0x56>
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 8000168:	2300      	movs	r3, #0
 800016a:	613b      	str	r3, [r7, #16]
 800016c:	e014      	b.n	8000198 <crc32_mpeg2+0x4c>
    {
        uint8_t top = (uint8_t) (checksum >> 24);
 800016e:	697b      	ldr	r3, [r7, #20]
 8000170:	0e1b      	lsrs	r3, r3, #24
 8000172:	73fb      	strb	r3, [r7, #15]
        top ^= p_data[i];
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	693b      	ldr	r3, [r7, #16]
 8000178:	4413      	add	r3, r2
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	7bfb      	ldrb	r3, [r7, #15]
 800017e:	4053      	eors	r3, r2
 8000180:	73fb      	strb	r3, [r7, #15]
        checksum = (checksum << 8) ^ crc_table[top];
 8000182:	697b      	ldr	r3, [r7, #20]
 8000184:	021a      	lsls	r2, r3, #8
 8000186:	7bfb      	ldrb	r3, [r7, #15]
 8000188:	4908      	ldr	r1, [pc, #32]	; (80001ac <crc32_mpeg2+0x60>)
 800018a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800018e:	4053      	eors	r3, r2
 8000190:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i<data_length; i++)
 8000192:	693b      	ldr	r3, [r7, #16]
 8000194:	3301      	adds	r3, #1
 8000196:	613b      	str	r3, [r7, #16]
 8000198:	693a      	ldr	r2, [r7, #16]
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3e6      	bcc.n	800016e <crc32_mpeg2+0x22>
    }
    return checksum;
 80001a0:	697b      	ldr	r3, [r7, #20]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	371c      	adds	r7, #28
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	080018a0 	.word	0x080018a0

080001b0 <firmware_update_configurations_init>:
 * @date September 26, 2023.
 */
static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

FirmUpdConf_Status firmware_update_configurations_init()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Data Block to which the @ref p_most_recent_val pointer points to. */
	uint32_t cal_crc;
	/** <b>Local variable p_next_val:</b> Firmware Update Configurations Block pointer that should point to the Firmware Update Configurations Block located right after the one with the most recently written value (i.e., right after the Data Block to which the @ref p_most_recent_val pointer points to). */
	firmware_update_config_t *p_next_val;

	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 80001b6:	4b27      	ldr	r3, [pc, #156]	; (8000254 <firmware_update_configurations_init+0xa4>)
 80001b8:	4a27      	ldr	r2, [pc, #156]	; (8000258 <firmware_update_configurations_init+0xa8>)
 80001ba:	601a      	str	r2, [r3, #0]

	/* Cycle through flash until an erased value is found. */
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 80001bc:	4b27      	ldr	r3, [pc, #156]	; (800025c <firmware_update_configurations_init+0xac>)
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	e02b      	b.n	800021a <firmware_update_configurations_init+0x6a>
	{
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	7fdb      	ldrb	r3, [r3, #31]
 80001c6:	2bff      	cmp	r3, #255	; 0xff
 80001c8:	d121      	bne.n	800020e <firmware_update_configurations_init+0x5e>
		{
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 80001ca:	4b22      	ldr	r3, [pc, #136]	; (8000254 <firmware_update_configurations_init+0xa4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	7fdb      	ldrb	r3, [r3, #31]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d11c      	bne.n	800020e <firmware_update_configurations_init+0x5e>
			{
				/* Calculate and verify the 32-bit CRC of @ref p_most_recent_val . If validation is successful, then proceed normally. Otherwise, ignore the current Data Block that @ref p_most_recent_val is pointing towards to and keep searching. */
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <firmware_update_configurations_init+0xa4>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	3304      	adds	r3, #4
 80001da:	221c      	movs	r2, #28
 80001dc:	4611      	mov	r1, r2
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <crc32_mpeg2>
 80001e4:	60b8      	str	r0, [r7, #8]
				if(cal_crc != p_most_recent_val->crc32)
 80001e6:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <firmware_update_configurations_init+0xa4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	68ba      	ldr	r2, [r7, #8]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d018      	beq.n	8000224 <firmware_update_configurations_init+0x74>
				{
					/* Since the Flash Memory has been identified to be corrupted, erase the contents of the two Flash Memory pages of the Firmware Update Configurations sub-module. */
					ret = restore_firm_updt_config_flash_memory();
 80001f2:	f000 f909 	bl	8000408 <restore_firm_updt_config_flash_memory>
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
					if (ret != FIRM_UPDT_CONF_EC_OK)
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <firmware_update_configurations_init+0x54>
					{
						return FIRM_UPDT_CONF_EC_CRPT;
 8000200:	2305      	movs	r3, #5
 8000202:	e022      	b.n	800024a <firmware_update_configurations_init+0x9a>
					}

					/* We define that there is no data in the Flash Memory pages of the Firmware Update Configurations sub-module. */
					p_most_recent_val = NULL;
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <firmware_update_configurations_init+0xa4>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]

					return FIRM_UPDT_CONF_EC_OK;
 800020a:	2300      	movs	r3, #0
 800020c:	e01d      	b.n	800024a <firmware_update_configurations_init+0x9a>
				}
				break;
			}
		}
		p_most_recent_val = p_next_val;
 800020e:	4a11      	ldr	r2, [pc, #68]	; (8000254 <firmware_update_configurations_init+0xa4>)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	6013      	str	r3, [r2, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3320      	adds	r3, #32
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4a10      	ldr	r2, [pc, #64]	; (8000260 <firmware_update_configurations_init+0xb0>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d3cf      	bcc.n	80001c2 <firmware_update_configurations_init+0x12>
 8000222:	e000      	b.n	8000226 <firmware_update_configurations_init+0x76>
				break;
 8000224:	bf00      	nop
	}

	/* If the end of the for-loop is reached and if last location is erased, then there is currently no data in the Firmware Update Configuration's designated Flash Memory pages. */
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <firmware_update_configurations_init+0xb0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d107      	bne.n	800023e <firmware_update_configurations_init+0x8e>
	{
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <firmware_update_configurations_init+0xa4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	7fdb      	ldrb	r3, [r3, #31]
 8000234:	2bff      	cmp	r3, #255	; 0xff
 8000236:	d102      	bne.n	800023e <firmware_update_configurations_init+0x8e>
		{
			p_most_recent_val = NULL;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <firmware_update_configurations_init+0xa4>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
		}
	}

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 800023e:	f000 f903 	bl	8000448 <prep_page_swap>
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]

	return ret;
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	b2db      	uxtb	r3, r3
}
 800024a:	4618      	mov	r0, r3
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000002c 	.word	0x2000002c
 8000258:	0801efe0 	.word	0x0801efe0
 800025c:	0801e000 	.word	0x0801e000
 8000260:	0801f000 	.word	0x0801f000

08000264 <firmware_update_configurations_read>:

FirmUpdConf_Status firmware_update_configurations_read(firmware_update_config_data_t *p_data)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	firmware_update_config_t *p_current_val = p_most_recent_val;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <firmware_update_configurations_read+0x30>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	60fb      	str	r3, [r7, #12]
	if (p_current_val == NULL)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d101      	bne.n	800027c <firmware_update_configurations_read+0x18>
	{
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <firmware_update_configurations_read+0x34>)
 800027a:	60fb      	str	r3, [r7, #12]
	}

	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	3304      	adds	r3, #4
 8000280:	2218      	movs	r2, #24
 8000282:	4619      	mov	r1, r3
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f001 faf1 	bl	800186c <memcpy>

	return FIRM_UPDT_CONF_EC_OK;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000002c 	.word	0x2000002c
 8000298:	0801e000 	.word	0x0801e000

0800029c <firmware_update_configurations_write>:

FirmUpdConf_Status firmware_update_configurations_write(firmware_update_config_data_t *p_data)
{
 800029c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80002a0:	b090      	sub	sp, #64	; 0x40
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function. */
	uint16_t ret;
	/**	<b>Local variable new_val_struct:</b> New Data Block into which we will pass the data that wants to be written and where we will also set the corresponding flag and CRC32 values for it. */
	firmware_update_config_t new_val_struct;
	/**	<b>Local pointer p_new_val_struct:</b> Pointer to the \c new_val_struct data but in \c uint32_t Type. */
	uint32_t *p_new_val_struct = (uint32_t *) &new_val_struct;
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	637b      	str	r3, [r7, #52]	; 0x34
	/**	<b>Local pointer p_next_val:</b> @ref firmware_update_config_t Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	firmware_update_config_t *p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 80002ac:	4b53      	ldr	r3, [pc, #332]	; (80003fc <firmware_update_configurations_write+0x160>)
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* We pass the received data into a new Data Block structure and we calculate and also set its corresponding 32-bit CRC. */
	new_val_struct.flags.is_erased = FLASH_BLOCK_NOT_ERASED;
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	new_val_struct.flags.reserved1 = DATA_BLOCK_8BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002b6:	23ff      	movs	r3, #255	; 0xff
 80002b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	new_val_struct.flags.reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002c0:	853b      	strh	r3, [r7, #40]	; 0x28
	p_data->reserved1 = DATA_BLOCK_32BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f04f 32ff 	mov.w	r2, #4294967295
 80002c8:	741a      	strb	r2, [r3, #16]
 80002ca:	f04f 32ff 	mov.w	r2, #4294967295
 80002ce:	745a      	strb	r2, [r3, #17]
 80002d0:	f04f 32ff 	mov.w	r2, #4294967295
 80002d4:	749a      	strb	r2, [r3, #18]
 80002d6:	f04f 32ff 	mov.w	r2, #4294967295
 80002da:	74da      	strb	r2, [r3, #19]
	p_data->reserved2 = DATA_BLOCK_16BIT_ERASED_VALUE; // Make sure to keep reserved data's bits set to 1's.
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f04f 32ff 	mov.w	r2, #4294967295
 80002e2:	751a      	strb	r2, [r3, #20]
 80002e4:	f04f 32ff 	mov.w	r2, #4294967295
 80002e8:	755a      	strb	r2, [r3, #21]
	memcpy(&new_val_struct.data, p_data, FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f107 0410 	add.w	r4, r7, #16
 80002f0:	461d      	mov	r5, r3
 80002f2:	6828      	ldr	r0, [r5, #0]
 80002f4:	6869      	ldr	r1, [r5, #4]
 80002f6:	68aa      	ldr	r2, [r5, #8]
 80002f8:	68eb      	ldr	r3, [r5, #12]
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	6928      	ldr	r0, [r5, #16]
 80002fe:	6969      	ldr	r1, [r5, #20]
 8000300:	c403      	stmia	r4!, {r0, r1}
	new_val_struct.crc32 = crc32_mpeg2((uint8_t *) &new_val_struct.data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8000302:	231c      	movs	r3, #28
 8000304:	461a      	mov	r2, r3
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	3304      	adds	r3, #4
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff1c 	bl	800014c <crc32_mpeg2>
 8000314:	4603      	mov	r3, r0
 8000316:	60fb      	str	r3, [r7, #12]

	/* We calculate the next available address. */
	if (p_most_recent_val != NULL)
 8000318:	4b39      	ldr	r3, [pc, #228]	; (8000400 <firmware_update_configurations_write+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d009      	beq.n	8000334 <firmware_update_configurations_write+0x98>
	{
		p_next_val = p_most_recent_val + 1;
 8000320:	4b37      	ldr	r3, [pc, #220]	; (8000400 <firmware_update_configurations_write+0x164>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3320      	adds	r3, #32
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8000328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800032a:	4a36      	ldr	r2, [pc, #216]	; (8000404 <firmware_update_configurations_write+0x168>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d101      	bne.n	8000334 <firmware_update_configurations_write+0x98>
		{
			p_next_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8000330:	4b32      	ldr	r3, [pc, #200]	; (80003fc <firmware_update_configurations_write+0x160>)
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
	}
	/**	<b>Local pointer p_next_val_in_words:</b> 32-bits Type Pointer that will point towards the address of the next available data block of the @ref firmware_update_config . */
	uint32_t *p_next_val_in_words = (uint32_t *) p_next_val;
 8000334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000336:	633b      	str	r3, [r7, #48]	; 0x30

	/* We unlock our MCU/MPU's Flash Memory to be able to write in it. */
	ret = HAL_FLASH_Unlock();
 8000338:	f000 fcfe 	bl	8000d38 <HAL_FLASH_Unlock>
 800033c:	4603      	mov	r3, r0
 800033e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ret = HAL_ret_handler(ret);
 8000340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f8f7 	bl	8000538 <HAL_ret_handler>
 800034a:	4603      	mov	r3, r0
 800034c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (ret != HAL_OK)
 800034e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <firmware_update_configurations_write+0xbe>
	{
		return ret;
 8000354:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000356:	b2db      	uxtb	r3, r3
 8000358:	e04a      	b.n	80003f0 <firmware_update_configurations_write+0x154>
	}

	/* Write the new Firmware Update Configuration's Data Block into the corresponding Flash Memory address. */
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 800035a:	2300      	movs	r3, #0
 800035c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000360:	e027      	b.n	80003b2 <firmware_update_configurations_write+0x116>
	{
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
								(uint32_t) (p_next_val_in_words + words_written),
 8000362:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800036a:	4413      	add	r3, r2
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800036c:	4619      	mov	r1, r3
							    p_new_val_struct[words_written]);
 800036e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000376:	4413      	add	r3, r2
 8000378:	681b      	ldr	r3, [r3, #0]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800037a:	2200      	movs	r2, #0
 800037c:	4698      	mov	r8, r3
 800037e:	4691      	mov	r9, r2
 8000380:	4642      	mov	r2, r8
 8000382:	464b      	mov	r3, r9
 8000384:	2002      	movs	r0, #2
 8000386:	f000 fc67 	bl	8000c58 <HAL_FLASH_Program>
 800038a:	4603      	mov	r3, r0
 800038c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		ret = HAL_ret_handler(ret);
 800038e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000390:	b2db      	uxtb	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f8d0 	bl	8000538 <HAL_ret_handler>
 8000398:	4603      	mov	r3, r0
 800039a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (ret != HAL_OK)
 800039c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <firmware_update_configurations_write+0x10c>
		{
			return ret;
 80003a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	e023      	b.n	80003f0 <firmware_update_configurations_write+0x154>
	for (uint8_t words_written=0; words_written<FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE; words_written++)
 80003a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80003ac:	3301      	adds	r3, #1
 80003ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80003b2:	2208      	movs	r2, #8
 80003b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d3d2      	bcc.n	8000362 <firmware_update_configurations_write+0xc6>
		}
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 80003bc:	f000 fce2 	bl	8000d84 <HAL_FLASH_Lock>
 80003c0:	4603      	mov	r3, r0
 80003c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ret = HAL_ret_handler(ret);
 80003c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f8b5 	bl	8000538 <HAL_ret_handler>
 80003ce:	4603      	mov	r3, r0
 80003d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (ret != HAL_OK)
 80003d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <firmware_update_configurations_write+0x142>
	{
		return ret;
 80003d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	e008      	b.n	80003f0 <firmware_update_configurations_write+0x154>
	}

	/* Update the @ref p_most_recent_val pointer to the most recent Data Block of the Firmware Update Configurations sub-module. */
	p_most_recent_val = p_next_val;
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <firmware_update_configurations_write+0x164>)
 80003e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e2:	6013      	str	r3, [r2, #0]

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 80003e4:	f000 f830 	bl	8000448 <prep_page_swap>
 80003e8:	4603      	mov	r3, r0
 80003ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

	return ret;
 80003ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003ee:	b2db      	uxtb	r3, r3
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3740      	adds	r7, #64	; 0x40
 80003f4:	46bd      	mov	sp, r7
 80003f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80003fa:	bf00      	nop
 80003fc:	0801e000 	.word	0x0801e000
 8000400:	2000002c 	.word	0x2000002c
 8000404:	0801f000 	.word	0x0801f000

08000408 <restore_firm_updt_config_flash_memory>:

static FirmUpdConf_Status restore_firm_updt_config_flash_memory()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function. */
	uint16_t ret;

	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <restore_firm_updt_config_flash_memory+0x38>)
 8000410:	f000 f84e 	bl	80004b0 <page_erase>
 8000414:	4603      	mov	r3, r0
 8000416:	80fb      	strh	r3, [r7, #6]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <restore_firm_updt_config_flash_memory+0x1c>
	{
		return ret;
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	b2db      	uxtb	r3, r3
 8000422:	e009      	b.n	8000438 <restore_firm_updt_config_flash_memory+0x30>
	}
	page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <restore_firm_updt_config_flash_memory+0x3c>)
 8000426:	f000 f843 	bl	80004b0 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <restore_firm_updt_config_flash_memory+0x2e>
	{
		return ret;
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	e000      	b.n	8000438 <restore_firm_updt_config_flash_memory+0x30>
	}

	return FIRM_UPDT_CONF_EC_OK;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	0801e000 	.word	0x0801e000
 8000444:	0801e800 	.word	0x0801e800

08000448 <prep_page_swap>:

static FirmUpdConf_Status prep_page_swap()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function. */
	uint16_t ret;

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <prep_page_swap+0x58>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <prep_page_swap+0x5c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d109      	bne.n	800046c <prep_page_swap+0x24>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <prep_page_swap+0x60>)
 800045a:	7fdb      	ldrb	r3, [r3, #31]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 800045c:	2b00      	cmp	r3, #0
 800045e:	d105      	bne.n	800046c <prep_page_swap+0x24>
	{
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <prep_page_swap+0x64>)
 8000462:	f000 f825 	bl	80004b0 <page_erase>
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
 800046a:	e012      	b.n	8000492 <prep_page_swap+0x4a>
	}
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <prep_page_swap+0x58>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <prep_page_swap+0x64>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d10b      	bne.n	800048e <prep_page_swap+0x46>
			(p_most_recent_val-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <prep_page_swap+0x58>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b20      	subs	r3, #32
 800047c:	7fdb      	ldrb	r3, [r3, #31]
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 800047e:	2b00      	cmp	r3, #0
 8000480:	d105      	bne.n	800048e <prep_page_swap+0x46>
	{
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8000482:	4808      	ldr	r0, [pc, #32]	; (80004a4 <prep_page_swap+0x5c>)
 8000484:	f000 f814 	bl	80004b0 <page_erase>
 8000488:	4603      	mov	r3, r0
 800048a:	80fb      	strh	r3, [r7, #6]
 800048c:	e001      	b.n	8000492 <prep_page_swap+0x4a>
	}
	else
	{
		ret = FIRM_UPDT_CONF_EC_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	80fb      	strh	r3, [r7, #6]
	}

	return ret;
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	b2db      	uxtb	r3, r3
}
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000002c 	.word	0x2000002c
 80004a4:	0801e000 	.word	0x0801e000
 80004a8:	0801efe0 	.word	0x0801efe0
 80004ac:	0801e800 	.word	0x0801e800

080004b0 <page_erase>:

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 80004b8:	f000 fc3e 	bl	8000d38 <HAL_FLASH_Unlock>
 80004bc:	4603      	mov	r3, r0
 80004be:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 80004c0:	7ffb      	ldrb	r3, [r7, #31]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f838 	bl	8000538 <HAL_ret_handler>
 80004c8:	4603      	mov	r3, r0
 80004ca:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 80004cc:	7ffb      	ldrb	r3, [r7, #31]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <page_erase+0x26>
	{
		return ret;
 80004d2:	7ffb      	ldrb	r3, [r7, #31]
 80004d4:	e02c      	b.n	8000530 <page_erase+0x80>
	}

	/* Erase desired Flash Memory page. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 80004da:	2301      	movs	r3, #1
 80004dc:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = 1U;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fd09 	bl	8000f08 <HAL_FLASHEx_Erase>
 80004f6:	4603      	mov	r3, r0
 80004f8:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 80004fa:	7ffb      	ldrb	r3, [r7, #31]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f81b 	bl	8000538 <HAL_ret_handler>
 8000502:	4603      	mov	r3, r0
 8000504:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8000506:	7ffb      	ldrb	r3, [r7, #31]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <page_erase+0x60>
	{
		return ret;
 800050c:	7ffb      	ldrb	r3, [r7, #31]
 800050e:	e00f      	b.n	8000530 <page_erase+0x80>
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8000510:	f000 fc38 	bl	8000d84 <HAL_FLASH_Lock>
 8000514:	4603      	mov	r3, r0
 8000516:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8000518:	7ffb      	ldrb	r3, [r7, #31]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f80c 	bl	8000538 <HAL_ret_handler>
 8000520:	4603      	mov	r3, r0
 8000522:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8000524:	7ffb      	ldrb	r3, [r7, #31]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <page_erase+0x7e>
	{
		return ret;
 800052a:	7ffb      	ldrb	r3, [r7, #31]
 800052c:	e000      	b.n	8000530 <page_erase+0x80>
	}

	return FIRM_UPDT_CONF_EC_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <HAL_ret_handler>:

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d006      	beq.n	8000556 <HAL_ret_handler+0x1e>
 8000548:	2b00      	cmp	r3, #0
 800054a:	dd06      	ble.n	800055a <HAL_ret_handler+0x22>
 800054c:	3b02      	subs	r3, #2
 800054e:	2b01      	cmp	r3, #1
 8000550:	d803      	bhi.n	800055a <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 8000552:	2302      	movs	r3, #2
 8000554:	e002      	b.n	800055c <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8000556:	2304      	movs	r3, #4
 8000558:	e000      	b.n	800055c <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 800055a:	79fb      	ldrb	r3, [r7, #7]
    }
}
 800055c:	4618      	mov	r0, r3
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
	...

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa13 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f82d 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f865 	bl	8000644 <MX_GPIO_Init>

  /** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref PRE_BL_Status function type. */
  uint8_t ret;

  /* We initialize the Firmware Update Configurations sub-module to be able to write and read data from it. */
  ret = custom_firmware_update_config_init();
 800057a:	f000 f879 	bl	8000670 <custom_firmware_update_config_init>
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  if (ret != FIRM_UPDT_CONF_EC_OK)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d000      	beq.n	800058a <main+0x22>
  {
	  while (1);
 8000588:	e7fe      	b.n	8000588 <main+0x20>
  }

  /* Validate if there is a Bootloader Firmware Image pending to be installed and, if true, install it. Otherwise, continue with the program. */
  switch (fw_config.is_bl_fw_install_pending)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0x64>)
 800058c:	7ddb      	ldrb	r3, [r3, #23]
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d006      	beq.n	80005a0 <main+0x38>
 8000592:	2bff      	cmp	r3, #255	; 0xff
 8000594:	dc18      	bgt.n	80005c8 <main+0x60>
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <main+0x38>
 800059a:	2b01      	cmp	r3, #1
 800059c:	d002      	beq.n	80005a4 <main+0x3c>
 800059e:	e013      	b.n	80005c8 <main+0x60>
  {
  	  case DATA_BLOCK_8BIT_ERASED_VALUE:
	  case NOT_PENDING:
		  goto_bootloader_firmware();
 80005a0:	f000 f8ca 	bl	8000738 <goto_bootloader_firmware>
	  case IS_PENDING:
		  if ((validate_application_firmware()!=PRE_BL_EC_OK) || (fw_config.is_bl_fw_stored_in_app_fw!=BT_FW_STORED_IN_APP_FW))
 80005a4:	f000 f89c 	bl	80006e0 <validate_application_firmware>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d103      	bne.n	80005b6 <main+0x4e>
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <main+0x64>)
 80005b0:	7d9b      	ldrb	r3, [r3, #22]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d001      	beq.n	80005ba <main+0x52>
		  {
			  goto_bootloader_firmware();
 80005b6:	f000 f8bf 	bl	8000738 <goto_bootloader_firmware>
		  }
		  ret = install_bl_stored_in_app_fw(&fw_config);
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <main+0x64>)
 80005bc:	f000 f8d0 	bl	8000760 <install_bl_stored_in_app_fw>
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]
		  HAL_NVIC_SystemReset();
 80005c4:	f000 fb37 	bl	8000c36 <HAL_NVIC_SystemReset>
	  default:
		  while (1);
 80005c8:	e7fe      	b.n	80005c8 <main+0x60>
 80005ca:	bf00      	nop
 80005cc:	20000030 	.word	0x20000030

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b090      	sub	sp, #64	; 0x40
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f918 	bl	8001814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fd27 	bl	8001058 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000610:	f000 f8a0 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ff95 	bl	800155c <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000638:	f000 f88c 	bl	8000754 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3740      	adds	r7, #64	; 0x40
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_GPIO_Init+0x28>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <MX_GPIO_Init+0x28>)
 8000650:	f043 0320 	orr.w	r3, r3, #32
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_GPIO_Init+0x28>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000

08000670 <custom_firmware_update_config_init>:

/* USER CODE BEGIN 4 */

static FirmUpdConf_Status custom_firmware_update_config_init()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
	int16_t ret;
	/** <b>Local static variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
	static uint8_t attempts = 0;
	/** <b>Local variable end_tick:</b> Defines the HAL Tick that our MCU/MPU needs to reach so that 0.5 seconds have passed with respect to the moment that this function is called. */
	uint32_t end_tick = HAL_GetTick() + 500;
 8000676:	f000 f9e7 	bl	8000a48 <HAL_GetTick>
 800067a:	4603      	mov	r3, r0
 800067c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000680:	60bb      	str	r3, [r7, #8]
	/** <b>Local variable current_tick:</b> Current HAL Tick in our MCU/MPU. */
	uint32_t current_tick;

	if (attempts > 2)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <custom_firmware_update_config_init+0x68>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d904      	bls.n	8000694 <custom_firmware_update_config_init+0x24>
	{
		return FIRM_UPDT_CONF_EC_ERR;
 800068a:	2304      	movs	r3, #4
 800068c:	e01f      	b.n	80006ce <custom_firmware_update_config_init+0x5e>
	}

	/* Delay of 500 milliseconds. */
	while (current_tick < end_tick)
	{
		current_tick = HAL_GetTick();
 800068e:	f000 f9db 	bl	8000a48 <HAL_GetTick>
 8000692:	60f8      	str	r0, [r7, #12]
	while (current_tick < end_tick)
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3f8      	bcc.n	800068e <custom_firmware_update_config_init+0x1e>
	}

	/* We initialize the Firmware Update Configurations sub-module. */
	ret = firmware_update_configurations_init();
 800069c:	f7ff fd88 	bl	80001b0 <firmware_update_configurations_init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	80fb      	strh	r3, [r7, #6]
    attempts++;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <custom_firmware_update_config_init+0x68>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <custom_firmware_update_config_init+0x68>)
 80006ae:	701a      	strb	r2, [r3, #0]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 80006b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d006      	beq.n	80006c6 <custom_firmware_update_config_init+0x56>
	{
		ret = custom_firmware_update_config_init();
 80006b8:	f7ff ffda 	bl	8000670 <custom_firmware_update_config_init>
 80006bc:	4603      	mov	r3, r0
 80006be:	80fb      	strh	r3, [r7, #6]
        return ret;
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	e003      	b.n	80006ce <custom_firmware_update_config_init+0x5e>
	}

	/* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
	firmware_update_configurations_read(&fw_config);
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <custom_firmware_update_config_init+0x6c>)
 80006c8:	f7ff fdcc 	bl	8000264 <firmware_update_configurations_read>

	return FIRM_UPDT_CONF_EC_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000048 	.word	0x20000048
 80006dc:	20000030 	.word	0x20000030

080006e0 <validate_application_firmware>:

static PRE_BL_Status validate_application_firmware()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	/* Validating the Application Firmware of our MCU/MPU. */
    if ((fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <validate_application_firmware+0x50>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ee:	d003      	beq.n	80006f8 <validate_application_firmware+0x18>
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <validate_application_firmware+0x50>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <validate_application_firmware+0x1c>
	{
		return PRE_BL_EC_ERR;
 80006f8:	2304      	movs	r3, #4
 80006fa:	e015      	b.n	8000728 <validate_application_firmware+0x48>
	}

    if (fw_config.App_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <validate_application_firmware+0x50>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d101      	bne.n	800070a <validate_application_firmware+0x2a>
    {
        return PRE_BL_EC_ERR;
 8000706:	2304      	movs	r3, #4
 8000708:	e00e      	b.n	8000728 <validate_application_firmware+0x48>
    }

    /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Application Firmware. */
	uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <validate_application_firmware+0x50>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	4619      	mov	r1, r3
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <validate_application_firmware+0x54>)
 8000712:	f7ff fd1b 	bl	800014c <crc32_mpeg2>
 8000716:	6078      	str	r0, [r7, #4]
    if (cal_crc != fw_config.App_fw_rec_crc)
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <validate_application_firmware+0x50>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d001      	beq.n	8000726 <validate_application_firmware+0x46>
    {
        return PRE_BL_EC_ERR;
 8000722:	2304      	movs	r3, #4
 8000724:	e000      	b.n	8000728 <validate_application_firmware+0x48>
    }

    return PRE_BL_EC_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000030 	.word	0x20000030
 8000734:	08008000 	.word	0x08008000

08000738 <goto_bootloader_firmware>:

static void goto_bootloader_firmware(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	/* Create function pointer with no arguments that points to the Memory Location Address of the Reset Handler of the Bootloader Firmware. */
	void (*bl_reset_handler) (void) = (void*) (*(volatile uint32_t *) (BOOTLOADER_FIRMWARE_RESET_HANDLER_ADDRESS));
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <goto_bootloader_firmware+0x18>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	607b      	str	r3, [r7, #4]
	/* NOTE: Some MCUs might have already the ASM code available so that the Main Stack Pointer (MSP) is recycled, but this is not the case for all MCUs. */
	/* Therefore, if you were to need to do this from scratch, you would have to do the following: */
	//__set_MSP( ( *(volatile uint32_t *) BOOTLOADER_FIRMWARE_ADDRESS );

	/* Call the Bootloader's Reset Handler. */
	bl_reset_handler();
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4798      	blx	r3
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08002004 	.word	0x08002004

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <install_bl_stored_in_app_fw>:
 * @date September 26, 2023.
 */
static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

ETX_OTA_Status install_bl_stored_in_app_fw(firmware_update_config_data_t *p_fw_config)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	uint8_t  ret;
	/**	<b>Local variable bytes_flashed:</b> Indicator of how many bytes of the identified Bootloader Firmware Image pending to be installed, if any, have been written into the designated Flash Memory of the Bootloader Firmware. */
	uint16_t bytes_flashed = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	84fb      	strh	r3, [r7, #38]	; 0x26
	/**	<b>Local variable p_data:</b> Pointer to the data at which a Bootloader Firmware Image pending to be installed should be located at but in \c uint32_t Type. */
	uint32_t *p_data = (uint32_t *) ETX_APP_FLASH_ADDR;
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <install_bl_stored_in_app_fw+0x114>)
 800076e:	623b      	str	r3, [r7, #32]

    /* Validating that length of the Bootloader Firmware Image pending to be installed is perfectly divisible by 4 bytes. */
    if ((p_fw_config->App_fw_size)%4 != 0)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <install_bl_stored_in_app_fw+0x20>
    {
        return ETX_OTA_EC_ERR;
 800077c:	2304      	movs	r3, #4
 800077e:	e074      	b.n	800086a <install_bl_stored_in_app_fw+0x10a>
    }

	/* Unlock the Flash Memory of our MCU/MPU. */
	ret = HAL_FLASH_Unlock();
 8000780:	f000 fada 	bl	8000d38 <HAL_FLASH_Unlock>
 8000784:	4603      	mov	r3, r0
 8000786:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8000788:	7ffb      	ldrb	r3, [r7, #31]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f876 	bl	800087c <HAL_ret_handler>
 8000790:	4603      	mov	r3, r0
 8000792:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK)
 8000794:	7ffb      	ldrb	r3, [r7, #31]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <install_bl_stored_in_app_fw+0x3e>
	{
		return ret;
 800079a:	7ffb      	ldrb	r3, [r7, #31]
 800079c:	e065      	b.n	800086a <install_bl_stored_in_app_fw+0x10a>

	/* Erase Flash Memory dedicated to our MCU/MPU's Bootloader Firmware. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;

	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = ETX_BL_FLASH_ADDR;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <install_bl_stored_in_app_fw+0x118>)
 80007a8:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = ETX_BL_FLASH_PAGES_SIZE;
 80007aa:	2318      	movs	r3, #24
 80007ac:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fba5 	bl	8000f08 <HAL_FLASHEx_Erase>
 80007be:	4603      	mov	r3, r0
 80007c0:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 80007c2:	7ffb      	ldrb	r3, [r7, #31]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f859 	bl	800087c <HAL_ret_handler>
 80007ca:	4603      	mov	r3, r0
 80007cc:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 80007ce:	7ffb      	ldrb	r3, [r7, #31]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d025      	beq.n	8000820 <install_bl_stored_in_app_fw+0xc0>
	{
		return ret;
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	e048      	b.n	800086a <install_bl_stored_in_app_fw+0x10a>
	}

	/* Write the entire Bootloader Firmware Image into our MCU/MPU's Flash Memory. */
	for ( ; bytes_flashed<p_fw_config->App_fw_size; bytes_flashed+=4)
	{
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80007d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
								(ETX_BL_FLASH_ADDR + bytes_flashed),
 80007da:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80007de:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
								p_data[bytes_flashed/4]);
 80007e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	6a3a      	ldr	r2, [r7, #32]
 80007ec:	4413      	add	r3, r2
 80007ee:	681b      	ldr	r3, [r3, #0]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80007f0:	2200      	movs	r2, #0
 80007f2:	461c      	mov	r4, r3
 80007f4:	4615      	mov	r5, r2
 80007f6:	4622      	mov	r2, r4
 80007f8:	462b      	mov	r3, r5
 80007fa:	2002      	movs	r0, #2
 80007fc:	f000 fa2c 	bl	8000c58 <HAL_FLASH_Program>
 8000800:	4603      	mov	r3, r0
 8000802:	77fb      	strb	r3, [r7, #31]
		ret = HAL_ret_handler(ret);
 8000804:	7ffb      	ldrb	r3, [r7, #31]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f838 	bl	800087c <HAL_ret_handler>
 800080c:	4603      	mov	r3, r0
 800080e:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)
 8000810:	7ffb      	ldrb	r3, [r7, #31]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <install_bl_stored_in_app_fw+0xba>
		{
			return ret;
 8000816:	7ffb      	ldrb	r3, [r7, #31]
 8000818:	e027      	b.n	800086a <install_bl_stored_in_app_fw+0x10a>
	for ( ; bytes_flashed<p_fw_config->App_fw_size; bytes_flashed+=4)
 800081a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800081c:	3304      	adds	r3, #4
 800081e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000820:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3d6      	bcc.n	80007d8 <install_bl_stored_in_app_fw+0x78>
		}
	}

	/* Lock the Flash Memory, just like it originally was before calling this @ref install_bl_stored_in_app_fw function. */
	ret = HAL_FLASH_Lock();
 800082a:	f000 faab 	bl	8000d84 <HAL_FLASH_Lock>
 800082e:	4603      	mov	r3, r0
 8000830:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f821 	bl	800087c <HAL_ret_handler>
 800083a:	4603      	mov	r3, r0
 800083c:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 800083e:	7ffb      	ldrb	r3, [r7, #31]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <install_bl_stored_in_app_fw+0xe8>
	{
		return ret;
 8000844:	7ffb      	ldrb	r3, [r7, #31]
 8000846:	e010      	b.n	800086a <install_bl_stored_in_app_fw+0x10a>
	}

    /* We update the Firmware Update Configuration's settings with respect to the currently installed Bootloader Firmware Image. */
	p_fw_config->BL_fw_size = p_fw_config->App_fw_size;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	601a      	str	r2, [r3, #0]
	p_fw_config->BL_fw_rec_crc = p_fw_config->App_fw_rec_crc;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	605a      	str	r2, [r3, #4]
	p_fw_config->is_bl_fw_install_pending = NOT_PENDING;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	75da      	strb	r2, [r3, #23]
    ret = firmware_update_configurations_write(p_fw_config);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fd1c 	bl	800029c <firmware_update_configurations_write>
 8000864:	4603      	mov	r3, r0
 8000866:	77fb      	strb	r3, [r7, #31]

	return ret;
 8000868:	7ffb      	ldrb	r3, [r7, #31]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bdb0      	pop	{r4, r5, r7, pc}
 8000872:	bf00      	nop
 8000874:	08008000 	.word	0x08008000
 8000878:	08002000 	.word	0x08002000

0800087c <HAL_ret_handler>:

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d006      	beq.n	800089a <HAL_ret_handler+0x1e>
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd06      	ble.n	800089e <HAL_ret_handler+0x22>
 8000890:	3b02      	subs	r3, #2
 8000892:	2b01      	cmp	r3, #1
 8000894:	d803      	bhi.n	800089e <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return ETX_OTA_EC_NR;
 8000896:	2302      	movs	r3, #2
 8000898:	e002      	b.n	80008a0 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return ETX_OTA_EC_ERR;
 800089a:	2304      	movs	r3, #4
 800089c:	e000      	b.n	80008a0 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 800089e:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_MspInit+0x40>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <HAL_MspInit+0x40>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_MspInit+0x40>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x40>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_MspInit+0x40>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_MspInit+0x40>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f875 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
	...

0800094c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800094c:	f7ff fff7 	bl	800093e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000968:	4c09      	ldr	r4, [pc, #36]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f000 ff55 	bl	8001824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fdf5 	bl	8000568 <main>
  bx lr
 800097e:	4770      	bx	lr
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000988:	08001ccc 	.word	0x08001ccc
  ldr r2, =_sbss
 800098c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000990:	20000070 	.word	0x20000070

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x28>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f91d 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff ff7a 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f92b 	bl	8000c3e <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f8fd 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000008 	.word	0x20000008
 8000a44:	2000004c 	.word	0x2000004c

08000a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	2000004c 	.word	0x2000004c

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SystemReset+0x24>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b8a:	4904      	ldr	r1, [pc, #16]	; (8000b9c <__NVIC_SystemReset+0x24>)
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_SystemReset+0x28>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <__NVIC_SystemReset+0x20>
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0004 	.word	0x05fa0004

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff7a 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff33 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff48 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff7a 	bl	8000b14 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff49 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000c3a:	f7ff ff9d 	bl	8000b78 <__NVIC_SystemReset>

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffac 	bl	8000ba4 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_FLASH_Program+0xd8>)
 8000c74:	7e1b      	ldrb	r3, [r3, #24]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_FLASH_Program+0x26>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e054      	b.n	8000d28 <HAL_FLASH_Program+0xd0>
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <HAL_FLASH_Program+0xd8>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c88:	f000 f8a8 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d144      	bne.n	8000d20 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	757b      	strb	r3, [r7, #21]
 8000ca0:	e007      	b.n	8000cb2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d102      	bne.n	8000cae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	757b      	strb	r3, [r7, #21]
 8000cac:	e001      	b.n	8000cb2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	75bb      	strb	r3, [r7, #22]
 8000cb6:	e02d      	b.n	8000d14 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000cb8:	7dbb      	ldrb	r3, [r7, #22]
 8000cba:	005a      	lsls	r2, r3, #1
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	eb02 0c03 	add.w	ip, r2, r3
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	0119      	lsls	r1, r3, #4
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	f1c1 0620 	rsb	r6, r1, #32
 8000cce:	f1a1 0020 	sub.w	r0, r1, #32
 8000cd2:	fa22 f401 	lsr.w	r4, r2, r1
 8000cd6:	fa03 f606 	lsl.w	r6, r3, r6
 8000cda:	4334      	orrs	r4, r6
 8000cdc:	fa23 f000 	lsr.w	r0, r3, r0
 8000ce0:	4304      	orrs	r4, r0
 8000ce2:	fa23 f501 	lsr.w	r5, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4660      	mov	r0, ip
 8000cec:	f000 f85a 	bl	8000da4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cf4:	f000 f872 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_FLASH_Program+0xdc>)
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <HAL_FLASH_Program+0xdc>)
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d107      	bne.n	8000d1e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000d0e:	7dbb      	ldrb	r3, [r7, #22]
 8000d10:	3301      	adds	r3, #1
 8000d12:	75bb      	strb	r3, [r7, #22]
 8000d14:	7dba      	ldrb	r2, [r7, #22]
 8000d16:	7d7b      	ldrb	r3, [r7, #21]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3cd      	bcc.n	8000cb8 <HAL_FLASH_Program+0x60>
 8000d1c:	e000      	b.n	8000d20 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000d1e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_FLASH_Program+0xd8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]

  return status;
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	20000050 	.word	0x20000050
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_FLASH_Unlock+0x40>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00d      	beq.n	8000d6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_FLASH_Unlock+0x40>)
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_FLASH_Unlock+0x44>)
 8000d52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_FLASH_Unlock+0x40>)
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_FLASH_Unlock+0x48>)
 8000d58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_FLASH_Unlock+0x40>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	45670123 	.word	0x45670123
 8000d80:	cdef89ab 	.word	0xcdef89ab

08000d84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_FLASH_Lock+0x1c>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_FLASH_Lock+0x1c>)
 8000d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <FLASH_Program_HalfWord+0x30>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <FLASH_Program_HalfWord+0x34>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <FLASH_Program_HalfWord+0x34>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	801a      	strh	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000050 	.word	0x20000050
 8000dd8:	40022000 	.word	0x40022000

08000ddc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff fe30 	bl	8000a48 <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dea:	e010      	b.n	8000e0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	d00c      	beq.n	8000e0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <FLASH_WaitForLastOperation+0x2e>
 8000dfa:	f7ff fe25 	bl	8000a48 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d201      	bcs.n	8000e0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e025      	b.n	8000e5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1e8      	bne.n	8000dec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e28:	2220      	movs	r2, #32
 8000e2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10b      	bne.n	8000e50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <FLASH_WaitForLastOperation+0x88>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e50:	f000 f80a 	bl	8000e68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000e88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d009      	beq.n	8000eb2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000ea8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <FLASH_SetErrorCode+0x9c>)
 8000ec8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f240 1201 	movw	r2, #257	; 0x101
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <FLASH_SetErrorCode+0x86>
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	61d3      	str	r3, [r2, #28]
}  
 8000eec:	e002      	b.n	8000ef4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <FLASH_SetErrorCode+0x98>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60d3      	str	r3, [r2, #12]
}  
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000
 8000f04:	20000050 	.word	0x20000050

08000f08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_FLASHEx_Erase+0xd0>)
 8000f1c:	7e1b      	ldrb	r3, [r3, #24]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_FLASHEx_Erase+0x1e>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e053      	b.n	8000fce <HAL_FLASHEx_Erase+0xc6>
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_FLASHEx_Erase+0xd0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d116      	bne.n	8000f62 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f38:	f7ff ff50 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d141      	bne.n	8000fc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 f84c 	bl	8000fe0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f4c:	f7ff ff46 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_FLASHEx_Erase+0xd4>)
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_FLASHEx_Erase+0xd4>)
 8000f5a:	f023 0304 	bic.w	r3, r3, #4
 8000f5e:	6113      	str	r3, [r2, #16]
 8000f60:	e031      	b.n	8000fc6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f66:	f7ff ff39 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d12a      	bne.n	8000fc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	e019      	b.n	8000fb4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f000 f849 	bl	8001018 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f8a:	f7ff ff27 	bl	8000ddc <FLASH_WaitForLastOperation>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_FLASHEx_Erase+0xd4>)
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <HAL_FLASHEx_Erase+0xd4>)
 8000f98:	f023 0302 	bic.w	r3, r3, #2
 8000f9c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	601a      	str	r2, [r3, #0]
            break;
 8000faa:	e00c      	b.n	8000fc6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	029a      	lsls	r2, r3, #10
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3dc      	bcc.n	8000f80 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_FLASHEx_Erase+0xd0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	761a      	strb	r2, [r3, #24]

  return status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000050 	.word	0x20000050
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <FLASH_MassErase+0x30>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <FLASH_MassErase+0x34>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <FLASH_MassErase+0x34>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <FLASH_MassErase+0x34>)
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <FLASH_MassErase+0x34>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000050 	.word	0x20000050
 8001014:	40022000 	.word	0x40022000

08001018 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <FLASH_PageErase+0x38>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <FLASH_PageErase+0x3c>)
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <FLASH_PageErase+0x3c>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <FLASH_PageErase+0x3c>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <FLASH_PageErase+0x3c>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <FLASH_PageErase+0x3c>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000050 	.word	0x20000050
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e272      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001084:	4b8f      	ldr	r3, [pc, #572]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x12c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e24c      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
 80010c0:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d6:	4b7b      	ldr	r3, [pc, #492]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7a      	ldr	r2, [pc, #488]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xbc>
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 8001114:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a67      	ldr	r2, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc88 	bl	8000a48 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fc84 	bl	8000a48 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e200      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe4>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc74 	bl	8000a48 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fc70 	bl	8000a48 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1ec      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x10c>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1c0      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc29 	bl	8000a48 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc25 	bl	8000a48 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4927      	ldr	r1, [pc, #156]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc08 	bl	8000a48 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc04 	bl	8000a48 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e180      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03a      	beq.n	80012dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7ff fbe8 	bl	8000a48 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fbe4 	bl	8000a48 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e160      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fa9c 	bl	80017d8 <RCC_Delay>
 80012a0:	e01c      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fbce 	bl	8000a48 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e00f      	b.n	80012d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fbca 	bl	8000a48 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d908      	bls.n	80012d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e146      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e9      	bne.n	80012b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a6 	beq.w	8001436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a87      	ldr	r2, [pc, #540]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b82      	ldr	r3, [pc, #520]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7e      	ldr	r2, [pc, #504]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fb8b 	bl	8000a48 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fb87 	bl	8000a48 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e103      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x312>
 800135c:	4b6f      	ldr	r3, [pc, #444]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x334>
 8001372:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a69      	ldr	r2, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e01c      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x356>
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a60      	ldr	r2, [pc, #384]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	4b5e      	ldr	r3, [pc, #376]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a5d      	ldr	r2, [pc, #372]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fb3b 	bl	8000a48 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fb37 	bl	8000a48 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0b1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ee      	beq.n	80013d6 <HAL_RCC_OscConfig+0x37e>
 80013f8:	e014      	b.n	8001424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb25 	bl	8000a48 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb21 	bl	8000a48 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e09b      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8087 	beq.w	800154e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d061      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d146      	bne.n	80014e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff faf5 	bl	8000a48 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff faf1 	bl	8000a48 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e06d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4921      	ldr	r1, [pc, #132]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	491b      	ldr	r1, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fac5 	bl	8000a48 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fac1 	bl	8000a48 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46a>
 80014e0:	e035      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff faae 	bl	8000a48 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff faaa 	bl	8000a48 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x498>
 800150e:	e01e      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e019      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 800151c:	40021000 	.word	0x40021000
 8001520:	40007000 	.word	0x40007000
 8001524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x500>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	429a      	cmp	r2, r3
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0d0      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d910      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4965      	ldr	r1, [pc, #404]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d040      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e073      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06b      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4936      	ldr	r1, [pc, #216]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff f9fc 	bl	8000a48 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff f9f8 	bl	8000a48 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e053      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d210      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ea:	f000 f821 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490a      	ldr	r1, [pc, #40]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1cc>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f95a 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	08001ca0 	.word	0x08001ca0
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x30>
 800175a:	2b08      	cmp	r3, #8
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x36>
 800175e:	e027      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001762:	613b      	str	r3, [r7, #16]
      break;
 8001764:	e027      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	0c5b      	lsrs	r3, r3, #17
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001792:	fb03 f202 	mul.w	r2, r3, r2
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e004      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	613b      	str	r3, [r7, #16]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	693b      	ldr	r3, [r7, #16]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	007a1200 	.word	0x007a1200
 80017cc:	08001cb0 	.word	0x08001cb0
 80017d0:	08001cc0 	.word	0x08001cc0
 80017d4:	003d0900 	.word	0x003d0900

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f4:	bf00      	nop
  }
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <memset>:
 8001814:	4603      	mov	r3, r0
 8001816:	4402      	add	r2, r0
 8001818:	4293      	cmp	r3, r2
 800181a:	d100      	bne.n	800181e <memset+0xa>
 800181c:	4770      	bx	lr
 800181e:	f803 1b01 	strb.w	r1, [r3], #1
 8001822:	e7f9      	b.n	8001818 <memset+0x4>

08001824 <__libc_init_array>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	2600      	movs	r6, #0
 8001828:	4d0c      	ldr	r5, [pc, #48]	; (800185c <__libc_init_array+0x38>)
 800182a:	4c0d      	ldr	r4, [pc, #52]	; (8001860 <__libc_init_array+0x3c>)
 800182c:	1b64      	subs	r4, r4, r5
 800182e:	10a4      	asrs	r4, r4, #2
 8001830:	42a6      	cmp	r6, r4
 8001832:	d109      	bne.n	8001848 <__libc_init_array+0x24>
 8001834:	f000 f828 	bl	8001888 <_init>
 8001838:	2600      	movs	r6, #0
 800183a:	4d0a      	ldr	r5, [pc, #40]	; (8001864 <__libc_init_array+0x40>)
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <__libc_init_array+0x44>)
 800183e:	1b64      	subs	r4, r4, r5
 8001840:	10a4      	asrs	r4, r4, #2
 8001842:	42a6      	cmp	r6, r4
 8001844:	d105      	bne.n	8001852 <__libc_init_array+0x2e>
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	f855 3b04 	ldr.w	r3, [r5], #4
 800184c:	4798      	blx	r3
 800184e:	3601      	adds	r6, #1
 8001850:	e7ee      	b.n	8001830 <__libc_init_array+0xc>
 8001852:	f855 3b04 	ldr.w	r3, [r5], #4
 8001856:	4798      	blx	r3
 8001858:	3601      	adds	r6, #1
 800185a:	e7f2      	b.n	8001842 <__libc_init_array+0x1e>
 800185c:	08001cc4 	.word	0x08001cc4
 8001860:	08001cc4 	.word	0x08001cc4
 8001864:	08001cc4 	.word	0x08001cc4
 8001868:	08001cc8 	.word	0x08001cc8

0800186c <memcpy>:
 800186c:	440a      	add	r2, r1
 800186e:	4291      	cmp	r1, r2
 8001870:	f100 33ff 	add.w	r3, r0, #4294967295
 8001874:	d100      	bne.n	8001878 <memcpy+0xc>
 8001876:	4770      	bx	lr
 8001878:	b510      	push	{r4, lr}
 800187a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800187e:	4291      	cmp	r1, r2
 8001880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001884:	d1f9      	bne.n	800187a <memcpy+0xe>
 8001886:	bd10      	pop	{r4, pc}

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
