
Application_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  0800d0d4  0800d0d4  0000d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc2c  0800dc2c  00010098  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc2c  0800dc2c  00010098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc2c  0800dc2c  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc2c  0800dc2c  0000dc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc30  0800dc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800dc34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  20000098  0800dccc  00010098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  0800dccc  00010f64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b44a  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f7  00000000  00000000  0001b54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0001db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e8  00000000  00000000  0001e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018954  00000000  00000000  0001ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc08  00000000  00000000  000376ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008643b  00000000  00000000  000452f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ff0  00000000  00000000  000cb730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000ce720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000098 	.word	0x20000098
 8008128:	00000000 	.word	0x00000000
 800812c:	0800d0bc 	.word	0x0800d0bc

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000009c 	.word	0x2000009c
 8008148:	0800d0bc 	.word	0x0800d0bc

0800814c <init_firmware_update_module>:
ETX_OTA_Status init_firmware_update_module(ETX_OTA_hw_Protocol hardware_protocol,
                                           UART_HandleTypeDef *huart,
                                           firmware_update_config_data_t *fw_config,
										   HM10_GPIO_def_t *GPIO_is_hm10_default_settings,
                                           etx_ota_custom_data_t *etx_ota_custom_data)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
    #if ETX_OTA_VERBOSE
        printf("Initializing the Firmware Update Module...\r\n");
    #endif

    /* Persist the requested hardware protocol into which the ETX OTA Protocol will be used on. */
    ETX_OTA_hardware_protocol = hardware_protocol;
 800815c:	4a4a      	ldr	r2, [pc, #296]	; (8008288 <init_firmware_update_module+0x13c>)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	7013      	strb	r3, [r2, #0]

    /* Persist the pointer to the UART into which the ETX OTA Protocol will be used on. */
    p_huart = huart;
 8008162:	4a4a      	ldr	r2, [pc, #296]	; (800828c <init_firmware_update_module+0x140>)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the Firmware Update Configurations sub-module to the one that was given. */
    p_fw_config = fw_config;
 8008168:	4a49      	ldr	r2, [pc, #292]	; (8008290 <init_firmware_update_module+0x144>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the GPIO Definition Type of the GPIO Pin from which it can be requested to reset the Configuration Settings of the HM-10 BT Device to its default settings. */
    p_GPIO_is_hm10_default_settings = GPIO_is_hm10_default_settings;
 800816e:	4a49      	ldr	r2, [pc, #292]	; (8008294 <init_firmware_update_module+0x148>)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6013      	str	r3, [r2, #0]

    /* Persist the pointer to the handling struct of an ETX OTA Custom Data. */
    p_custom_data = etx_ota_custom_data;
 8008174:	4a48      	ldr	r2, [pc, #288]	; (8008298 <init_firmware_update_module+0x14c>)
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	6013      	str	r3, [r2, #0]

    /* Clear SOF bit from ETX OTA Buffer. */
    Rx_Buffer[0] = 0;
 800817a:	4b48      	ldr	r3, [pc, #288]	; (800829c <init_firmware_update_module+0x150>)
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]

    /* Validate the requested hardware protocol to be used and, if required, initialized it. */
    switch (hardware_protocol)
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d076      	beq.n	8008274 <init_firmware_update_module+0x128>
 8008186:	2b01      	cmp	r3, #1
 8008188:	d172      	bne.n	8008270 <init_firmware_update_module+0x124>

            /* Initializing the HM-10 Bluetooth module. */
            #if ETX_OTA_VERBOSE
                printf("Initializing the HM-10 Bluetooth module...\r\n");
            #endif
            init_hm10_module(p_huart);
 800818a:	4b40      	ldr	r3, [pc, #256]	; (800828c <init_firmware_update_module+0x140>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fd96 	bl	8008cc0 <init_hm10_module>

            /* Sending test command to HM-10 BT Device to make sure that it is not in a Bluetooth Connection for the next steps to be made and to make sure that it is currently in working condition. */
            ret = disconnect_hm10_from_bt_address();
 8008194:	f001 f99e 	bl	80094d4 <disconnect_hm10_from_bt_address>
 8008198:	4603      	mov	r3, r0
 800819a:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (ret == HM10_BT_Connection_Status_Unknown)
 800819c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <init_firmware_update_module+0x5a>
            {
				#if ETX_OTA_VERBOSE
					printf("ERROR: Something went wrong whenever sending the initial Test Command sent to the HM-10 BT Device(Bluetooth Connection Status Code returned = %d).\r\n", ret);
				#endif
                return ETX_OTA_EC_ERR;
 80081a2:	2304      	movs	r3, #4
 80081a4:	e06c      	b.n	8008280 <init_firmware_update_module+0x134>
            }

            /* Resetting the Configuration Settings of the HM-10 BT Device to its Default Settings, but only if user is requesting it. */
            if (HAL_GPIO_ReadPin(p_GPIO_is_hm10_default_settings->GPIO_Port, p_GPIO_is_hm10_default_settings->GPIO_Pin) == GPIO_PIN_SET)
 80081a6:	4b3b      	ldr	r3, [pc, #236]	; (8008294 <init_firmware_update_module+0x148>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	4b39      	ldr	r3, [pc, #228]	; (8008294 <init_firmware_update_module+0x148>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	889b      	ldrh	r3, [r3, #4]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f002 fca2 	bl	800ab00 <HAL_GPIO_ReadPin>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d15a      	bne.n	8008278 <init_firmware_update_module+0x12c>
					printf("MCU has been requested to reset the configuration settings of the HM-10 BT Device to its default settings.\r\n");
					printf("Resetting configuration settings of the HM-10 BT Device...\r\n");
				#endif

				/* Restore all the HM-10 Setup values to factory setup. */
				ret = send_hm10_renew_cmd();
 80081c2:	f000 fdfd 	bl	8008dc0 <send_hm10_renew_cmd>
 80081c6:	4603      	mov	r3, r0
 80081c8:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (ret != HM10_EC_OK)
 80081ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <init_firmware_update_module+0x88>
				{
					#if ETX_OTA_VERBOSE
						printf("ERROR: The HM-10 BT device could not be restored to its factory setup via the AT+RENEW Command (Exception Code = %d).\r\n", ret);
					#endif
					return ETX_OTA_EC_ERR;
 80081d0:	2304      	movs	r3, #4
 80081d2:	e055      	b.n	8008280 <init_firmware_update_module+0x134>
				}

                /* Setting BT Name in HM-10 BT Device. */
                /** <b>Local variable default_ble_name:</b> Used to hold the Default BT Name of the HM-10 BT Device as given by @ref HM10_DEFAULT_BLE_NAME . */
                uint8_t default_ble_name[] = {HM10_DEFAULT_BLE_NAME};
 80081d4:	4a32      	ldr	r2, [pc, #200]	; (80082a0 <init_firmware_update_module+0x154>)
 80081d6:	f107 0318 	add.w	r3, r7, #24
 80081da:	ca07      	ldmia	r2, {r0, r1, r2}
 80081dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                ret = set_hm10_name(default_ble_name, sizeof(default_ble_name));
 80081e0:	f107 0318 	add.w	r3, r7, #24
 80081e4:	210c      	movs	r1, #12
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fe5c 	bl	8008ea4 <set_hm10_name>
 80081ec:	4603      	mov	r3, r0
 80081ee:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 80081f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <init_firmware_update_module+0xae>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The BT Name of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 80081f6:	2304      	movs	r3, #4
 80081f8:	e042      	b.n	8008280 <init_firmware_update_module+0x134>
                }

                /* Setting Role in BT Device. */
                ret = set_hm10_role(HM10_DEFAULT_ROLE);
 80081fa:	2030      	movs	r0, #48	; 0x30
 80081fc:	f000 ff1a 	bl	8009034 <set_hm10_role>
 8008200:	4603      	mov	r3, r0
 8008202:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8008204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <init_firmware_update_module+0xc2>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Role of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800820a:	2304      	movs	r3, #4
 800820c:	e038      	b.n	8008280 <init_firmware_update_module+0x134>
                }

                /* Setting a Pin in the BT Device. */
                /** <b>Local variable default_pin_code:</b> Used to hold the Default Pin Code of the HM-10 BT Device as given by @ref HM10_DEFAULT_PIN . */
                uint8_t default_pin_code[HM10_PIN_VALUE_SIZE] = {HM10_DEFAULT_PIN};
 800820e:	4a25      	ldr	r2, [pc, #148]	; (80082a4 <init_firmware_update_module+0x158>)
 8008210:	f107 0310 	add.w	r3, r7, #16
 8008214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008218:	6018      	str	r0, [r3, #0]
 800821a:	3304      	adds	r3, #4
 800821c:	8019      	strh	r1, [r3, #0]
                ret = set_hm10_pin(default_pin_code);
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	4618      	mov	r0, r3
 8008224:	f000 ff88 	bl	8009138 <set_hm10_pin>
 8008228:	4603      	mov	r3, r0
 800822a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 800822c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <init_firmware_update_module+0xea>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8008232:	2304      	movs	r3, #4
 8008234:	e024      	b.n	8008280 <init_firmware_update_module+0x134>
                }

                /* Setting a Pin Code Mode in the BT Device. */
                ret = set_hm10_pin_code_mode(HM10_DEFAULT_PIN_CODE_MODE);
 8008236:	2030      	movs	r0, #48	; 0x30
 8008238:	f001 f848 	bl	80092cc <set_hm10_pin_code_mode>
 800823c:	4603      	mov	r3, r0
 800823e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8008240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <init_firmware_update_module+0xfe>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Pin Code Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 8008246:	2304      	movs	r3, #4
 8008248:	e01a      	b.n	8008280 <init_firmware_update_module+0x134>
                }

                /* Setting the Module Work Mode in the BT Device. */
                ret = set_hm10_module_work_mode(HM10_DEFAULT_MODULE_WORK_MODE);
 800824a:	2030      	movs	r0, #48	; 0x30
 800824c:	f001 f8c0 	bl	80093d0 <set_hm10_module_work_mode>
 8008250:	4603      	mov	r3, r0
 8008252:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8008254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <init_firmware_update_module+0x112>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: The Module Work Mode of the HM-10 BT device could not be set to its default value (Exception Code = %d).\r\n", ret);
					#endif
					return ETX_OTA_EC_ERR;
 800825a:	2304      	movs	r3, #4
 800825c:	e010      	b.n	8008280 <init_firmware_update_module+0x134>
				}

                /* Resetting the BT Device. */
                ret = send_hm10_reset_cmd();
 800825e:	f000 fd3d 	bl	8008cdc <send_hm10_reset_cmd>
 8008262:	4603      	mov	r3, r0
 8008264:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (ret != HM10_EC_OK)
 8008266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <init_firmware_update_module+0x12c>
                {
					#if ETX_OTA_VERBOSE
						printf("ERROR: Could not reset the HM-10 BT device (Exception Code = %d).\r\n", ret);
					#endif
                    return ETX_OTA_EC_ERR;
 800826c:	2304      	movs	r3, #4
 800826e:	e007      	b.n	8008280 <init_firmware_update_module+0x134>
            break;
        default:
            #if ETX_OTA_VERBOSE
                printf("ERROR: The requested Hardware Protocol %d is not recognized by the ETX OTA Protocol.\r\n", hardware_protocol);
            #endif
            return ETX_OTA_EC_ERR;
 8008270:	2304      	movs	r3, #4
 8008272:	e005      	b.n	8008280 <init_firmware_update_module+0x134>
            break;
 8008274:	bf00      	nop
 8008276:	e000      	b.n	800827a <init_firmware_update_module+0x12e>
            break;
 8008278:	bf00      	nop
    }

    /* Start ETX OTA data reception in UART's non blocking mode. */
    start_etx_ota();
 800827a:	f000 f815 	bl	80082a8 <start_etx_ota>

    return ETX_OTA_EC_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3728      	adds	r7, #40	; 0x28
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	200004d4 	.word	0x200004d4
 800828c:	200004d0 	.word	0x200004d0
 8008290:	200004c8 	.word	0x200004c8
 8008294:	200004d8 	.word	0x200004d8
 8008298:	200004cc 	.word	0x200004cc
 800829c:	200000b4 	.word	0x200000b4
 80082a0:	0800d0d4 	.word	0x0800d0d4
 80082a4:	0800d0e0 	.word	0x0800d0e0

080082a8 <start_etx_ota>:

void start_etx_ota()
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
	is_etx_ota_enabled = ETX_OTA_ENABLED;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <start_etx_ota+0x1c>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE);
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <start_etx_ota+0x20>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2201      	movs	r2, #1
 80082b8:	4904      	ldr	r1, [pc, #16]	; (80082cc <start_etx_ota+0x24>)
 80082ba:	4618      	mov	r0, r3
 80082bc:	f003 f9c5 	bl	800b64a <HAL_UART_Receive_IT>
}
 80082c0:	bf00      	nop
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	200004c4 	.word	0x200004c4
 80082c8:	200004d0 	.word	0x200004d0
 80082cc:	200000b4 	.word	0x200000b4

080082d0 <stop_etx_ota>:

void stop_etx_ota()
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
	is_etx_ota_enabled = ETX_OTA_DISABLED;
 80082d4:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <stop_etx_ota+0x14>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	200004c4 	.word	0x200004c4

080082e8 <HAL_UART_RxCpltCallback>:
 *
 * @author	César Miranda Meza (cmirandameza3@hotmail.com)
 * @date    November 25, 2023.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	if (is_etx_ota_enabled)
 80082f0:	4b12      	ldr	r3, [pc, #72]	; (800833c <HAL_UART_RxCpltCallback+0x54>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01c      	beq.n	8008332 <HAL_UART_RxCpltCallback+0x4a>
	{
		switch (ETX_OTA_hardware_protocol)
 80082f8:	4b11      	ldr	r3, [pc, #68]	; (8008340 <HAL_UART_RxCpltCallback+0x58>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d814      	bhi.n	800832a <HAL_UART_RxCpltCallback+0x42>
		{
			case ETX_OTA_hw_Protocol_UART:
			case ETX_OTA_hw_Protocol_BT:
				/* If the current byte received is an ETX OTA SOF byte, then enter into an ETX OTA Transaction Mode. Otherwise, wait for an ETX OTA SOF byte. */
				if (Rx_Buffer[0] == ETX_OTA_SOF)
 8008300:	4b10      	ldr	r3, [pc, #64]	; (8008344 <HAL_UART_RxCpltCallback+0x5c>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2baa      	cmp	r3, #170	; 0xaa
 8008306:	d108      	bne.n	800831a <HAL_UART_RxCpltCallback+0x32>
				{
					etx_ota_pre_transaction_handler();
 8008308:	f001 fc0c 	bl	8009b24 <etx_ota_pre_transaction_handler>
					etx_ota_status_resp_handler(start_etx_ota_transaction());
 800830c:	f000 f81e 	bl	800834c <start_etx_ota_transaction>
 8008310:	4603      	mov	r3, r0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fc14 	bl	8009b40 <etx_ota_status_resp_handler>
					#if ETX_OTA_VERBOSE
						printf("Warning: Expected to receive the SOF field value from the first byte of an ETX OTA Transaction.\r\n");
					#endif
					HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
				}
				break;
 8008318:	e00b      	b.n	8008332 <HAL_UART_RxCpltCallback+0x4a>
					HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <HAL_UART_RxCpltCallback+0x60>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2201      	movs	r2, #1
 8008320:	4908      	ldr	r1, [pc, #32]	; (8008344 <HAL_UART_RxCpltCallback+0x5c>)
 8008322:	4618      	mov	r0, r3
 8008324:	f003 f991 	bl	800b64a <HAL_UART_Receive_IT>
				break;
 8008328:	e003      	b.n	8008332 <HAL_UART_RxCpltCallback+0x4a>
			default:
				/* This should not happen since it should have been previously validated. */
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
				#endif
				etx_ota_status_resp_handler(ETX_OTA_EC_ERR);
 800832a:	2004      	movs	r0, #4
 800832c:	f001 fc08 	bl	8009b40 <etx_ota_status_resp_handler>
		}
	}
}
 8008330:	e7ff      	b.n	8008332 <HAL_UART_RxCpltCallback+0x4a>
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200004c4 	.word	0x200004c4
 8008340:	200004d4 	.word	0x200004d4
 8008344:	200000b4 	.word	0x200000b4
 8008348:	200004d0 	.word	0x200004d0

0800834c <start_etx_ota_transaction>:

static ETX_OTA_Status start_etx_ota_transaction()
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref FirmUpdConf_Status or a @ref ETX_OTA_Status function type. */
	ETX_OTA_Status ret;

	/* Reset the global variables related to: 1) The Header data of a received Firmware Image and 2) The ETX OTA Process State. */
	etx_ota_fw_received_size = 0U;
 8008352:	4b34      	ldr	r3, [pc, #208]	; (8008424 <start_etx_ota_transaction+0xd8>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]
	etx_ota_state            = ETX_OTA_STATE_START;
 8008358:	4b33      	ldr	r3, [pc, #204]	; (8008428 <start_etx_ota_transaction+0xdc>)
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
			if (Rx_Buffer[0] == 0)
			{
				printf("Waiting for an ETX OTA Packet from the host...\r\n");
			}
		#endif
		ret = etx_ota_receive_packet(Rx_Buffer);
 800835e:	4833      	ldr	r0, [pc, #204]	; (800842c <start_etx_ota_transaction+0xe0>)
 8008360:	f000 f868 	bl	8008434 <etx_ota_receive_packet>
 8008364:	4603      	mov	r3, r0
 8008366:	71fb      	strb	r3, [r7, #7]
		switch (ret)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d03f      	beq.n	80083ee <start_etx_ota_transaction+0xa2>
 800836e:	2b04      	cmp	r3, #4
 8008370:	dc42      	bgt.n	80083f8 <start_etx_ota_transaction+0xac>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <start_etx_ota_transaction+0x30>
 8008376:	2b02      	cmp	r3, #2
 8008378:	d030      	beq.n	80083dc <start_etx_ota_transaction+0x90>
 800837a:	e03d      	b.n	80083f8 <start_etx_ota_transaction+0xac>
		{
		  case ETX_OTA_EC_OK:
			/* Since the ETX OTA Packet was received successfully, proceed into processing that data correspondingly. */
			ret = etx_ota_process_data(Rx_Buffer);
 800837c:	482b      	ldr	r0, [pc, #172]	; (800842c <start_etx_ota_transaction+0xe0>)
 800837e:	f000 fa11 	bl	80087a4 <etx_ota_process_data>
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
			Rx_Buffer[0] = 0; // Clearing SOF bit.
 8008386:	4b29      	ldr	r3, [pc, #164]	; (800842c <start_etx_ota_transaction+0xe0>)
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
			switch (ret)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d822      	bhi.n	80083d8 <start_etx_ota_transaction+0x8c>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <start_etx_ota_transaction+0x4c>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083ad 	.word	0x080083ad
 800839c:	080083b7 	.word	0x080083b7
 80083a0:	080083c1 	.word	0x080083c1
 80083a4:	080083c5 	.word	0x080083c5
 80083a8:	080083cf 	.word	0x080083cf
			{
			  case ETX_OTA_EC_OK:
				  #if ETX_OTA_VERBOSE
					  printf("DONE: The current ETX OTA Packet was processed successfully. Therefore, sending ACK...\r\n");
				  #endif
				  etx_ota_send_resp(ETX_OTA_ACK);
 80083ac:	2000      	movs	r0, #0
 80083ae:	f000 fa9d 	bl	80088ec <etx_ota_send_resp>
				  break;
 80083b2:	bf00      	nop
				  #if ETX_OTA_VERBOSE
					  printf("ERROR: The ETX OTA Exception code %d that has been generated is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
				  #endif
				  return ret;
			}
			break;
 80083b4:	e025      	b.n	8008402 <start_etx_ota_transaction+0xb6>
				  etx_ota_send_resp(ETX_OTA_ACK);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f000 fa98 	bl	80088ec <etx_ota_send_resp>
				  return ETX_OTA_EC_STOP;
 80083bc:	2301      	movs	r3, #1
 80083be:	e02c      	b.n	800841a <start_etx_ota_transaction+0xce>
				  return ETX_OTA_EC_ERR;
 80083c0:	2304      	movs	r3, #4
 80083c2:	e02a      	b.n	800841a <start_etx_ota_transaction+0xce>
				  etx_ota_send_resp(ETX_OTA_NACK);
 80083c4:	2001      	movs	r0, #1
 80083c6:	f000 fa91 	bl	80088ec <etx_ota_send_resp>
				  return ETX_OTA_EC_NA;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e025      	b.n	800841a <start_etx_ota_transaction+0xce>
				  etx_ota_send_resp(ETX_OTA_NACK);
 80083ce:	2001      	movs	r0, #1
 80083d0:	f000 fa8c 	bl	80088ec <etx_ota_send_resp>
				  return ETX_OTA_EC_ERR;
 80083d4:	2304      	movs	r3, #4
 80083d6:	e020      	b.n	800841a <start_etx_ota_transaction+0xce>
				  return ret;
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	e01e      	b.n	800841a <start_etx_ota_transaction+0xce>

		  case ETX_OTA_EC_NR:
			  #if ETX_OTA_VERBOSE
				  printf("DONE: No response from host.\r\n");
			  #endif
			  HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 80083dc:	4b14      	ldr	r3, [pc, #80]	; (8008430 <start_etx_ota_transaction+0xe4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2201      	movs	r2, #1
 80083e2:	4912      	ldr	r1, [pc, #72]	; (800842c <start_etx_ota_transaction+0xe0>)
 80083e4:	4618      	mov	r0, r3
 80083e6:	f003 f930 	bl	800b64a <HAL_UART_Receive_IT>
			  return ETX_OTA_EC_NR;
 80083ea:	2302      	movs	r3, #2
 80083ec:	e015      	b.n	800841a <start_etx_ota_transaction+0xce>

		  case ETX_OTA_EC_ERR:
			  #if ETX_OTA_VERBOSE
				  printf("ERROR: An Error Exception Code has been generated during the ETX OTA process. Therefore, sending NACK...\r\n");
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 80083ee:	2001      	movs	r0, #1
 80083f0:	f000 fa7c 	bl	80088ec <etx_ota_send_resp>
			  return ETX_OTA_EC_ERR;
 80083f4:	2304      	movs	r3, #4
 80083f6:	e010      	b.n	800841a <start_etx_ota_transaction+0xce>
		  default:
			  /* The "default" case should not be called. */
			  #if ETX_OTA_VERBOSE
				  printf("ERROR: The ETX OTA Exception code %d that has been generated either should not have been generated or is unrecognized by our MCU/MPU. Therefore, sending NACK...\r\n", ret);
			  #endif
			  etx_ota_send_resp(ETX_OTA_NACK);
 80083f8:	2001      	movs	r0, #1
 80083fa:	f000 fa77 	bl	80088ec <etx_ota_send_resp>
			  return ret;
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	e00b      	b.n	800841a <start_etx_ota_transaction+0xce>
		}
	}
	while (etx_ota_state != ETX_OTA_STATE_IDLE);
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <start_etx_ota_transaction+0xdc>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1a9      	bne.n	800835e <start_etx_ota_transaction+0x12>

	#if ETX_OTA_VERBOSE
		printf("DONE: The current whole ETX OTA Transaction has concluded successfully.\r\n");
	#endif
	HAL_UART_Receive_IT(p_huart, Rx_Buffer, ETX_OTA_SOF_SIZE); // Request to receive UART data in non blocking mode.
 800840a:	4b09      	ldr	r3, [pc, #36]	; (8008430 <start_etx_ota_transaction+0xe4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2201      	movs	r2, #1
 8008410:	4906      	ldr	r1, [pc, #24]	; (800842c <start_etx_ota_transaction+0xe0>)
 8008412:	4618      	mov	r0, r3
 8008414:	f003 f919 	bl	800b64a <HAL_UART_Receive_IT>
	return ETX_OTA_EC_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200004c0 	.word	0x200004c0
 8008428:	200004bd 	.word	0x200004bd
 800842c:	200000b4 	.word	0x200000b4
 8008430:	200004d0 	.word	0x200004d0

08008434 <etx_ota_receive_packet>:

static ETX_OTA_Status etx_ota_receive_packet(uint8_t *buf)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b088      	sub	sp, #32
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/** <b>Local variable ret:</b> Used to hold the exception code value returned by either a @ref FirmUpdConf_Status , a @ref ETX_OTA_Status or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable len:</b> Current index against which the bytes of the current ETX OTA Packet have been fetched. */
	uint16_t len = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	83fb      	strh	r3, [r7, #30]
		if (Rx_Buffer[0] == 0)
		{
			printf("Waiting to receive an ETX OTA Packet from the host...\r\n");
		}
	#endif
	switch (ETX_OTA_hardware_protocol)
 8008440:	4b9c      	ldr	r3, [pc, #624]	; (80086b4 <etx_ota_receive_packet+0x280>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <etx_ota_receive_packet+0x1c>
 8008448:	2b01      	cmp	r3, #1
 800844a:	f000 80d6 	beq.w	80085fa <etx_ota_receive_packet+0x1c6>
 800844e:	e17f      	b.n	8008750 <etx_ota_receive_packet+0x31c>
	{
		case ETX_OTA_hw_Protocol_UART:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
			if (Rx_Buffer[0] == 0)
 8008450:	4b99      	ldr	r3, [pc, #612]	; (80086b8 <etx_ota_receive_packet+0x284>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d121      	bne.n	800849c <etx_ota_receive_packet+0x68>
            {
                ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8008458:	4b98      	ldr	r3, [pc, #608]	; (80086bc <etx_ota_receive_packet+0x288>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	8bfb      	ldrh	r3, [r7, #30]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	18d1      	adds	r1, r2, r3
 8008462:	f242 3328 	movw	r3, #9000	; 0x2328
 8008466:	2201      	movs	r2, #1
 8008468:	f003 f85d 	bl	800b526 <HAL_UART_Receive>
 800846c:	4603      	mov	r3, r0
 800846e:	827b      	strh	r3, [r7, #18]
                ret = HAL_ret_handler(ret);
 8008470:	8a7b      	ldrh	r3, [r7, #18]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fab3 	bl	80089e0 <HAL_ret_handler>
 800847a:	4603      	mov	r3, r0
 800847c:	827b      	strh	r3, [r7, #18]
                if (ret != HAL_OK)
 800847e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <etx_ota_receive_packet+0x58>
                {
                    return ret;
 8008486:	8a7b      	ldrh	r3, [r7, #18]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e187      	b.n	800879c <etx_ota_receive_packet+0x368>
                }
                if (buf[len] != ETX_OTA_SOF)
 800848c:	8bfb      	ldrh	r3, [r7, #30]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2baa      	cmp	r3, #170	; 0xaa
 8008496:	d001      	beq.n	800849c <etx_ota_receive_packet+0x68>
                {
                    #if ETX_OTA_VERBOSE
                        printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
                    #endif
                    return ETX_OTA_EC_ERR;
 8008498:	2304      	movs	r3, #4
 800849a:	e17f      	b.n	800879c <etx_ota_receive_packet+0x368>
                }
            }
			len++;
 800849c:	8bfb      	ldrh	r3, [r7, #30]
 800849e:	3301      	adds	r3, #1
 80084a0:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80084a2:	4b86      	ldr	r3, [pc, #536]	; (80086bc <etx_ota_receive_packet+0x288>)
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	8bfb      	ldrh	r3, [r7, #30]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	18d1      	adds	r1, r2, r3
 80084ac:	f242 3328 	movw	r3, #9000	; 0x2328
 80084b0:	2201      	movs	r2, #1
 80084b2:	f003 f838 	bl	800b526 <HAL_UART_Receive>
 80084b6:	4603      	mov	r3, r0
 80084b8:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80084ba:	8a7b      	ldrh	r3, [r7, #18]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa8e 	bl	80089e0 <HAL_ret_handler>
 80084c4:	4603      	mov	r3, r0
 80084c6:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80084c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <etx_ota_receive_packet+0xa2>
			{
				return ret;
 80084d0:	8a7b      	ldrh	r3, [r7, #18]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	e162      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			switch (buf[len++])
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	83fa      	strh	r2, [r7, #30]
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d901      	bls.n	80084ec <etx_ota_receive_packet+0xb8>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 80084e8:	2304      	movs	r3, #4
 80084ea:	e157      	b.n	800879c <etx_ota_receive_packet+0x368>
					break;
 80084ec:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80084ee:	4b73      	ldr	r3, [pc, #460]	; (80086bc <etx_ota_receive_packet+0x288>)
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	8bfb      	ldrh	r3, [r7, #30]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	18d1      	adds	r1, r2, r3
 80084f8:	f242 3328 	movw	r3, #9000	; 0x2328
 80084fc:	2202      	movs	r2, #2
 80084fe:	f003 f812 	bl	800b526 <HAL_UART_Receive>
 8008502:	4603      	mov	r3, r0
 8008504:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8008506:	8a7b      	ldrh	r3, [r7, #18]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fa68 	bl	80089e0 <HAL_ret_handler>
 8008510:	4603      	mov	r3, r0
 8008512:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8008514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <etx_ota_receive_packet+0xee>
			{
				return ret;
 800851c:	8a7b      	ldrh	r3, [r7, #18]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	e13c      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			data_len = *(uint16_t *)&buf[len];
 8008522:	8bfb      	ldrh	r3, [r7, #30]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 800852c:	8bfb      	ldrh	r3, [r7, #30]
 800852e:	3302      	adds	r3, #2
 8008530:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 8008532:	2300      	movs	r3, #0
 8008534:	82fb      	strh	r3, [r7, #22]
 8008536:	e01f      	b.n	8008578 <etx_ota_receive_packet+0x144>
			{
				ret = HAL_UART_Receive(p_huart, &buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 8008538:	4b60      	ldr	r3, [pc, #384]	; (80086bc <etx_ota_receive_packet+0x288>)
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	8bfb      	ldrh	r3, [r7, #30]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	83fa      	strh	r2, [r7, #30]
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	1899      	adds	r1, r3, r2
 8008548:	f242 3328 	movw	r3, #9000	; 0x2328
 800854c:	2201      	movs	r2, #1
 800854e:	f002 ffea 	bl	800b526 <HAL_UART_Receive>
 8008552:	4603      	mov	r3, r0
 8008554:	827b      	strh	r3, [r7, #18]
				ret = HAL_ret_handler(ret);
 8008556:	8a7b      	ldrh	r3, [r7, #18]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fa40 	bl	80089e0 <HAL_ret_handler>
 8008560:	4603      	mov	r3, r0
 8008562:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 8008564:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <etx_ota_receive_packet+0x13e>
				{
					return ret;
 800856c:	8a7b      	ldrh	r3, [r7, #18]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	e114      	b.n	800879c <etx_ota_receive_packet+0x368>
			for (uint16_t i=0; i<data_len; i++)
 8008572:	8afb      	ldrh	r3, [r7, #22]
 8008574:	3301      	adds	r3, #1
 8008576:	82fb      	strh	r3, [r7, #22]
 8008578:	8afa      	ldrh	r2, [r7, #22]
 800857a:	8bbb      	ldrh	r3, [r7, #28]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3db      	bcc.n	8008538 <etx_ota_receive_packet+0x104>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8008580:	4b4e      	ldr	r3, [pc, #312]	; (80086bc <etx_ota_receive_packet+0x288>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	8bfb      	ldrh	r3, [r7, #30]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	18d1      	adds	r1, r2, r3
 800858a:	f242 3328 	movw	r3, #9000	; 0x2328
 800858e:	2204      	movs	r2, #4
 8008590:	f002 ffc9 	bl	800b526 <HAL_UART_Receive>
 8008594:	4603      	mov	r3, r0
 8008596:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 8008598:	8a7b      	ldrh	r3, [r7, #18]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fa1f 	bl	80089e0 <HAL_ret_handler>
 80085a2:	4603      	mov	r3, r0
 80085a4:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80085a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <etx_ota_receive_packet+0x180>
			{
				return ret;
 80085ae:	8a7b      	ldrh	r3, [r7, #18]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	e0f3      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 80085b4:	8bfb      	ldrh	r3, [r7, #30]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4413      	add	r3, r2
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 80085be:	8bfb      	ldrh	r3, [r7, #30]
 80085c0:	3304      	adds	r3, #4
 80085c2:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = HAL_UART_Receive(p_huart, &buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80085c4:	4b3d      	ldr	r3, [pc, #244]	; (80086bc <etx_ota_receive_packet+0x288>)
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	8bfb      	ldrh	r3, [r7, #30]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	18d1      	adds	r1, r2, r3
 80085ce:	f242 3328 	movw	r3, #9000	; 0x2328
 80085d2:	2201      	movs	r2, #1
 80085d4:	f002 ffa7 	bl	800b526 <HAL_UART_Receive>
 80085d8:	4603      	mov	r3, r0
 80085da:	827b      	strh	r3, [r7, #18]
			ret = HAL_ret_handler(ret);
 80085dc:	8a7b      	ldrh	r3, [r7, #18]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 f9fd 	bl	80089e0 <HAL_ret_handler>
 80085e6:	4603      	mov	r3, r0
 80085e8:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 80085ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80b0 	beq.w	8008754 <etx_ota_receive_packet+0x320>
			{
				return ret;
 80085f4:	8a7b      	ldrh	r3, [r7, #18]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	e0d0      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			break;
		case ETX_OTA_hw_Protocol_BT:
			/* Wait to receive the first byte of data from the host and validate it to be the SOF byte of an ETX OTA Packet. */
            if (Rx_Buffer[0] == 0)
 80085fa:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <etx_ota_receive_packet+0x284>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d119      	bne.n	8008636 <etx_ota_receive_packet+0x202>
            {
                ret = get_hm10_ota_data(&buf[len], ETX_OTA_SOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8008602:	8bfb      	ldrh	r3, [r7, #30]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	f242 3228 	movw	r2, #9000	; 0x2328
 800860c:	2101      	movs	r1, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f806 	bl	8009620 <get_hm10_ota_data>
 8008614:	4603      	mov	r3, r0
 8008616:	827b      	strh	r3, [r7, #18]
                if (ret != HAL_OK)
 8008618:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <etx_ota_receive_packet+0x1f2>
                {
                    return ret;
 8008620:	8a7b      	ldrh	r3, [r7, #18]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	e0ba      	b.n	800879c <etx_ota_receive_packet+0x368>
                }
                if (buf[len] != ETX_OTA_SOF)
 8008626:	8bfb      	ldrh	r3, [r7, #30]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	4413      	add	r3, r2
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2baa      	cmp	r3, #170	; 0xaa
 8008630:	d001      	beq.n	8008636 <etx_ota_receive_packet+0x202>
                {
                    #if ETX_OTA_VERBOSE
                        printf("ERROR: Expected to receive the SOF field value from the current ETX OTA Packet.\r\n");
                    #endif
                    return ETX_OTA_EC_ERR;
 8008632:	2304      	movs	r3, #4
 8008634:	e0b2      	b.n	800879c <etx_ota_receive_packet+0x368>
                }
            }
            len++;
 8008636:	8bfb      	ldrh	r3, [r7, #30]
 8008638:	3301      	adds	r3, #1
 800863a:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "Packet Type" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_PACKET_TYPE_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800863c:	8bfb      	ldrh	r3, [r7, #30]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	f242 3228 	movw	r2, #9000	; 0x2328
 8008646:	2101      	movs	r1, #1
 8008648:	4618      	mov	r0, r3
 800864a:	f000 ffe9 	bl	8009620 <get_hm10_ota_data>
 800864e:	4603      	mov	r3, r0
 8008650:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8008652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <etx_ota_receive_packet+0x22c>
			{
				return ret;
 800865a:	8a7b      	ldrh	r3, [r7, #18]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	e09d      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			switch (buf[len++])
 8008660:	8bfb      	ldrh	r3, [r7, #30]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	83fa      	strh	r2, [r7, #30]
 8008666:	461a      	mov	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b03      	cmp	r3, #3
 8008670:	d901      	bls.n	8008676 <etx_ota_receive_packet+0x242>
					break;
				default:
					#if ETX_OTA_VERBOSE
						printf("ERROR: The data received from the Packet Type field of the currently received ETX OTA Packet contains a value not recognized by our MCU/MPU.\r\n");
					#endif
					return ETX_OTA_EC_ERR;
 8008672:	2304      	movs	r3, #4
 8008674:	e092      	b.n	800879c <etx_ota_receive_packet+0x368>
					break;
 8008676:	bf00      	nop
			}

			/* Wait to receive the next 2-bytes of data from the host, which our MCU/MPU will interpret as the "Data Length" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_DATA_LENGTH_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 8008678:	8bfb      	ldrh	r3, [r7, #30]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008682:	2102      	movs	r1, #2
 8008684:	4618      	mov	r0, r3
 8008686:	f000 ffcb 	bl	8009620 <get_hm10_ota_data>
 800868a:	4603      	mov	r3, r0
 800868c:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800868e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <etx_ota_receive_packet+0x268>
			{
				return ret;
 8008696:	8a7b      	ldrh	r3, [r7, #18]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	e07f      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			data_len = *(uint16_t *)&buf[len];
 800869c:	8bfb      	ldrh	r3, [r7, #30]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	83bb      	strh	r3, [r7, #28]
			len += ETX_OTA_DATA_LENGTH_SIZE;
 80086a6:	8bfb      	ldrh	r3, [r7, #30]
 80086a8:	3302      	adds	r3, #2
 80086aa:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next \c data_len bytes of data from the host, which our MCU/MPU will interpret as the "Data" field value of an ETX OTA Packet. */
			for (uint16_t i=0; i<data_len; i++)
 80086ac:	2300      	movs	r3, #0
 80086ae:	82bb      	strh	r3, [r7, #20]
 80086b0:	e01e      	b.n	80086f0 <etx_ota_receive_packet+0x2bc>
 80086b2:	bf00      	nop
 80086b4:	200004d4 	.word	0x200004d4
 80086b8:	200000b4 	.word	0x200000b4
 80086bc:	200004d0 	.word	0x200004d0
			{
				ret = get_hm10_ota_data(&buf[len++], 1, ETX_CUSTOM_HAL_TIMEOUT);
 80086c0:	8bfb      	ldrh	r3, [r7, #30]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	83fa      	strh	r2, [r7, #30]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	f242 3228 	movw	r2, #9000	; 0x2328
 80086d0:	2101      	movs	r1, #1
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 ffa4 	bl	8009620 <get_hm10_ota_data>
 80086d8:	4603      	mov	r3, r0
 80086da:	827b      	strh	r3, [r7, #18]
				if (ret != HAL_OK)
 80086dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <etx_ota_receive_packet+0x2b6>
				{
					return ret;
 80086e4:	8a7b      	ldrh	r3, [r7, #18]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	e058      	b.n	800879c <etx_ota_receive_packet+0x368>
			for (uint16_t i=0; i<data_len; i++)
 80086ea:	8abb      	ldrh	r3, [r7, #20]
 80086ec:	3301      	adds	r3, #1
 80086ee:	82bb      	strh	r3, [r7, #20]
 80086f0:	8aba      	ldrh	r2, [r7, #20]
 80086f2:	8bbb      	ldrh	r3, [r7, #28]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3e3      	bcc.n	80086c0 <etx_ota_receive_packet+0x28c>
				}
			}

			/* Wait to receive the next 4-bytes of data from the host, which our MCU/MPU will interpret as the "CRC32" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_CRC32_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 80086f8:	8bfb      	ldrh	r3, [r7, #30]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	f242 3228 	movw	r2, #9000	; 0x2328
 8008702:	2104      	movs	r1, #4
 8008704:	4618      	mov	r0, r3
 8008706:	f000 ff8b 	bl	8009620 <get_hm10_ota_data>
 800870a:	4603      	mov	r3, r0
 800870c:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 800870e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <etx_ota_receive_packet+0x2e8>
			{
				return ret;
 8008716:	8a7b      	ldrh	r3, [r7, #18]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	e03f      	b.n	800879c <etx_ota_receive_packet+0x368>
			}
			rec_data_crc = *(uint32_t *) &buf[len];
 800871c:	8bfb      	ldrh	r3, [r7, #30]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	61bb      	str	r3, [r7, #24]
			len += ETX_OTA_CRC32_SIZE;
 8008726:	8bfb      	ldrh	r3, [r7, #30]
 8008728:	3304      	adds	r3, #4
 800872a:	83fb      	strh	r3, [r7, #30]

			/* Wait to receive the next 1-byte of data from the host and validate it to be a "EOF" field value of an ETX OTA Packet. */
			ret = get_hm10_ota_data(&buf[len], ETX_OTA_EOF_SIZE, ETX_CUSTOM_HAL_TIMEOUT);
 800872c:	8bfb      	ldrh	r3, [r7, #30]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	f242 3228 	movw	r2, #9000	; 0x2328
 8008736:	2101      	movs	r1, #1
 8008738:	4618      	mov	r0, r3
 800873a:	f000 ff71 	bl	8009620 <get_hm10_ota_data>
 800873e:	4603      	mov	r3, r0
 8008740:	827b      	strh	r3, [r7, #18]
			if (ret != HAL_OK)
 8008742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d006      	beq.n	8008758 <etx_ota_receive_packet+0x324>
			{
				return ret;
 800874a:	8a7b      	ldrh	r3, [r7, #18]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	e025      	b.n	800879c <etx_ota_receive_packet+0x368>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 8008750:	2304      	movs	r3, #4
 8008752:	e023      	b.n	800879c <etx_ota_receive_packet+0x368>
			break;
 8008754:	bf00      	nop
 8008756:	e000      	b.n	800875a <etx_ota_receive_packet+0x326>
			break;
 8008758:	bf00      	nop
	}

	/* Validate that the latest byte received corresponds to an ETX OTA End of Frame (EOF) byte. */
	if (buf[len++] != ETX_OTA_EOF)
 800875a:	8bfb      	ldrh	r3, [r7, #30]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	83fa      	strh	r2, [r7, #30]
 8008760:	461a      	mov	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4413      	add	r3, r2
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2bbb      	cmp	r3, #187	; 0xbb
 800876a:	d001      	beq.n	8008770 <etx_ota_receive_packet+0x33c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Expected to receive the EOF field value from the current ETX OTA Packet.\r\n");
		#endif
		return ETX_OTA_EC_ERR;
 800876c:	2304      	movs	r3, #4
 800876e:	e015      	b.n	800879c <etx_ota_receive_packet+0x368>
	}

	/* Calculate the 32-bit CRC only with respect to the contents of the "Data" field from the current ETX OTA Packet that has just been received. */
	cal_data_crc = crc32_mpeg2(&buf[ETX_OTA_DATA_FIELD_INDEX], data_len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	8bba      	ldrh	r2, [r7, #28]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f949 	bl	8008a10 <crc32_mpeg2>
 800877e:	60f8      	str	r0, [r7, #12]

	/* Validate that the Calculated CRC matches the Recorded CRC. */
	if (cal_data_crc != rec_data_crc)
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	d001      	beq.n	800878c <etx_ota_receive_packet+0x358>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: CRC mismatch with current ETX OTA Packet [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
													   (unsigned int) cal_data_crc, (unsigned int) rec_data_crc);
		#endif
		return ETX_OTA_EC_ERR;
 8008788:	2304      	movs	r3, #4
 800878a:	e007      	b.n	800879c <etx_ota_receive_packet+0x368>
	}

	if (ETX_OTA_PACKET_MAX_SIZE < len)
 800878c:	8bfb      	ldrh	r3, [r7, #30]
 800878e:	f240 4209 	movw	r2, #1033	; 0x409
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <etx_ota_receive_packet+0x366>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Received more data than expected (Expected = %d, Received = %d)\r\n", ETX_OTA_PACKET_MAX_SIZE, len);
		#endif
		return ETX_OTA_EC_ERR;
 8008796:	2304      	movs	r3, #4
 8008798:	e000      	b.n	800879c <etx_ota_receive_packet+0x368>
	}

	#if ETX_OTA_VERBOSE
		printf("ETX OTA Packet has been successfully received.\r\n");
	#endif
	return ETX_OTA_EC_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <etx_ota_process_data>:

static ETX_OTA_Status etx_ota_process_data(uint8_t *buf)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	/** <b>Local pointer cmd:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Command_Packet_t type. */
	ETX_OTA_Command_Packet_t *cmd = (ETX_OTA_Command_Packet_t *) buf;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	617b      	str	r3, [r7, #20]

	/* Check if we received the ETX OTA Abort Command and, if true, stop the ETX OTA process. */
	#if ETX_OTA_VERBOSE
		printf("Processing data of the latest ETX OTA Packet...\r\n");
	#endif
	if (cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <etx_ota_process_data+0x20>
	{
		if (cmd->cmd == ETX_OTA_CMD_ABORT)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d101      	bne.n	80087c4 <etx_ota_process_data+0x20>
		{
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Abort command received. Stopping the process...\r\n");
			#endif
			return ETX_OTA_EC_STOP;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e089      	b.n	80088d8 <etx_ota_process_data+0x134>
		}
	}

	switch (etx_ota_state)
 80087c4:	4b46      	ldr	r3, [pc, #280]	; (80088e0 <etx_ota_process_data+0x13c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	f200 8084 	bhi.w	80088d6 <etx_ota_process_data+0x132>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <etx_ota_process_data+0x30>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087ed 	.word	0x080087ed
 80087dc:	0800880b 	.word	0x0800880b
 80087e0:	08008857 	.word	0x08008857
 80087e4:	08008891 	.word	0x08008891
	{
		case ETX_OTA_STATE_IDLE:
			#if ETX_OTA_VERBOSE
				printf("DONE: ETX OTA Process is in Idle State.\r\n");
			#endif
			return ETX_OTA_EC_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e075      	b.n	80088d8 <etx_ota_process_data+0x134>

		case ETX_OTA_STATE_START:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd == ETX_OTA_CMD_START))
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d108      	bne.n	8008806 <etx_ota_process_data+0x62>
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	791b      	ldrb	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <etx_ota_process_data+0x62>
			{
				#if ETX_OTA_VERBOSE
					printf("DONE: Received ETX OTA Start Command.\r\n");
				#endif
				etx_ota_state = ETX_OTA_STATE_HEADER;
 80087fc:	4b38      	ldr	r3, [pc, #224]	; (80088e0 <etx_ota_process_data+0x13c>)
 80087fe:	2202      	movs	r2, #2
 8008800:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	e068      	b.n	80088d8 <etx_ota_process_data+0x134>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA Start Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8008806:	2304      	movs	r3, #4
 8008808:	e066      	b.n	80088d8 <etx_ota_process_data+0x134>

		case ETX_OTA_STATE_HEADER:
			/** <b>Local pointer header:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Header_Packet_t type. */
			ETX_OTA_Header_Packet_t *header = (ETX_OTA_Header_Packet_t *) buf;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]

			if (header->packet_type == ETX_OTA_PACKET_TYPE_HEADER)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d11d      	bne.n	8008852 <etx_ota_process_data+0xae>
			{
				/* We validate that the Payload Type to be received and take an action correspondingly. */
				switch (header->meta_data.payload_type)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	7cdb      	ldrb	r3, [r3, #19]
 800881a:	2b01      	cmp	r3, #1
 800881c:	dc02      	bgt.n	8008824 <etx_ota_process_data+0x80>
 800881e:	2b00      	cmp	r3, #0
 8008820:	da03      	bge.n	800882a <etx_ota_process_data+0x86>
 8008822:	e014      	b.n	800884e <etx_ota_process_data+0xaa>
 8008824:	2b02      	cmp	r3, #2
 8008826:	d002      	beq.n	800882e <etx_ota_process_data+0x8a>
 8008828:	e011      	b.n	800884e <etx_ota_process_data+0xaa>
					case ETX_OTA_Application_Firmware_Image:
					case ETX_OTA_Bootloader_Firmware_Image:
						#if ETX_OTA_VERBOSE
							printf("WARNING: An ETX OTA Firmware Update request has been received.\r\n");
						#endif
						return ETX_OTA_EC_NA;
 800882a:	2303      	movs	r3, #3
 800882c:	e054      	b.n	80088d8 <etx_ota_process_data+0x134>
					case ETX_OTA_Custom_Data:
						#if ETX_OTA_VERBOSE
							printf("An ETX OTA Custom Data request has been received.\r\n");
						#endif
						p_custom_data->size = header->meta_data.package_size;
 800882e:	4b2d      	ldr	r3, [pc, #180]	; (80088e4 <etx_ota_process_data+0x140>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	6852      	ldr	r2, [r2, #4]
 8008836:	601a      	str	r2, [r3, #0]
						p_custom_data->rec_crc = header->meta_data.package_crc;
 8008838:	4b2a      	ldr	r3, [pc, #168]	; (80088e4 <etx_ota_process_data+0x140>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	6892      	ldr	r2, [r2, #8]
 8008840:	605a      	str	r2, [r3, #4]
						#if ETX_OTA_VERBOSE
							printf("Received ETX OTA Header with a Payload Size of %ld bytes.\r\n", p_custom_data->size);
						#endif
						break;
 8008842:	bf00      	nop
							printf("ERROR: An unknown Payload Type was identified from the Header of the current ETX OTA Packet.\r\n");
						#endif
						return ETX_OTA_EC_ERR;
				}

				etx_ota_state = ETX_OTA_STATE_DATA;
 8008844:	4b26      	ldr	r3, [pc, #152]	; (80088e0 <etx_ota_process_data+0x13c>)
 8008846:	2203      	movs	r2, #3
 8008848:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	e044      	b.n	80088d8 <etx_ota_process_data+0x134>
						return ETX_OTA_EC_ERR;
 800884e:	2304      	movs	r3, #4
 8008850:	e042      	b.n	80088d8 <etx_ota_process_data+0x134>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Header Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 8008852:	2304      	movs	r3, #4
 8008854:	e040      	b.n	80088d8 <etx_ota_process_data+0x134>

		case ETX_OTA_STATE_DATA:
			/** <b>Local pointer data:</b> Points to the data of the latest ETX OTA Packet but in @ref ETX_OTA_Data_Packet_t type. */
			ETX_OTA_Data_Packet_t *data = (ETX_OTA_Data_Packet_t *) buf;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]

			if (data->packet_type == ETX_OTA_PACKET_TYPE_DATA)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d114      	bne.n	800888c <etx_ota_process_data+0xe8>
			{
				/* Write the ETX OTA Data Type Packet into our MCU/MPU's RAM. */
				write_data_to_ram(buf+ETX_OTA_DATA_FIELD_INDEX, data->data_len);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	b29b      	uxth	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f000 f88c 	bl	800898c <write_data_to_ram>
						{
							printf("[%ld/%ld] parts of the current ETX OTA transaction are now stored into our MCU/MPUs RAM...\r\n", (etx_ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE+1), p_custom_data->size/ETX_OTA_DATA_MAX_SIZE+1);
						}
					}
				#endif
				if (etx_ota_fw_received_size >= p_custom_data->size)
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <etx_ota_process_data+0x140>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <etx_ota_process_data+0x144>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d802      	bhi.n	8008888 <etx_ota_process_data+0xe4>
				{
					/* received the full data. Therefore, move to the End State of the ETX OTA Process. */
					etx_ota_state = ETX_OTA_STATE_END;
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <etx_ota_process_data+0x13c>)
 8008884:	2204      	movs	r2, #4
 8008886:	701a      	strb	r2, [r3, #0]
				}
				return ETX_OTA_EC_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	e025      	b.n	80088d8 <etx_ota_process_data+0x134>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Data Type Packet, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 800888c:	2304      	movs	r3, #4
 800888e:	e023      	b.n	80088d8 <etx_ota_process_data+0x134>

		case ETX_OTA_STATE_END:
			if ((cmd->packet_type==ETX_OTA_PACKET_TYPE_CMD) && (cmd->cmd==ETX_OTA_CMD_END))
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11c      	bne.n	80088d2 <etx_ota_process_data+0x12e>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	791b      	ldrb	r3, [r3, #4]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d118      	bne.n	80088d2 <etx_ota_process_data+0x12e>
			{
				/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the ETX OTA data that has just been received by our MCU/MPU. */
				uint32_t cal_crc = crc32_mpeg2(p_custom_data->data, p_custom_data->size);
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <etx_ota_process_data+0x140>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f103 0208 	add.w	r2, r3, #8
 80088a8:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <etx_ota_process_data+0x140>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f000 f8ad 	bl	8008a10 <crc32_mpeg2>
 80088b6:	6138      	str	r0, [r7, #16]

				/* Validate the 32-bit CRC of the whole data received from the current whole ETX OTA Transaction. */
				#if ETX_OTA_VERBOSE
					printf("Validating the received data from the current whole ETX OTA Transaction...\r\n");
				#endif
				if (cal_crc != p_custom_data->rec_crc)
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <etx_ota_process_data+0x140>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d001      	beq.n	80088c8 <etx_ota_process_data+0x124>
				{
					#if ETX_OTA_VERBOSE
						printf("The 32-bit CRC of the Data of the received from the whole current ETX OTA Transaction mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
								(unsigned int) cal_crc, (unsigned int) p_custom_data->rec_crc);
					#endif
					return ETX_OTA_EC_ERR;
 80088c4:	2304      	movs	r3, #4
 80088c6:	e007      	b.n	80088d8 <etx_ota_process_data+0x134>
				}
				#if ETX_OTA_VERBOSE
					printf("DONE: 32-bit CRC of the Data received from the whole current ETX OTA Transaction has been successfully validated.\r\n");
				#endif
				etx_ota_state = ETX_OTA_STATE_IDLE;
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <etx_ota_process_data+0x13c>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
				return ETX_OTA_EC_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e002      	b.n	80088d8 <etx_ota_process_data+0x134>
			}
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected ETX OTA Command Type Packet containing an ETX OTA End Command, but something else was received instead.\r\n");
			#endif
			return ETX_OTA_EC_ERR;
 80088d2:	2304      	movs	r3, #4
 80088d4:	e000      	b.n	80088d8 <etx_ota_process_data+0x134>
		default:
			/* This case should never occur. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: The current ETX OTA State %d is unrecognized by our MCU/MPU.\r\n", etx_ota_state);
			#endif
			return ETX_OTA_EC_ERR;
 80088d6:	2304      	movs	r3, #4
			break;
	}
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200004bd 	.word	0x200004bd
 80088e4:	200004cc 	.word	0x200004cc
 80088e8:	200004c0 	.word	0x200004c0

080088ec <etx_ota_send_resp>:

//#pragma GCC diagnostic ignored "-Wstringop-overflow=" // This pragma definition will tell the compiler to ignore an expected Compilation Warning (due to a code functionality that it is strictly needed to work that way) that gives using the HAL_CRC_Calculate() function inside the etx_ota_send_resp() function,. which states the following: 'HAL_CRC_Calculate' accessing 4 bytes in a region of size 1.
static ETX_OTA_Status etx_ota_send_resp(ETX_OTA_Response_Status response_status)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
	/** <b>Local variable ret:</b> Return value of a @ref ETX_OTA_Status function function type. */
	ETX_OTA_Status  ret;

	ETX_OTA_Response_Packet_t response =
 80088f6:	23aa      	movs	r3, #170	; 0xaa
 80088f8:	733b      	strb	r3, [r7, #12]
 80088fa:	2303      	movs	r3, #3
 80088fc:	737b      	strb	r3, [r7, #13]
 80088fe:	2301      	movs	r3, #1
 8008900:	81fb      	strh	r3, [r7, #14]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	743b      	strb	r3, [r7, #16]
 8008906:	2300      	movs	r3, #0
 8008908:	747b      	strb	r3, [r7, #17]
 800890a:	2300      	movs	r3, #0
 800890c:	74bb      	strb	r3, [r7, #18]
 800890e:	2300      	movs	r3, #0
 8008910:	74fb      	strb	r3, [r7, #19]
 8008912:	2300      	movs	r3, #0
 8008914:	753b      	strb	r3, [r7, #20]
 8008916:	23bb      	movs	r3, #187	; 0xbb
 8008918:	757b      	strb	r3, [r7, #21]
		.data_len    	= 1U,
		.status      	= response_status,
		.crc			= 0U,
		.eof         	= ETX_OTA_EOF
	};
	response.crc = crc32_mpeg2((uint8_t *) &response.status, 1);
 800891a:	f107 030c 	add.w	r3, r7, #12
 800891e:	3304      	adds	r3, #4
 8008920:	2101      	movs	r1, #1
 8008922:	4618      	mov	r0, r3
 8008924:	f000 f874 	bl	8008a10 <crc32_mpeg2>
 8008928:	4603      	mov	r3, r0
 800892a:	f8c7 3011 	str.w	r3, [r7, #17]

	switch (ETX_OTA_hardware_protocol)
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <etx_ota_send_resp+0x98>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <etx_ota_send_resp+0x50>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d012      	beq.n	8008960 <etx_ota_send_resp+0x74>
 800893a:	e01c      	b.n	8008976 <etx_ota_send_resp+0x8a>
	{
		case ETX_OTA_hw_Protocol_UART:
			ret = HAL_UART_Transmit(p_huart, (uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 800893c:	4b12      	ldr	r3, [pc, #72]	; (8008988 <etx_ota_send_resp+0x9c>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	f107 010c 	add.w	r1, r7, #12
 8008944:	f242 3328 	movw	r3, #9000	; 0x2328
 8008948:	220a      	movs	r2, #10
 800894a:	f002 fd69 	bl	800b420 <HAL_UART_Transmit>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]
			ret = HAL_ret_handler(ret);
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f843 	bl	80089e0 <HAL_ret_handler>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]
			break;
 800895e:	e00c      	b.n	800897a <etx_ota_send_resp+0x8e>
		case ETX_OTA_hw_Protocol_BT:
			ret = send_hm10_ota_data((uint8_t *) &response, sizeof(ETX_OTA_Response_Packet_t), ETX_CUSTOM_HAL_TIMEOUT);
 8008960:	f107 030c 	add.w	r3, r7, #12
 8008964:	f242 3228 	movw	r2, #9000	; 0x2328
 8008968:	210a      	movs	r1, #10
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fe38 	bl	80095e0 <send_hm10_ota_data>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]
			break;
 8008974:	e001      	b.n	800897a <etx_ota_send_resp+0x8e>
		default:
			/* This should not happen since it should have been previously validated. */
			#if ETX_OTA_VERBOSE
				printf("ERROR: Expected a Hardware Protocol value, but received something else: %d.\r\n", ETX_OTA_hardware_protocol);
			#endif
			return ETX_OTA_EC_ERR;
 8008976:	2304      	movs	r3, #4
 8008978:	e000      	b.n	800897c <etx_ota_send_resp+0x90>
	}

	return ret;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	200004d4 	.word	0x200004d4
 8008988:	200004d0 	.word	0x200004d0

0800898c <write_data_to_ram>:

static void write_data_to_ram(uint8_t *data, uint16_t data_len)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	807b      	strh	r3, [r7, #2]
	/* Write the current chunk/packet that is part of the whole ETX OTA Custom Data into our MCU/MPU's RAM Memory. */
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 8008998:	2300      	movs	r3, #0
 800899a:	81fb      	strh	r3, [r7, #14]
 800899c:	e012      	b.n	80089c4 <write_data_to_ram+0x38>
	{
		p_custom_data->data[etx_ota_fw_received_size] = data[bytes_written];
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	18d1      	adds	r1, r2, r3
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <write_data_to_ram+0x4c>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <write_data_to_ram+0x50>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	7809      	ldrb	r1, [r1, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	460a      	mov	r2, r1
 80089b2:	721a      	strb	r2, [r3, #8]
        etx_ota_fw_received_size++;
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <write_data_to_ram+0x50>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a08      	ldr	r2, [pc, #32]	; (80089dc <write_data_to_ram+0x50>)
 80089bc:	6013      	str	r3, [r2, #0]
	for (uint16_t bytes_written=0; bytes_written<data_len; bytes_written++)
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	3301      	adds	r3, #1
 80089c2:	81fb      	strh	r3, [r7, #14]
 80089c4:	89fa      	ldrh	r2, [r7, #14]
 80089c6:	887b      	ldrh	r3, [r7, #2]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d3e8      	bcc.n	800899e <write_data_to_ram+0x12>
	}
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	200004cc 	.word	0x200004cc
 80089dc:	200004c0 	.word	0x200004c0

080089e0 <HAL_ret_handler>:

static ETX_OTA_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d006      	beq.n	80089fe <HAL_ret_handler+0x1e>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dd06      	ble.n	8008a02 <HAL_ret_handler+0x22>
 80089f4:	3b02      	subs	r3, #2
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d803      	bhi.n	8008a02 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return ETX_OTA_EC_NR;
 80089fa:	2302      	movs	r3, #2
 80089fc:	e002      	b.n	8008a04 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return ETX_OTA_EC_ERR;
 80089fe:	2304      	movs	r3, #4
 8008a00:	e000      	b.n	8008a04 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8008a02:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
	...

08008a10 <crc32_mpeg2>:
        0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
        0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4,
};												/**< @brief Global 32-bit CRC (MPEG-2) Lookup Table. */

uint32_t crc32_mpeg2(uint8_t *p_data, uint32_t data_length)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
    /** <b>Local variable checksum:</b> Will hold the resulting checksum of the 32-bit CRC Hash Function to be calculated. @note A checksum is any sort of mathematical operation that it is performed on data to represent its number of bits in a transmission message. This is usually used by programmers to detect high-level errors within data transmissions. The way this is used is prior to transmission, such that every piece of data or file can be assigned a checksum value after running a cryptographic has function, which in this particular case, the has function is 32-bit CRC. */
    uint32_t checksum = 0xFFFFFFFF;
 8008a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1e:	617b      	str	r3, [r7, #20]

    /* Validate the length of the data from which it is being requested to calculate the 32-bit CRC. */
    if (data_length == 0xFFFFFFFF)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d101      	bne.n	8008a2c <crc32_mpeg2+0x1c>
    {
    	return checksum;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	e01c      	b.n	8008a66 <crc32_mpeg2+0x56>
    }

    /* Apply the 32-bit CRC Hash Function to the given input data (i.e., The data towards which the \p p_data pointer points to). */
    for (unsigned int i=0; i<data_length; i++)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	e014      	b.n	8008a5c <crc32_mpeg2+0x4c>
    {
        uint8_t top = (uint8_t) (checksum >> 24);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	0e1b      	lsrs	r3, r3, #24
 8008a36:	73fb      	strb	r3, [r7, #15]
        top ^= p_data[i];
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	4053      	eors	r3, r2
 8008a44:	73fb      	strb	r3, [r7, #15]
        checksum = (checksum << 8) ^ crc_table[top];
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	021a      	lsls	r2, r3, #8
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4908      	ldr	r1, [pc, #32]	; (8008a70 <crc32_mpeg2+0x60>)
 8008a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a52:	4053      	eors	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
    for (unsigned int i=0; i<data_length; i++)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d3e6      	bcc.n	8008a32 <crc32_mpeg2+0x22>
    }
    return checksum;
 8008a64:	697b      	ldr	r3, [r7, #20]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr
 8008a70:	0800d7cc 	.word	0x0800d7cc

08008a74 <firmware_update_configurations_init>:
 * @date September 26, 2023.
 */
static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

FirmUpdConf_Status firmware_update_configurations_init()
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
	/** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of the Data Block to which the @ref p_most_recent_val pointer points to. */
	uint32_t cal_crc;
	/** <b>Local variable p_next_val:</b> Firmware Update Configurations Block pointer that should point to the Firmware Update Configurations Block located right after the one with the most recently written value (i.e., right after the Data Block to which the @ref p_most_recent_val pointer points to). */
	firmware_update_config_t *p_next_val;

	p_most_recent_val = ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE) - 1;
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008a7c:	4a27      	ldr	r2, [pc, #156]	; (8008b1c <firmware_update_configurations_init+0xa8>)
 8008a7e:	601a      	str	r2, [r3, #0]

	/* Cycle through flash until an erased value is found. */
	#if ETX_OTA_VERBOSE
		printf("Initializing Firmware Update Configurations sub-module...\r\n");
	#endif
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <firmware_update_configurations_init+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e02b      	b.n	8008ade <firmware_update_configurations_init+0x6a>
	{
		if (p_next_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	7fdb      	ldrb	r3, [r3, #31]
 8008a8a:	2bff      	cmp	r3, #255	; 0xff
 8008a8c:	d121      	bne.n	8008ad2 <firmware_update_configurations_init+0x5e>
		{
			if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	7fdb      	ldrb	r3, [r3, #31]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11c      	bne.n	8008ad2 <firmware_update_configurations_init+0x5e>
			{
				/* Calculate and verify the 32-bit CRC of @ref p_most_recent_val . If validation is successful, then proceed normally. Otherwise, ignore the current Data Block that @ref p_most_recent_val is pointing towards to and keep searching. */
				cal_crc = crc32_mpeg2((uint8_t *) &p_most_recent_val->data, FIRMWARE_UPDATE_CONFIG_BLOCK_SIZE_WITHOUT_CRC);
 8008a98:	4b1f      	ldr	r3, [pc, #124]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	221c      	movs	r2, #28
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff ffb4 	bl	8008a10 <crc32_mpeg2>
 8008aa8:	60b8      	str	r0, [r7, #8]
				if(cal_crc != p_most_recent_val->crc32)
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d018      	beq.n	8008ae8 <firmware_update_configurations_init+0x74>
				{
					/* Since the Flash Memory has been identified to be corrupted, erase the contents of the two Flash Memory pages of the Firmware Update Configurations sub-module. */
					#if ETX_OTA_VERBOSE
						printf("WARNING: One of the Flash Memory pages designated to the Firmware Update Configurations sub-module has been identified to be corrupted.\r\n");
					#endif
					ret = restore_firm_updt_config_flash_memory();
 8008ab6:	f000 f853 	bl	8008b60 <restore_firm_updt_config_flash_memory>
 8008aba:	4603      	mov	r3, r0
 8008abc:	80fb      	strh	r3, [r7, #6]
					if (ret != FIRM_UPDT_CONF_EC_OK)
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <firmware_update_configurations_init+0x54>
					{
						#if ETX_OTA_VERBOSE
							printf("ERROR: The Firmware Update Configurations sub-module could not be initialized.\r\n");
						#endif
						return FIRM_UPDT_CONF_EC_CRPT;
 8008ac4:	2305      	movs	r3, #5
 8008ac6:	e022      	b.n	8008b0e <firmware_update_configurations_init+0x9a>
					}

					/* We define that there is no data in the Flash Memory pages of the Firmware Update Configurations sub-module. */
					p_most_recent_val = NULL;
 8008ac8:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]

					#if ETX_OTA_VERBOSE
						printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
					#endif
					return FIRM_UPDT_CONF_EC_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e01d      	b.n	8008b0e <firmware_update_configurations_init+0x9a>
				}
				break;
			}
		}
		p_most_recent_val = p_next_val;
 8008ad2:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6013      	str	r3, [r2, #0]
	for (p_next_val = (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_START_ADDR; p_next_val < (firmware_update_config_t *)FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE; p_next_val++)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3320      	adds	r3, #32
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a10      	ldr	r2, [pc, #64]	; (8008b24 <firmware_update_configurations_init+0xb0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d3cf      	bcc.n	8008a86 <firmware_update_configurations_init+0x12>
 8008ae6:	e000      	b.n	8008aea <firmware_update_configurations_init+0x76>
				break;
 8008ae8:	bf00      	nop
	}

	/* If the end of the for-loop is reached and if last location is erased, then there is currently no data in the Firmware Update Configuration's designated Flash Memory pages. */
	if (p_next_val == (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a0d      	ldr	r2, [pc, #52]	; (8008b24 <firmware_update_configurations_init+0xb0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d107      	bne.n	8008b02 <firmware_update_configurations_init+0x8e>
	{
		if (p_most_recent_val->flags.is_erased == FLASH_BLOCK_ERASED)
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	7fdb      	ldrb	r3, [r3, #31]
 8008af8:	2bff      	cmp	r3, #255	; 0xff
 8008afa:	d102      	bne.n	8008b02 <firmware_update_configurations_init+0x8e>
		{
			p_most_recent_val = NULL;
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <firmware_update_configurations_init+0xa4>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
		}
	}

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	ret = prep_page_swap();
 8008b02:	f000 f84d 	bl	8008ba0 <prep_page_swap>
 8008b06:	4603      	mov	r3, r0
 8008b08:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: The Firmware Update Configurations sub-module was successfully initialized.\r\n");
		#endif
	}

	return ret;
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	b2db      	uxtb	r3, r3
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200004dc 	.word	0x200004dc
 8008b1c:	0801efe0 	.word	0x0801efe0
 8008b20:	0801e000 	.word	0x0801e000
 8008b24:	0801f000 	.word	0x0801f000

08008b28 <firmware_update_configurations_read>:

FirmUpdConf_Status firmware_update_configurations_read(firmware_update_config_data_t *p_data)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
	firmware_update_config_t *p_current_val = p_most_recent_val;
 8008b30:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <firmware_update_configurations_read+0x30>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]
	if (p_current_val == NULL)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <firmware_update_configurations_read+0x18>
	{
		p_current_val = (firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_START_ADDR;
 8008b3c:	4b07      	ldr	r3, [pc, #28]	; (8008b5c <firmware_update_configurations_read+0x34>)
 8008b3e:	60fb      	str	r3, [r7, #12]
	}

	memcpy(p_data, &(p_current_val->data), FIRMWARE_UPDATE_CONFIG_DATA_SIZE);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3304      	adds	r3, #4
 8008b44:	2218      	movs	r2, #24
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f003 fd93 	bl	800c674 <memcpy>

	return FIRM_UPDT_CONF_EC_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	200004dc 	.word	0x200004dc
 8008b5c:	0801e000 	.word	0x0801e000

08008b60 <restore_firm_updt_config_flash_memory>:
	#endif
	return ret;
}

static FirmUpdConf_Status restore_firm_updt_config_flash_memory()
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
	uint16_t ret;

	#if ETX_OTA_VERBOSE
		printf("Erasing all Flash Memory pages from the Firmware Update Configurations sub-module to restore their functionalities...\r\n");
	#endif
	ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8008b66:	480c      	ldr	r0, [pc, #48]	; (8008b98 <restore_firm_updt_config_flash_memory+0x38>)
 8008b68:	f000 f84e 	bl	8008c08 <page_erase>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	80fb      	strh	r3, [r7, #6]
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <restore_firm_updt_config_flash_memory+0x1c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 1 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	e009      	b.n	8008b90 <restore_firm_updt_config_flash_memory+0x30>
	}
	page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8008b7c:	4807      	ldr	r0, [pc, #28]	; (8008b9c <restore_firm_updt_config_flash_memory+0x3c>)
 8008b7e:	f000 f843 	bl	8008c08 <page_erase>
	if (ret != FIRM_UPDT_CONF_EC_OK)
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <restore_firm_updt_config_flash_memory+0x2e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The designated Flash Memory page 2 of the Firmware Update Configurations sub-module could not be restored.\r\n");
		#endif
		return ret;
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	e000      	b.n	8008b90 <restore_firm_updt_config_flash_memory+0x30>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The Flash Memory pages from the Firmware Update Configurations sub-module have been restored to its original factory form.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	0801e000 	.word	0x0801e000
 8008b9c:	0801e800 	.word	0x0801e800

08008ba0 <prep_page_swap>:

static FirmUpdConf_Status prep_page_swap()
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
	#if ETX_OTA_VERBOSE
		printf("Preparing the Firmware Update Configurations sub-module for a possible future page swap...\r\n");
	#endif

	/* If one of the designated Flash Memory pages of the Firmware Update Configurations sub-module is full, then erase it. */
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <prep_page_swap+0x58>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a14      	ldr	r2, [pc, #80]	; (8008bfc <prep_page_swap+0x5c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d109      	bne.n	8008bc4 <prep_page_swap+0x24>
	   (((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_END_ADDR_PLUS_ONE)-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8008bb0:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <prep_page_swap+0x60>)
 8008bb2:	7fdb      	ldrb	r3, [r3, #31]
	if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR) &&
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d105      	bne.n	8008bc4 <prep_page_swap+0x24>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 2...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR);
 8008bb8:	4812      	ldr	r0, [pc, #72]	; (8008c04 <prep_page_swap+0x64>)
 8008bba:	f000 f825 	bl	8008c08 <page_erase>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 8008bc2:	e012      	b.n	8008bea <prep_page_swap+0x4a>
			#if ETX_OTA_VERBOSE
				printf("DONE: The Firmware Update Configuration's page 2 was successfully erased.\r\n");
			#endif
		}
	}
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <prep_page_swap+0x58>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a0e      	ldr	r2, [pc, #56]	; (8008c04 <prep_page_swap+0x64>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d10b      	bne.n	8008be6 <prep_page_swap+0x46>
			(p_most_recent_val-1)->flags.is_erased == FLASH_BLOCK_NOT_ERASED)
 8008bce:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <prep_page_swap+0x58>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3b20      	subs	r3, #32
 8008bd4:	7fdb      	ldrb	r3, [r3, #31]
	else if (p_most_recent_val == ((firmware_update_config_t *) FIRMWARE_UPDATE_CONFIG_PAGE_2_START_ADDR) &&
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <prep_page_swap+0x46>
	{
		#if ETX_OTA_VERBOSE
			printf("Requesting to erase Firmware Update Configuration's page 1...\r\n");
		#endif
		ret = page_erase((uint32_t *) FIRMWARE_UPDATE_CONFIG_PAGE_1_START_ADDR);
 8008bda:	4808      	ldr	r0, [pc, #32]	; (8008bfc <prep_page_swap+0x5c>)
 8008bdc:	f000 f814 	bl	8008c08 <page_erase>
 8008be0:	4603      	mov	r3, r0
 8008be2:	80fb      	strh	r3, [r7, #6]
		if (ret != FIRM_UPDT_CONF_EC_OK)
 8008be4:	e001      	b.n	8008bea <prep_page_swap+0x4a>
			#endif
		}
	}
	else
	{
		ret = FIRM_UPDT_CONF_EC_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	80fb      	strh	r3, [r7, #6]
		#if ETX_OTA_VERBOSE
			printf("DONE: No page swap preparations required at the moment.\r\n");
		#endif
	}

	return ret;
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	b2db      	uxtb	r3, r3
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200004dc 	.word	0x200004dc
 8008bfc:	0801e000 	.word	0x0801e000
 8008c00:	0801efe0 	.word	0x0801efe0
 8008c04:	0801e800 	.word	0x0801e800

08008c08 <page_erase>:

static FirmUpdConf_Status page_erase(uint32_t *page_start_addr)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
		printf("Erasing the Flash memory page that starts at address 0x%08X...\r\n", (unsigned int) page_start_addr);
	#endif
	HAL_StatusTypeDef ret;

	/* Unlock HAL Flash */
	ret = HAL_FLASH_Unlock();
 8008c10:	f001 fc7e 	bl	800a510 <HAL_FLASH_Unlock>
 8008c14:	4603      	mov	r3, r0
 8008c16:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f838 	bl	8008c90 <HAL_ret_handler>
 8008c20:	4603      	mov	r3, r0
 8008c22:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8008c24:	7ffb      	ldrb	r3, [r7, #31]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <page_erase+0x26>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: HAL Flash could not be unlocked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	e02c      	b.n	8008c88 <page_erase+0x80>
	}

	/* Erase desired Flash Memory page. */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error;
	EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Banks        = FLASH_BANK_1;
 8008c32:	2301      	movs	r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress  = (uint32_t) page_start_addr;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages      = 1U;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	61bb      	str	r3, [r7, #24]

	ret = HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8008c3e:	f107 0208 	add.w	r2, r7, #8
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f001 fd2d 	bl	800a6a8 <HAL_FLASHEx_Erase>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8008c52:	7ffb      	ldrb	r3, [r7, #31]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f81b 	bl	8008c90 <HAL_ret_handler>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8008c5e:	7ffb      	ldrb	r3, [r7, #31]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <page_erase+0x60>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested Flash Memory page at address 0x%08X could not be erased; Firmware Update Configurations Exception code %d.\r\n", (unsigned int) page_start_addr, ret);
		#endif
		return ret;
 8008c64:	7ffb      	ldrb	r3, [r7, #31]
 8008c66:	e00f      	b.n	8008c88 <page_erase+0x80>
	}

	/* Leave the Flash Memory locked as it originally was. */
	ret = HAL_FLASH_Lock();
 8008c68:	f001 fc78 	bl	800a55c <HAL_FLASH_Lock>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	77fb      	strb	r3, [r7, #31]
	ret = HAL_ret_handler(ret);
 8008c70:	7ffb      	ldrb	r3, [r7, #31]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f80c 	bl	8008c90 <HAL_ret_handler>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK)
 8008c7c:	7ffb      	ldrb	r3, [r7, #31]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <page_erase+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The Flash Memory could not be locked; Firmware Update Configurations Exception code %d.\r\n", ret);
		#endif
		return ret;
 8008c82:	7ffb      	ldrb	r3, [r7, #31]
 8008c84:	e000      	b.n	8008c88 <page_erase+0x80>
	}

	#if ETX_OTA_VERBOSE
		printf("DONE: The requested Flash Memory page was successfully erased.\r\n");
	#endif
	return FIRM_UPDT_CONF_EC_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_ret_handler>:

static FirmUpdConf_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d006      	beq.n	8008cae <HAL_ret_handler+0x1e>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd06      	ble.n	8008cb2 <HAL_ret_handler+0x22>
 8008ca4:	3b02      	subs	r3, #2
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d803      	bhi.n	8008cb2 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return FIRM_UPDT_CONF_EC_NR;
 8008caa:	2302      	movs	r3, #2
 8008cac:	e002      	b.n	8008cb4 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return FIRM_UPDT_CONF_EC_ERR;
 8008cae:	2304      	movs	r3, #4
 8008cb0:	e000      	b.n	8008cb4 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
	...

08008cc0 <init_hm10_module>:
 * @date October 17, 2023.
 */
static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status);

void init_hm10_module(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	p_huart = huart;
 8008cc8:	4a03      	ldr	r2, [pc, #12]	; (8008cd8 <init_hm10_module+0x18>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6013      	str	r3, [r2, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr
 8008cd8:	200004e0 	.word	0x200004e0

08008cdc <send_hm10_reset_cmd>:

	return HM10_EC_OK;
}

HM10_Status send_hm10_reset_cmd()
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8008ce2:	f000 fcbd 	bl	8009660 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Reset Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Reset Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 8008ce6:	4b33      	ldr	r3, [pc, #204]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008ce8:	2241      	movs	r2, #65	; 0x41
 8008cea:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 8008cec:	4b31      	ldr	r3, [pc, #196]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008cee:	2254      	movs	r2, #84	; 0x54
 8008cf0:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 8008cf2:	4b30      	ldr	r3, [pc, #192]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008cf4:	222b      	movs	r2, #43	; 0x2b
 8008cf6:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 8008cf8:	4b2e      	ldr	r3, [pc, #184]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008cfa:	2252      	movs	r2, #82	; 0x52
 8008cfc:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'E';
 8008cfe:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d00:	2245      	movs	r2, #69	; 0x45
 8008d02:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'S';
 8008d04:	4b2b      	ldr	r3, [pc, #172]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d06:	2253      	movs	r2, #83	; 0x53
 8008d08:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8008d0a:	4b2a      	ldr	r3, [pc, #168]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d0c:	2245      	movs	r2, #69	; 0x45
 8008d0e:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = 'T';
 8008d10:	4b28      	ldr	r3, [pc, #160]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d12:	2254      	movs	r2, #84	; 0x54
 8008d14:	71da      	strb	r2, [r3, #7]

	/* Send the HM-10 Device's Reset Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RESET_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8008d16:	4b28      	ldr	r3, [pc, #160]	; (8008db8 <send_hm10_reset_cmd+0xdc>)
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008d1e:	2208      	movs	r2, #8
 8008d20:	4924      	ldr	r1, [pc, #144]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d22:	f002 fb7d 	bl	800b420 <HAL_UART_Transmit>
 8008d26:	4603      	mov	r3, r0
 8008d28:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 8008d2a:	887b      	ldrh	r3, [r7, #2]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fcb0 	bl	8009694 <HAL_ret_handler>
 8008d34:	4603      	mov	r3, r0
 8008d36:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 8008d38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <send_hm10_reset_cmd+0x6a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Reset Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8008d40:	887b      	ldrh	r3, [r7, #2]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	e031      	b.n	8008daa <send_hm10_reset_cmd+0xce>
	}

	/* Receive the HM-10 Device's Reset Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RESET_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8008d46:	4b1c      	ldr	r3, [pc, #112]	; (8008db8 <send_hm10_reset_cmd+0xdc>)
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008d4e:	2208      	movs	r2, #8
 8008d50:	4918      	ldr	r1, [pc, #96]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d52:	f002 fbe8 	bl	800b526 <HAL_UART_Receive>
 8008d56:	4603      	mov	r3, r0
 8008d58:	807b      	strh	r3, [r7, #2]
	ret = HAL_ret_handler(ret);
 8008d5a:	887b      	ldrh	r3, [r7, #2]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fc98 	bl	8009694 <HAL_ret_handler>
 8008d64:	4603      	mov	r3, r0
 8008d66:	807b      	strh	r3, [r7, #2]
	if (ret != HAL_OK)
 8008d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <send_hm10_reset_cmd+0x9a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8008d70:	887b      	ldrh	r3, [r7, #2]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	e019      	b.n	8008daa <send_hm10_reset_cmd+0xce>
	}

	/* Validate the HM-10 Device's Reset Response. */
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
 8008d7a:	e00e      	b.n	8008d9a <send_hm10_reset_cmd+0xbe>
	{
		if (TxRx_Buffer[i] != HM10_Reset_resp[i])
 8008d7c:	4a0d      	ldr	r2, [pc, #52]	; (8008db4 <send_hm10_reset_cmd+0xd8>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	490d      	ldr	r1, [pc, #52]	; (8008dbc <send_hm10_reset_cmd+0xe0>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	440b      	add	r3, r1
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d001      	beq.n	8008d94 <send_hm10_reset_cmd+0xb8>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Reset Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8008d90:	2304      	movs	r3, #4
 8008d92:	e00a      	b.n	8008daa <send_hm10_reset_cmd+0xce>
	for (int i=0; i<HM10_RESET_RESPONSE_SIZE; i++)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3301      	adds	r3, #1
 8008d98:	607b      	str	r3, [r7, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b07      	cmp	r3, #7
 8008d9e:	dded      	ble.n	8008d7c <send_hm10_reset_cmd+0xa0>
	#if ETX_OTA_VERBOSE
		printf("DONE: A Reset Command has been successfully sent to the HM-10 BT Device.\r\n");
	#endif

	/* Generating Delay to allow the HM-10 BT Device to finish resetting correctly before any other action is request to it. */
	HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8008da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008da4:	f001 f9b6 	bl	800a114 <HAL_Delay>

	return HM10_EC_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200004e4 	.word	0x200004e4
 8008db8:	200004e0 	.word	0x200004e0
 8008dbc:	20000018 	.word	0x20000018

08008dc0 <send_hm10_renew_cmd>:

HM10_Status send_hm10_renew_cmd()
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8008dc6:	f000 fc4b 	bl	8009660 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Renew Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Renew Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 8008dca:	4b33      	ldr	r3, [pc, #204]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008dcc:	2241      	movs	r2, #65	; 0x41
 8008dce:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 8008dd0:	4b31      	ldr	r3, [pc, #196]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008dd2:	2254      	movs	r2, #84	; 0x54
 8008dd4:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 8008dd6:	4b30      	ldr	r3, [pc, #192]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008dd8:	222b      	movs	r2, #43	; 0x2b
 8008dda:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'R';
 8008ddc:	4b2e      	ldr	r3, [pc, #184]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008dde:	2252      	movs	r2, #82	; 0x52
 8008de0:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'E';
 8008de2:	4b2d      	ldr	r3, [pc, #180]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008de4:	2245      	movs	r2, #69	; 0x45
 8008de6:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'N';
 8008de8:	4b2b      	ldr	r3, [pc, #172]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008dea:	224e      	movs	r2, #78	; 0x4e
 8008dec:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 8008dee:	4b2a      	ldr	r3, [pc, #168]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008df0:	2245      	movs	r2, #69	; 0x45
 8008df2:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = 'W';
 8008df4:	4b28      	ldr	r3, [pc, #160]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008df6:	2257      	movs	r2, #87	; 0x57
 8008df8:	71da      	strb	r2, [r3, #7]

    /* Send the HM-10 Device's Renew Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_RENEW_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8008dfa:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <send_hm10_renew_cmd+0xdc>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008e02:	2208      	movs	r2, #8
 8008e04:	4924      	ldr	r1, [pc, #144]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008e06:	f002 fb0b 	bl	800b420 <HAL_UART_Transmit>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 8008e0e:	887b      	ldrh	r3, [r7, #2]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fc3e 	bl	8009694 <HAL_ret_handler>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 8008e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <send_hm10_renew_cmd+0x6a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Renew Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 8008e24:	887b      	ldrh	r3, [r7, #2]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	e031      	b.n	8008e8e <send_hm10_renew_cmd+0xce>
    }

    /* Receive the HM-10 Device's Renew Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_RENEW_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <send_hm10_renew_cmd+0xdc>)
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008e32:	2208      	movs	r2, #8
 8008e34:	4918      	ldr	r1, [pc, #96]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008e36:	f002 fb76 	bl	800b526 <HAL_UART_Receive>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	807b      	strh	r3, [r7, #2]
    ret = HAL_ret_handler(ret);
 8008e3e:	887b      	ldrh	r3, [r7, #2]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fc26 	bl	8009694 <HAL_ret_handler>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	807b      	strh	r3, [r7, #2]
    if (ret != HAL_OK)
 8008e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <send_hm10_renew_cmd+0x9a>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	e019      	b.n	8008e8e <send_hm10_renew_cmd+0xce>
    }

    /* Validate the HM-10 Device's Renew Response. */
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
 8008e5e:	e00e      	b.n	8008e7e <send_hm10_renew_cmd+0xbe>
    {
        if (TxRx_Buffer[i] != HM10_Renew_resp[i])
 8008e60:	4a0d      	ldr	r2, [pc, #52]	; (8008e98 <send_hm10_renew_cmd+0xd8>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4413      	add	r3, r2
 8008e66:	781a      	ldrb	r2, [r3, #0]
 8008e68:	490d      	ldr	r1, [pc, #52]	; (8008ea0 <send_hm10_renew_cmd+0xe0>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d001      	beq.n	8008e78 <send_hm10_renew_cmd+0xb8>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Renew Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_EC_ERR;
 8008e74:	2304      	movs	r3, #4
 8008e76:	e00a      	b.n	8008e8e <send_hm10_renew_cmd+0xce>
    for (int i=0; i<HM10_RENEW_RESPONSE_SIZE; i++)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	dded      	ble.n	8008e60 <send_hm10_renew_cmd+0xa0>
	#if ETX_OTA_VERBOSE
        printf("DONE: A Renew Command has been successfully sent to the HM-10 BT Device.\r\n");
    #endif

    /* Generating Delay to allow the HM-10 BT Device to finish renewing correctly before any other action is request to it. */
    HAL_Delay(HM10_RESET_AND_RENEW_CMDS_DELAY);
 8008e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e88:	f001 f944 	bl	800a114 <HAL_Delay>

    return HM10_EC_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200004e4 	.word	0x200004e4
 8008e9c:	200004e0 	.word	0x200004e0
 8008ea0:	20000020 	.word	0x20000020

08008ea4 <set_hm10_name>:

HM10_Status set_hm10_name(uint8_t *hm10_name, uint8_t size)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
	/* Validating given name. */
	if (size > HM10_MAX_BLE_NAME_SIZE)
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	2b0c      	cmp	r3, #12
 8008eb4:	d901      	bls.n	8008eba <set_hm10_name+0x16>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: Requested BT Name must not exceed a length of %d bytes (i.e., %d ASCII Characters).\r\n", HM10_MAX_BLE_NAME_SIZE, HM10_MAX_BLE_NAME_SIZE);
		#endif
		return HM10_EC_ERR;
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	e0b1      	b.n	800901e <set_hm10_name+0x17a>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 8008ebe:	f000 fbcf 	bl	8009660 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Name Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Name Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	73fa      	strb	r2, [r7, #15]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4b57      	ldr	r3, [pc, #348]	; (8009028 <set_hm10_name+0x184>)
 8008ecc:	2141      	movs	r1, #65	; 0x41
 8008ece:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	73fa      	strb	r2, [r7, #15]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	4b53      	ldr	r3, [pc, #332]	; (8009028 <set_hm10_name+0x184>)
 8008eda:	2154      	movs	r1, #84	; 0x54
 8008edc:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	73fa      	strb	r2, [r7, #15]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4b50      	ldr	r3, [pc, #320]	; (8009028 <set_hm10_name+0x184>)
 8008ee8:	212b      	movs	r1, #43	; 0x2b
 8008eea:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'N';
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	73fa      	strb	r2, [r7, #15]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4b4c      	ldr	r3, [pc, #304]	; (8009028 <set_hm10_name+0x184>)
 8008ef6:	214e      	movs	r1, #78	; 0x4e
 8008ef8:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	73fa      	strb	r2, [r7, #15]
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b49      	ldr	r3, [pc, #292]	; (8009028 <set_hm10_name+0x184>)
 8008f04:	2141      	movs	r1, #65	; 0x41
 8008f06:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'M';
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	73fa      	strb	r2, [r7, #15]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4b45      	ldr	r3, [pc, #276]	; (8009028 <set_hm10_name+0x184>)
 8008f12:	214d      	movs	r1, #77	; 0x4d
 8008f14:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'E';
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	73fa      	strb	r2, [r7, #15]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4b42      	ldr	r3, [pc, #264]	; (8009028 <set_hm10_name+0x184>)
 8008f20:	2145      	movs	r1, #69	; 0x45
 8008f22:	5499      	strb	r1, [r3, r2]

	/** <b>Local variable size_with_offset:</b> Either the total size in bytes stated at the \p size param plus the bytes populated in the Tx/Rx Buffer for only the Name Command, or the total size in bytes stated at the \p size param plus the bytes read from the Tx/Rx Buffer for only the Name Response. */
	uint8_t size_with_offset = size + bytes_populated_in_TxRx_Buffer;
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	4413      	add	r3, r2
 8008f2a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73bb      	strb	r3, [r7, #14]
 8008f30:	e00c      	b.n	8008f4c <set_hm10_name+0xa8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = hm10_name[i];
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	441a      	add	r2, r3
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	73f9      	strb	r1, [r7, #15]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	4b39      	ldr	r3, [pc, #228]	; (8009028 <set_hm10_name+0x184>)
 8008f44:	545a      	strb	r2, [r3, r1]
	for (uint8_t i=0; bytes_populated_in_TxRx_Buffer<size_with_offset; i++)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	73bb      	strb	r3, [r7, #14]
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	7afb      	ldrb	r3, [r7, #11]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d3ee      	bcc.n	8008f32 <set_hm10_name+0x8e>
	}

	/* Send the HM-10 Device's Set Name Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8008f54:	4b35      	ldr	r3, [pc, #212]	; (800902c <set_hm10_name+0x188>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008f60:	4931      	ldr	r1, [pc, #196]	; (8009028 <set_hm10_name+0x184>)
 8008f62:	f002 fa5d 	bl	800b420 <HAL_UART_Transmit>
 8008f66:	4603      	mov	r3, r0
 8008f68:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 8008f6a:	893b      	ldrh	r3, [r7, #8]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fb90 	bl	8009694 <HAL_ret_handler>
 8008f74:	4603      	mov	r3, r0
 8008f76:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 8008f78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <set_hm10_name+0xe2>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Name Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8008f80:	893b      	ldrh	r3, [r7, #8]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	e04b      	b.n	800901e <set_hm10_name+0x17a>
	}

	/* Receive the HM-10 Device's Set Name Response. */
	bytes_populated_in_TxRx_Buffer = HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME + size;
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	3307      	adds	r3, #7
 8008f8a:	73fb      	strb	r3, [r7, #15]
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, bytes_populated_in_TxRx_Buffer, HM10_CUSTOM_HAL_TIMEOUT);
 8008f8c:	4b27      	ldr	r3, [pc, #156]	; (800902c <set_hm10_name+0x188>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008f98:	4923      	ldr	r1, [pc, #140]	; (8009028 <set_hm10_name+0x184>)
 8008f9a:	f002 fac4 	bl	800b526 <HAL_UART_Receive>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	813b      	strh	r3, [r7, #8]
	ret = HAL_ret_handler(ret);
 8008fa2:	893b      	ldrh	r3, [r7, #8]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fb74 	bl	8009694 <HAL_ret_handler>
 8008fac:	4603      	mov	r3, r0
 8008fae:	813b      	strh	r3, [r7, #8]
	if (ret != HAL_OK)
 8008fb0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <set_hm10_name+0x11a>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8008fb8:	893b      	ldrh	r3, [r7, #8]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	e02f      	b.n	800901e <set_hm10_name+0x17a>
	}

	/* Validate the HM-10 Device's Set Name Response. */
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Name Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Name Response (i.e., @ref HM10_Set_Name_resp_without_name_value ). */
	uint8_t bytes_compared = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	737b      	strb	r3, [r7, #13]
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 8008fc2:	e00c      	b.n	8008fde <set_hm10_name+0x13a>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Name_resp_without_name_value[bytes_compared])
 8008fc4:	7b7b      	ldrb	r3, [r7, #13]
 8008fc6:	4a18      	ldr	r2, [pc, #96]	; (8009028 <set_hm10_name+0x184>)
 8008fc8:	5cd2      	ldrb	r2, [r2, r3]
 8008fca:	7b7b      	ldrb	r3, [r7, #13]
 8008fcc:	4918      	ldr	r1, [pc, #96]	; (8009030 <set_hm10_name+0x18c>)
 8008fce:	5ccb      	ldrb	r3, [r1, r3]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d001      	beq.n	8008fd8 <set_hm10_name+0x134>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	e022      	b.n	800901e <set_hm10_name+0x17a>
	for (; bytes_compared<HM10_SET_NAME_RESPONSE_SIZE_WITHOUT_REQUESTED_NAME; bytes_compared++)
 8008fd8:	7b7b      	ldrb	r3, [r7, #13]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	737b      	strb	r3, [r7, #13]
 8008fde:	7b7b      	ldrb	r3, [r7, #13]
 8008fe0:	2b06      	cmp	r3, #6
 8008fe2:	d9ef      	bls.n	8008fc4 <set_hm10_name+0x120>
		}
	}
	size_with_offset = size + bytes_compared;
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	7b7b      	ldrb	r3, [r7, #13]
 8008fe8:	4413      	add	r3, r2
 8008fea:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 8008fec:	2300      	movs	r3, #0
 8008fee:	733b      	strb	r3, [r7, #12]
 8008ff0:	e010      	b.n	8009014 <set_hm10_name+0x170>
	{
		if (TxRx_Buffer[bytes_compared++] != hm10_name[i])
 8008ff2:	7b7b      	ldrb	r3, [r7, #13]
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	737a      	strb	r2, [r7, #13]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <set_hm10_name+0x184>)
 8008ffc:	5c9a      	ldrb	r2, [r3, r2]
 8008ffe:	7b3b      	ldrb	r3, [r7, #12]
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	440b      	add	r3, r1
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d001      	beq.n	800900e <set_hm10_name+0x16a>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Name Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 800900a:	2304      	movs	r3, #4
 800900c:	e007      	b.n	800901e <set_hm10_name+0x17a>
	for (uint8_t i=0; bytes_compared<size_with_offset; i++)
 800900e:	7b3b      	ldrb	r3, [r7, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	733b      	strb	r3, [r7, #12]
 8009014:	7b7a      	ldrb	r2, [r7, #13]
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	429a      	cmp	r2, r3
 800901a:	d3ea      	bcc.n	8008ff2 <set_hm10_name+0x14e>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Name has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200004e4 	.word	0x200004e4
 800902c:	200004e0 	.word	0x200004e0
 8009030:	20000000 	.word	0x20000000

08009034 <set_hm10_role>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_role(HM10_Role ble_role)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	71fb      	strb	r3, [r7, #7]
	/* Validating given role. */
	switch (ble_role)
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	3b30      	subs	r3, #48	; 0x30
 8009042:	2b01      	cmp	r3, #1
 8009044:	d901      	bls.n	800904a <set_hm10_role+0x16>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: Requested BT Role %d is not recognized.\r\n", ble_role);
			#endif
			return HM10_EC_ERR;
 8009046:	2304      	movs	r3, #4
 8009048:	e06b      	b.n	8009122 <set_hm10_role+0xee>
			break;
 800904a:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 800904c:	f000 fb08 	bl	8009660 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Role Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Role Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 8009050:	4b36      	ldr	r3, [pc, #216]	; (800912c <set_hm10_role+0xf8>)
 8009052:	2241      	movs	r2, #65	; 0x41
 8009054:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 8009056:	4b35      	ldr	r3, [pc, #212]	; (800912c <set_hm10_role+0xf8>)
 8009058:	2254      	movs	r2, #84	; 0x54
 800905a:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 800905c:	4b33      	ldr	r3, [pc, #204]	; (800912c <set_hm10_role+0xf8>)
 800905e:	222b      	movs	r2, #43	; 0x2b
 8009060:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'R';
 8009062:	4b32      	ldr	r3, [pc, #200]	; (800912c <set_hm10_role+0xf8>)
 8009064:	2252      	movs	r2, #82	; 0x52
 8009066:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'O';
 8009068:	4b30      	ldr	r3, [pc, #192]	; (800912c <set_hm10_role+0xf8>)
 800906a:	224f      	movs	r2, #79	; 0x4f
 800906c:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'L';
 800906e:	4b2f      	ldr	r3, [pc, #188]	; (800912c <set_hm10_role+0xf8>)
 8009070:	224c      	movs	r2, #76	; 0x4c
 8009072:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <set_hm10_role+0xf8>)
 8009076:	2245      	movs	r2, #69	; 0x45
 8009078:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = ble_role;
 800907a:	4a2c      	ldr	r2, [pc, #176]	; (800912c <set_hm10_role+0xf8>)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Role Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_ROLE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8009080:	4b2b      	ldr	r3, [pc, #172]	; (8009130 <set_hm10_role+0xfc>)
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009088:	2208      	movs	r2, #8
 800908a:	4928      	ldr	r1, [pc, #160]	; (800912c <set_hm10_role+0xf8>)
 800908c:	f002 f9c8 	bl	800b420 <HAL_UART_Transmit>
 8009090:	4603      	mov	r3, r0
 8009092:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 8009094:	89bb      	ldrh	r3, [r7, #12]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fafb 	bl	8009694 <HAL_ret_handler>
 800909e:	4603      	mov	r3, r0
 80090a0:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 80090a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <set_hm10_role+0x7c>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Role Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 80090aa:	89bb      	ldrh	r3, [r7, #12]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e038      	b.n	8009122 <set_hm10_role+0xee>
	}

	/* Receive the HM-10 Device's Set Role Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_ROLE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80090b0:	4b1f      	ldr	r3, [pc, #124]	; (8009130 <set_hm10_role+0xfc>)
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80090b8:	2208      	movs	r2, #8
 80090ba:	491c      	ldr	r1, [pc, #112]	; (800912c <set_hm10_role+0xf8>)
 80090bc:	f002 fa33 	bl	800b526 <HAL_UART_Receive>
 80090c0:	4603      	mov	r3, r0
 80090c2:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 80090c4:	89bb      	ldrh	r3, [r7, #12]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fae3 	bl	8009694 <HAL_ret_handler>
 80090ce:	4603      	mov	r3, r0
 80090d0:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 80090d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <set_hm10_role+0xac>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 80090da:	89bb      	ldrh	r3, [r7, #12]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	e020      	b.n	8009122 <set_hm10_role+0xee>
	}

	/* Validate the HM-10 Device's Set Role Response. */
	/** <b>Local variable role_resp_size_without_role_value:</b> Size in bytes of the Role Response from the HM-10 BT device but without considering the length of the requested role value. */
	uint8_t role_resp_size_without_role_value = HM10_ROLE_RESPONSE_SIZE - 1;
 80090e0:	2307      	movs	r3, #7
 80090e2:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Role Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Role Response (i.e., @ref HM10_Set_Role_resp_without_role_value ). */
	uint8_t bytes_compared = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 80090e8:	e00e      	b.n	8009108 <set_hm10_role+0xd4>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Role_resp_without_role_value[bytes_compared])
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4a0f      	ldr	r2, [pc, #60]	; (800912c <set_hm10_role+0xf8>)
 80090ee:	5cd2      	ldrb	r2, [r2, r3]
 80090f0:	4b10      	ldr	r3, [pc, #64]	; (8009134 <set_hm10_role+0x100>)
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	440b      	add	r3, r1
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d001      	beq.n	8009102 <set_hm10_role+0xce>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80090fe:	2304      	movs	r3, #4
 8009100:	e00f      	b.n	8009122 <set_hm10_role+0xee>
	for (; bytes_compared<role_resp_size_without_role_value; bytes_compared++)
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	3301      	adds	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
 8009108:	7bfa      	ldrb	r2, [r7, #15]
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	429a      	cmp	r2, r3
 800910e:	d3ec      	bcc.n	80090ea <set_hm10_role+0xb6>
		}
	}
	if (TxRx_Buffer[bytes_compared] != ble_role)
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4a06      	ldr	r2, [pc, #24]	; (800912c <set_hm10_role+0xf8>)
 8009114:	5cd3      	ldrb	r3, [r2, r3]
 8009116:	79fa      	ldrb	r2, [r7, #7]
 8009118:	429a      	cmp	r2, r3
 800911a:	d001      	beq.n	8009120 <set_hm10_role+0xec>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Role Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
		#endif
		return HM10_EC_ERR;
 800911c:	2304      	movs	r3, #4
 800911e:	e000      	b.n	8009122 <set_hm10_role+0xee>
	}
	#if ETX_OTA_VERBOSE
		printf("DONE: A Role has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200004e4 	.word	0x200004e4
 8009130:	200004e0 	.word	0x200004e0
 8009134:	20000008 	.word	0x20000008

08009138 <set_hm10_pin>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin(uint8_t *pin)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* Validating given pin. */
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 8009140:	2300      	movs	r3, #0
 8009142:	75fb      	strb	r3, [r7, #23]
 8009144:	e00c      	b.n	8009160 <set_hm10_pin+0x28>
	{
		switch (pin[current_pin_character])
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	4413      	add	r3, r2
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	2b09      	cmp	r3, #9
 8009152:	d901      	bls.n	8009158 <set_hm10_pin+0x20>
				break;
			default:
				#if ETX_OTA_VERBOSE
					printf("ERROR: Expected a number character value in ASCII code on given pin value at index %d, but the following ASCII value was given instead: %c.\r\n", current_pin_character, pin[current_pin_character]);
				#endif
				return HM10_EC_ERR;
 8009154:	2304      	movs	r3, #4
 8009156:	e0ae      	b.n	80092b6 <set_hm10_pin+0x17e>
				break;
 8009158:	bf00      	nop
	for (uint8_t current_pin_character=0; current_pin_character<HM10_PIN_VALUE_SIZE; current_pin_character++)
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	3301      	adds	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	2b05      	cmp	r3, #5
 8009164:	d9ef      	bls.n	8009146 <set_hm10_pin+0xe>
	}

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;
	/** <b>Local variable bytes_populated_in_TxRx_Buffer:</b> Currently populated bytes of data into the Tx/Rx Global Buffer. */
	uint8_t bytes_populated_in_TxRx_Buffer = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	75bb      	strb	r3, [r7, #22]

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 800916a:	f000 fa79 	bl	8009660 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Pin Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Pin Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	75ba      	strb	r2, [r7, #22]
 8009174:	461a      	mov	r2, r3
 8009176:	4b52      	ldr	r3, [pc, #328]	; (80092c0 <set_hm10_pin+0x188>)
 8009178:	2141      	movs	r1, #65	; 0x41
 800917a:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'T';
 800917c:	7dbb      	ldrb	r3, [r7, #22]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	75ba      	strb	r2, [r7, #22]
 8009182:	461a      	mov	r2, r3
 8009184:	4b4e      	ldr	r3, [pc, #312]	; (80092c0 <set_hm10_pin+0x188>)
 8009186:	2154      	movs	r1, #84	; 0x54
 8009188:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = '+';
 800918a:	7dbb      	ldrb	r3, [r7, #22]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	75ba      	strb	r2, [r7, #22]
 8009190:	461a      	mov	r2, r3
 8009192:	4b4b      	ldr	r3, [pc, #300]	; (80092c0 <set_hm10_pin+0x188>)
 8009194:	212b      	movs	r1, #43	; 0x2b
 8009196:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'P';
 8009198:	7dbb      	ldrb	r3, [r7, #22]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	75ba      	strb	r2, [r7, #22]
 800919e:	461a      	mov	r2, r3
 80091a0:	4b47      	ldr	r3, [pc, #284]	; (80092c0 <set_hm10_pin+0x188>)
 80091a2:	2150      	movs	r1, #80	; 0x50
 80091a4:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'A';
 80091a6:	7dbb      	ldrb	r3, [r7, #22]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	75ba      	strb	r2, [r7, #22]
 80091ac:	461a      	mov	r2, r3
 80091ae:	4b44      	ldr	r3, [pc, #272]	; (80092c0 <set_hm10_pin+0x188>)
 80091b0:	2141      	movs	r1, #65	; 0x41
 80091b2:	5499      	strb	r1, [r3, r2]
	TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 80091b4:	7dbb      	ldrb	r3, [r7, #22]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	75ba      	strb	r2, [r7, #22]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <set_hm10_pin+0x188>)
 80091be:	2153      	movs	r1, #83	; 0x53
 80091c0:	5499      	strb	r1, [r3, r2]
    TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = 'S';
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	75ba      	strb	r2, [r7, #22]
 80091c8:	461a      	mov	r2, r3
 80091ca:	4b3d      	ldr	r3, [pc, #244]	; (80092c0 <set_hm10_pin+0x188>)
 80091cc:	2153      	movs	r1, #83	; 0x53
 80091ce:	5499      	strb	r1, [r3, r2]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80091d0:	2300      	movs	r3, #0
 80091d2:	757b      	strb	r3, [r7, #21]
 80091d4:	e00c      	b.n	80091f0 <set_hm10_pin+0xb8>
	{
		TxRx_Buffer[bytes_populated_in_TxRx_Buffer++] = pin[current_pin_character];
 80091d6:	7d7b      	ldrb	r3, [r7, #21]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	441a      	add	r2, r3
 80091dc:	7dbb      	ldrb	r3, [r7, #22]
 80091de:	1c59      	adds	r1, r3, #1
 80091e0:	75b9      	strb	r1, [r7, #22]
 80091e2:	4619      	mov	r1, r3
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	4b36      	ldr	r3, [pc, #216]	; (80092c0 <set_hm10_pin+0x188>)
 80091e8:	545a      	strb	r2, [r3, r1]
	for (uint8_t current_pin_character=0; bytes_populated_in_TxRx_Buffer<HM10_SET_PIN_CMD_SIZE; current_pin_character++)
 80091ea:	7d7b      	ldrb	r3, [r7, #21]
 80091ec:	3301      	adds	r3, #1
 80091ee:	757b      	strb	r3, [r7, #21]
 80091f0:	7dbb      	ldrb	r3, [r7, #22]
 80091f2:	2b0c      	cmp	r3, #12
 80091f4:	d9ef      	bls.n	80091d6 <set_hm10_pin+0x9e>
	}

	/* Send the HM-10 Device's Set Pin Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_PIN_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80091f6:	4b33      	ldr	r3, [pc, #204]	; (80092c4 <set_hm10_pin+0x18c>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80091fe:	220d      	movs	r2, #13
 8009200:	492f      	ldr	r1, [pc, #188]	; (80092c0 <set_hm10_pin+0x188>)
 8009202:	f002 f90d 	bl	800b420 <HAL_UART_Transmit>
 8009206:	4603      	mov	r3, r0
 8009208:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 800920a:	8a3b      	ldrh	r3, [r7, #16]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fa40 	bl	8009694 <HAL_ret_handler>
 8009214:	4603      	mov	r3, r0
 8009216:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 8009218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <set_hm10_pin+0xee>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Pin Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8009220:	8a3b      	ldrh	r3, [r7, #16]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	e047      	b.n	80092b6 <set_hm10_pin+0x17e>
	}

	/* Receive the HM-10 Device's Set Pin Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_PIN_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8009226:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <set_hm10_pin+0x18c>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800922e:	220d      	movs	r2, #13
 8009230:	4923      	ldr	r1, [pc, #140]	; (80092c0 <set_hm10_pin+0x188>)
 8009232:	f002 f978 	bl	800b526 <HAL_UART_Receive>
 8009236:	4603      	mov	r3, r0
 8009238:	823b      	strh	r3, [r7, #16]
	ret = HAL_ret_handler(ret);
 800923a:	8a3b      	ldrh	r3, [r7, #16]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fa28 	bl	8009694 <HAL_ret_handler>
 8009244:	4603      	mov	r3, r0
 8009246:	823b      	strh	r3, [r7, #16]
	if (ret != HAL_OK)
 8009248:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <set_hm10_pin+0x11e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8009250:	8a3b      	ldrh	r3, [r7, #16]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e02f      	b.n	80092b6 <set_hm10_pin+0x17e>
	}

	/* Validate the HM-10 Device's Set Pin Response. */
	/** <b>Local variable pin_resp_size_without_pin_value:</b> Size in bytes of the Pin Response from the HM-10 BT device but without considering the length of the pin value. */
	uint8_t pin_resp_size_without_pin_value = HM10_PIN_RESPONSE_SIZE - HM10_PIN_VALUE_SIZE;
 8009256:	2307      	movs	r3, #7
 8009258:	73fb      	strb	r3, [r7, #15]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Pin Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Pin Response (i.e., @ref HM10_Set_Pin_resp_without_pin_value ). */
	uint8_t bytes_compared = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	753b      	strb	r3, [r7, #20]
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 800925e:	e00e      	b.n	800927e <set_hm10_pin+0x146>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Pin_resp_without_pin_value[bytes_compared])
 8009260:	7d3b      	ldrb	r3, [r7, #20]
 8009262:	4a17      	ldr	r2, [pc, #92]	; (80092c0 <set_hm10_pin+0x188>)
 8009264:	5cd2      	ldrb	r2, [r2, r3]
 8009266:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <set_hm10_pin+0x190>)
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	7d3b      	ldrb	r3, [r7, #20]
 800926c:	440b      	add	r3, r1
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d001      	beq.n	8009278 <set_hm10_pin+0x140>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 8009274:	2304      	movs	r3, #4
 8009276:	e01e      	b.n	80092b6 <set_hm10_pin+0x17e>
	for (; bytes_compared<pin_resp_size_without_pin_value; bytes_compared++)
 8009278:	7d3b      	ldrb	r3, [r7, #20]
 800927a:	3301      	adds	r3, #1
 800927c:	753b      	strb	r3, [r7, #20]
 800927e:	7d3a      	ldrb	r2, [r7, #20]
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	429a      	cmp	r2, r3
 8009284:	d3ec      	bcc.n	8009260 <set_hm10_pin+0x128>
		}
	}
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 8009286:	2300      	movs	r3, #0
 8009288:	74fb      	strb	r3, [r7, #19]
 800928a:	e010      	b.n	80092ae <set_hm10_pin+0x176>
	{
		if (TxRx_Buffer[bytes_compared++] != pin[current_pin_character])
 800928c:	7d3b      	ldrb	r3, [r7, #20]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	753a      	strb	r2, [r7, #20]
 8009292:	461a      	mov	r2, r3
 8009294:	4b0a      	ldr	r3, [pc, #40]	; (80092c0 <set_hm10_pin+0x188>)
 8009296:	5c9a      	ldrb	r2, [r3, r2]
 8009298:	7cfb      	ldrb	r3, [r7, #19]
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	440b      	add	r3, r1
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d001      	beq.n	80092a8 <set_hm10_pin+0x170>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Pin Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
			#endif
			return HM10_EC_ERR;
 80092a4:	2304      	movs	r3, #4
 80092a6:	e006      	b.n	80092b6 <set_hm10_pin+0x17e>
	for (uint8_t current_pin_character=0; bytes_compared<HM10_PIN_RESPONSE_SIZE; current_pin_character++)
 80092a8:	7cfb      	ldrb	r3, [r7, #19]
 80092aa:	3301      	adds	r3, #1
 80092ac:	74fb      	strb	r3, [r7, #19]
 80092ae:	7d3b      	ldrb	r3, [r7, #20]
 80092b0:	2b0c      	cmp	r3, #12
 80092b2:	d9eb      	bls.n	800928c <set_hm10_pin+0x154>

	#if ETX_OTA_VERBOSE
		printf("DONE: A BT Pin has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200004e4 	.word	0x200004e4
 80092c4:	200004e0 	.word	0x200004e0
 80092c8:	2000000c 	.word	0x2000000c

080092cc <set_hm10_pin_code_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_pin_code_mode(HM10_Pin_Code_Mode pin_code_mode)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	71fb      	strb	r3, [r7, #7]
	/* Validating given pin code mode. */
	switch (pin_code_mode)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b30      	cmp	r3, #48	; 0x30
 80092da:	d003      	beq.n	80092e4 <set_hm10_pin_code_mode+0x18>
 80092dc:	2b32      	cmp	r3, #50	; 0x32
 80092de:	d001      	beq.n	80092e4 <set_hm10_pin_code_mode+0x18>
			break;
		default:
			#if ETX_OTA_VERBOSE
				printf("ERROR: An invalid pin code mode value has been given: %c_ASCII.\r\n", pin_code_mode);
			#endif
			return HM10_EC_ERR;
 80092e0:	2304      	movs	r3, #4
 80092e2:	e06b      	b.n	80093bc <set_hm10_pin_code_mode+0xf0>
			break;
 80092e4:	bf00      	nop

	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80092e6:	f000 f9bb 	bl	8009660 <HAL_uart_rx_flush>

	/* Populate the HM-10 Device's Set Type Command into the Tx/Rx Buffer. */
	#if ETX_OTA_VERBOSE
		printf("Sending Set Type Command to HM-10 BT Device...\r\n");
	#endif
	TxRx_Buffer[0] = 'A';
 80092ea:	4b36      	ldr	r3, [pc, #216]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 80092ec:	2241      	movs	r2, #65	; 0x41
 80092ee:	701a      	strb	r2, [r3, #0]
	TxRx_Buffer[1] = 'T';
 80092f0:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 80092f2:	2254      	movs	r2, #84	; 0x54
 80092f4:	705a      	strb	r2, [r3, #1]
	TxRx_Buffer[2] = '+';
 80092f6:	4b33      	ldr	r3, [pc, #204]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 80092f8:	222b      	movs	r2, #43	; 0x2b
 80092fa:	709a      	strb	r2, [r3, #2]
	TxRx_Buffer[3] = 'T';
 80092fc:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 80092fe:	2254      	movs	r2, #84	; 0x54
 8009300:	70da      	strb	r2, [r3, #3]
	TxRx_Buffer[4] = 'Y';
 8009302:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009304:	2259      	movs	r2, #89	; 0x59
 8009306:	711a      	strb	r2, [r3, #4]
	TxRx_Buffer[5] = 'P';
 8009308:	4b2e      	ldr	r3, [pc, #184]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 800930a:	2250      	movs	r2, #80	; 0x50
 800930c:	715a      	strb	r2, [r3, #5]
	TxRx_Buffer[6] = 'E';
 800930e:	4b2d      	ldr	r3, [pc, #180]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009310:	2245      	movs	r2, #69	; 0x45
 8009312:	719a      	strb	r2, [r3, #6]
	TxRx_Buffer[7] = pin_code_mode;
 8009314:	4a2b      	ldr	r2, [pc, #172]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	71d3      	strb	r3, [r2, #7]

	/* Send the HM-10 Device's Set Type Command. */
	ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_TYPE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800931a:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <set_hm10_pin_code_mode+0xfc>)
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009322:	2208      	movs	r2, #8
 8009324:	4927      	ldr	r1, [pc, #156]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009326:	f002 f87b 	bl	800b420 <HAL_UART_Transmit>
 800932a:	4603      	mov	r3, r0
 800932c:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 800932e:	89bb      	ldrh	r3, [r7, #12]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f9ae 	bl	8009694 <HAL_ret_handler>
 8009338:	4603      	mov	r3, r0
 800933a:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 800933c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <set_hm10_pin_code_mode+0x7e>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: The transmission of the Set Type Command to HM-10 BT Device has failed.\r\n");
		#endif
		return ret;
 8009344:	89bb      	ldrh	r3, [r7, #12]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	e038      	b.n	80093bc <set_hm10_pin_code_mode+0xf0>
	}

	/* Receive the HM-10 Device's Set Type Response. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_TYPE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <set_hm10_pin_code_mode+0xfc>)
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009352:	2208      	movs	r2, #8
 8009354:	491b      	ldr	r1, [pc, #108]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009356:	f002 f8e6 	bl	800b526 <HAL_UART_Receive>
 800935a:	4603      	mov	r3, r0
 800935c:	81bb      	strh	r3, [r7, #12]
	ret = HAL_ret_handler(ret);
 800935e:	89bb      	ldrh	r3, [r7, #12]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f996 	bl	8009694 <HAL_ret_handler>
 8009368:	4603      	mov	r3, r0
 800936a:	81bb      	strh	r3, [r7, #12]
	if (ret != HAL_OK)
 800936c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <set_hm10_pin_code_mode+0xae>
	{
		#if ETX_OTA_VERBOSE
			printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
		#endif
		return ret;
 8009374:	89bb      	ldrh	r3, [r7, #12]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	e020      	b.n	80093bc <set_hm10_pin_code_mode+0xf0>
	}

	/* Validate the HM-10 Device's Set Type Response. */
	/** <b>Local variable type_resp_size_without_pin_mode_value:</b> Size in bytes of the Type Response from the HM-10 BT device but without considering the length of the Type value. */
	uint8_t type_resp_size_without_pin_mode_value = HM10_TYPE_RESPONSE_SIZE - 1;
 800937a:	2307      	movs	r3, #7
 800937c:	72fb      	strb	r3, [r7, #11]
	/** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Type Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Type Response (i.e., @ref HM10_Set_Type_resp_without_type_value ). */
	uint8_t bytes_compared = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 8009382:	e00e      	b.n	80093a2 <set_hm10_pin_code_mode+0xd6>
	{
		if (TxRx_Buffer[bytes_compared] != HM10_Set_Type_resp_without_type_value[bytes_compared])
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	4a0f      	ldr	r2, [pc, #60]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 8009388:	5cd2      	ldrb	r2, [r2, r3]
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <set_hm10_pin_code_mode+0x100>)
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	440b      	add	r3, r1
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d001      	beq.n	800939c <set_hm10_pin_code_mode+0xd0>
		{
			#if ETX_OTA_VERBOSE
				printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Type_resp_without_type_value[bytes_compared]);
			#endif
			return HM10_EC_ERR;
 8009398:	2304      	movs	r3, #4
 800939a:	e00f      	b.n	80093bc <set_hm10_pin_code_mode+0xf0>
	for (; bytes_compared<type_resp_size_without_pin_mode_value; bytes_compared++)
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	3301      	adds	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d3ec      	bcc.n	8009384 <set_hm10_pin_code_mode+0xb8>
		}
	}
	if (TxRx_Buffer[bytes_compared] != pin_code_mode)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	4a05      	ldr	r2, [pc, #20]	; (80093c4 <set_hm10_pin_code_mode+0xf8>)
 80093ae:	5cd3      	ldrb	r3, [r2, r3]
 80093b0:	79fa      	ldrb	r2, [r7, #7]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d001      	beq.n	80093ba <set_hm10_pin_code_mode+0xee>
	{
		#if ETX_OTA_VERBOSE
		printf("ERROR: A Set Type Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], pin_code_mode);
		#endif
		return HM10_EC_ERR;
 80093b6:	2304      	movs	r3, #4
 80093b8:	e000      	b.n	80093bc <set_hm10_pin_code_mode+0xf0>

	#if ETX_OTA_VERBOSE
		printf("DONE: The desired Pin Code Mode has been successfully set in the HM-10 BT Device.\r\n");
	#endif

	return HM10_EC_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	200004e4 	.word	0x200004e4
 80093c8:	200004e0 	.word	0x200004e0
 80093cc:	20000010 	.word	0x20000010

080093d0 <set_hm10_module_work_mode>:

	return HM10_EC_OK;
}

HM10_Status set_hm10_module_work_mode(HM10_Module_Work_Mode module_work_mode)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
    /* Validating given module work mode. */
    switch (module_work_mode)
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	3b30      	subs	r3, #48	; 0x30
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <set_hm10_module_work_mode+0x16>
            break;
        default:
            #if ETX_OTA_VERBOSE
                printf("ERROR: An invalid module work mode value has been given: %c_ASCII.\r\n", module_work_mode);
            #endif
            return HM10_EC_ERR;
 80093e2:	2304      	movs	r3, #4
 80093e4:	e06b      	b.n	80094be <set_hm10_module_work_mode+0xee>
            break;
 80093e6:	bf00      	nop

    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80093e8:	f000 f93a 	bl	8009660 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Set Mode Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Set Mode Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80093ec:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 80093ee:	2241      	movs	r2, #65	; 0x41
 80093f0:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80093f2:	4b35      	ldr	r3, [pc, #212]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 80093f4:	2254      	movs	r2, #84	; 0x54
 80093f6:	705a      	strb	r2, [r3, #1]
    TxRx_Buffer[2] = '+';
 80093f8:	4b33      	ldr	r3, [pc, #204]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 80093fa:	222b      	movs	r2, #43	; 0x2b
 80093fc:	709a      	strb	r2, [r3, #2]
    TxRx_Buffer[3] = 'M';
 80093fe:	4b32      	ldr	r3, [pc, #200]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009400:	224d      	movs	r2, #77	; 0x4d
 8009402:	70da      	strb	r2, [r3, #3]
    TxRx_Buffer[4] = 'O';
 8009404:	4b30      	ldr	r3, [pc, #192]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009406:	224f      	movs	r2, #79	; 0x4f
 8009408:	711a      	strb	r2, [r3, #4]
    TxRx_Buffer[5] = 'D';
 800940a:	4b2f      	ldr	r3, [pc, #188]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 800940c:	2244      	movs	r2, #68	; 0x44
 800940e:	715a      	strb	r2, [r3, #5]
    TxRx_Buffer[6] = 'E';
 8009410:	4b2d      	ldr	r3, [pc, #180]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009412:	2245      	movs	r2, #69	; 0x45
 8009414:	719a      	strb	r2, [r3, #6]
    TxRx_Buffer[7] = module_work_mode;
 8009416:	4a2c      	ldr	r2, [pc, #176]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	71d3      	strb	r3, [r2, #7]

    /* Send the HM-10 Device's Set Mode Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_SET_MODE_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800941c:	4b2b      	ldr	r3, [pc, #172]	; (80094cc <set_hm10_module_work_mode+0xfc>)
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009424:	2208      	movs	r2, #8
 8009426:	4928      	ldr	r1, [pc, #160]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009428:	f001 fffa 	bl	800b420 <HAL_UART_Transmit>
 800942c:	4603      	mov	r3, r0
 800942e:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 8009430:	89bb      	ldrh	r3, [r7, #12]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f92d 	bl	8009694 <HAL_ret_handler>
 800943a:	4603      	mov	r3, r0
 800943c:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 800943e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <set_hm10_module_work_mode+0x7c>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Set Mode Command to HM-10 BT Device has failed.\r\n");
        #endif
        return ret;
 8009446:	89bb      	ldrh	r3, [r7, #12]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	e038      	b.n	80094be <set_hm10_module_work_mode+0xee>
    }

    /* Receive the HM-10 Device's Set Mode Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_MODE_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 800944c:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <set_hm10_module_work_mode+0xfc>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009454:	2208      	movs	r2, #8
 8009456:	491c      	ldr	r1, [pc, #112]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 8009458:	f002 f865 	bl	800b526 <HAL_UART_Receive>
 800945c:	4603      	mov	r3, r0
 800945e:	81bb      	strh	r3, [r7, #12]
    ret = HAL_ret_handler(ret);
 8009460:	89bb      	ldrh	r3, [r7, #12]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f915 	bl	8009694 <HAL_ret_handler>
 800946a:	4603      	mov	r3, r0
 800946c:	81bb      	strh	r3, [r7, #12]
    if (ret != HAL_OK)
 800946e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <set_hm10_module_work_mode+0xac>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return ret;
 8009476:	89bb      	ldrh	r3, [r7, #12]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	e020      	b.n	80094be <set_hm10_module_work_mode+0xee>
    }

    /* Validate the HM-10 Device's Set Mode Response. */
    /** <b>Local variable mode_resp_size_without_module_work_mode_value:</b> Size in bytes of the Mode Response from the HM-10 BT device but without considering the length of the Module Work Mode value. */
    uint8_t mode_resp_size_without_module_work_mode_value = HM10_MODE_RESPONSE_SIZE - 1;
 800947c:	2307      	movs	r3, #7
 800947e:	72fb      	strb	r3, [r7, #11]
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Set Mode Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Set Mode Response (i.e., @ref HM10_Set_Mode_resp_without_module_work_mode_value ). */
    uint8_t bytes_compared = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 8009484:	e00e      	b.n	80094a4 <set_hm10_module_work_mode+0xd4>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared])
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	4a0f      	ldr	r2, [pc, #60]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 800948a:	5cd2      	ldrb	r2, [r2, r3]
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <set_hm10_module_work_mode+0x100>)
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	440b      	add	r3, r1
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d001      	beq.n	800949e <set_hm10_module_work_mode+0xce>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], HM10_Set_Mode_resp_without_module_work_mode_value[bytes_compared]);
            #endif
            return HM10_EC_ERR;
 800949a:	2304      	movs	r3, #4
 800949c:	e00f      	b.n	80094be <set_hm10_module_work_mode+0xee>
    for (; bytes_compared<mode_resp_size_without_module_work_mode_value; bytes_compared++)
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	3301      	adds	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	7bfa      	ldrb	r2, [r7, #15]
 80094a6:	7afb      	ldrb	r3, [r7, #11]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3ec      	bcc.n	8009486 <set_hm10_module_work_mode+0xb6>
        }
    }
    if (TxRx_Buffer[bytes_compared] != module_work_mode)
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4a06      	ldr	r2, [pc, #24]	; (80094c8 <set_hm10_module_work_mode+0xf8>)
 80094b0:	5cd3      	ldrb	r3, [r2, r3]
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d001      	beq.n	80094bc <set_hm10_module_work_mode+0xec>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: A Set Mode Response from the HM-10 BT Device was expected, but something else was received instead at index %d. The received value was %c_ASCII and the expected value is %c_ASCII.\r\n", bytes_compared, TxRx_Buffer[bytes_compared], module_work_mode);
        #endif
        return HM10_EC_ERR;
 80094b8:	2304      	movs	r3, #4
 80094ba:	e000      	b.n	80094be <set_hm10_module_work_mode+0xee>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The desired Module Work Mode has been successfully set in the HM-10 BT Device.\r\n");
    #endif

    return HM10_EC_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200004e4 	.word	0x200004e4
 80094cc:	200004e0 	.word	0x200004e0
 80094d0:	20000014 	.word	0x20000014

080094d4 <disconnect_hm10_from_bt_address>:

    return HM10_EC_OK;
}

HM10_BT_Connection_Status disconnect_hm10_from_bt_address()
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
    int16_t  ret;

    /* Flush the UART's RX before starting. */
    HAL_uart_rx_flush();
 80094da:	f000 f8c1 	bl	8009660 <HAL_uart_rx_flush>

    /* Populate the HM-10 Device's Lost-Connection Command into the Tx/Rx Buffer. */
    #if ETX_OTA_VERBOSE
        printf("Sending Lost-Connection Command to HM-10 BT Device...\r\n");
    #endif
    TxRx_Buffer[0] = 'A';
 80094de:	4b3d      	ldr	r3, [pc, #244]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 80094e0:	2241      	movs	r2, #65	; 0x41
 80094e2:	701a      	strb	r2, [r3, #0]
    TxRx_Buffer[1] = 'T';
 80094e4:	4b3b      	ldr	r3, [pc, #236]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 80094e6:	2254      	movs	r2, #84	; 0x54
 80094e8:	705a      	strb	r2, [r3, #1]

    /* Send the HM-10 Device's Lost-Connection Command. */
    ret = HAL_UART_Transmit(p_huart, TxRx_Buffer, HM10_TEST_CMD_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 80094ea:	4b3b      	ldr	r3, [pc, #236]	; (80095d8 <disconnect_hm10_from_bt_address+0x104>)
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80094f2:	2202      	movs	r2, #2
 80094f4:	4937      	ldr	r1, [pc, #220]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 80094f6:	f001 ff93 	bl	800b420 <HAL_UART_Transmit>
 80094fa:	4603      	mov	r3, r0
 80094fc:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 80094fe:	88bb      	ldrh	r3, [r7, #4]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f8c6 	bl	8009694 <HAL_ret_handler>
 8009508:	4603      	mov	r3, r0
 800950a:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 800950c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <disconnect_hm10_from_bt_address+0x44>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The transmission of the Lost-Connection Command to HM-10 BT Device has failed.\r\n");
        #endif
        return HM10_BT_Connection_Status_Unknown;
 8009514:	2300      	movs	r3, #0
 8009516:	e059      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Receive the first part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, TxRx_Buffer, HM10_OK_RESPONSE_SIZE, HM10_CUSTOM_HAL_TIMEOUT);
 8009518:	4b2f      	ldr	r3, [pc, #188]	; (80095d8 <disconnect_hm10_from_bt_address+0x104>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009520:	2202      	movs	r2, #2
 8009522:	492c      	ldr	r1, [pc, #176]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 8009524:	f001 ffff 	bl	800b526 <HAL_UART_Receive>
 8009528:	4603      	mov	r3, r0
 800952a:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 800952c:	88bb      	ldrh	r3, [r7, #4]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f8af 	bl	8009694 <HAL_ret_handler>
 8009536:	4603      	mov	r3, r0
 8009538:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 800953a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <disconnect_hm10_from_bt_address+0x72>
    {
        #if ETX_OTA_VERBOSE
            printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
        #endif
        return HM10_BT_Connection_Status_Unknown;
 8009542:	2300      	movs	r3, #0
 8009544:	e042      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the first part of the HM-10 Device's Lost-Connection Response. */
    /** <b>Local variable bytes_compared:</b> Counter for the bytes that have been compared and validated to match between the received Connection-Lost Response (which should be stored in @ref TxRx_Buffer buffer ) and the expected Connection-Lost Response (i.e., @ref HM10_OK_LOST_resp ). */
    uint8_t bytes_compared = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	71fb      	strb	r3, [r7, #7]
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 800954a:	e00c      	b.n	8009566 <disconnect_hm10_from_bt_address+0x92>
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	4a21      	ldr	r2, [pc, #132]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 8009550:	5cd2      	ldrb	r2, [r2, r3]
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	4921      	ldr	r1, [pc, #132]	; (80095dc <disconnect_hm10_from_bt_address+0x108>)
 8009556:	5ccb      	ldrb	r3, [r1, r3]
 8009558:	429a      	cmp	r2, r3
 800955a:	d001      	beq.n	8009560 <disconnect_hm10_from_bt_address+0x8c>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The first part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 800955c:	2300      	movs	r3, #0
 800955e:	e035      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_RESPONSE_SIZE; bytes_compared++)
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	3301      	adds	r3, #1
 8009564:	71fb      	strb	r3, [r7, #7]
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d9ef      	bls.n	800954c <disconnect_hm10_from_bt_address+0x78>
        }
    }

    /* Receive the second part of the HM-10 Device's Lost-Connection Response. */
    ret = HAL_UART_Receive(p_huart, &TxRx_Buffer[bytes_compared], HM10_OK_LOST_RESPONSE_SIZE_WITHOUT_THE_OK_PART, HM10_CUSTOM_HAL_TIMEOUT);
 800956c:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <disconnect_hm10_from_bt_address+0x104>)
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	4a18      	ldr	r2, [pc, #96]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 8009574:	1899      	adds	r1, r3, r2
 8009576:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800957a:	2205      	movs	r2, #5
 800957c:	f001 ffd3 	bl	800b526 <HAL_UART_Receive>
 8009580:	4603      	mov	r3, r0
 8009582:	80bb      	strh	r3, [r7, #4]
    ret = HAL_ret_handler(ret);
 8009584:	88bb      	ldrh	r3, [r7, #4]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f883 	bl	8009694 <HAL_ret_handler>
 800958e:	4603      	mov	r3, r0
 8009590:	80bb      	strh	r3, [r7, #4]
    if (ret != HAL_OK)
 8009592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d014      	beq.n	80095c4 <disconnect_hm10_from_bt_address+0xf0>
    {
        if (ret == HM10_EC_NR)
 800959a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d101      	bne.n	80095a6 <disconnect_hm10_from_bt_address+0xd2>
        {
            #if ETX_OTA_VERBOSE
                printf("WARNING: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but none was received (HM-10 Exception code = %d)\r\n", ret);
            #endif
            return HM10_BT_No_Connection;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e012      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
            else
            {
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something went wrong when our MCU/MPU was waiting to receive the data (HM-10 Exception code = %d)\r\n", ret);
            }
        #endif
        return HM10_BT_Connection_Status_Unknown;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e010      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
    }

    /* Validate the second part of the HM-10 Device's Lost-Connection Response. */
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
    {
        if (TxRx_Buffer[bytes_compared] != HM10_OK_LOST_resp[bytes_compared])
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <disconnect_hm10_from_bt_address+0x100>)
 80095ae:	5cd2      	ldrb	r2, [r2, r3]
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	490a      	ldr	r1, [pc, #40]	; (80095dc <disconnect_hm10_from_bt_address+0x108>)
 80095b4:	5ccb      	ldrb	r3, [r1, r3]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d001      	beq.n	80095be <disconnect_hm10_from_bt_address+0xea>
        {
            #if ETX_OTA_VERBOSE
                printf("ERROR: The second part of the Lost-Connection Response from the HM-10 BT Device was expected, but something else was received instead.\r\n");
            #endif
            return HM10_BT_Connection_Status_Unknown;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e006      	b.n	80095cc <disconnect_hm10_from_bt_address+0xf8>
    for ( ; bytes_compared<HM10_OK_LOST_RESPONSE_SIZE; bytes_compared++)
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	3301      	adds	r3, #1
 80095c2:	71fb      	strb	r3, [r7, #7]
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b06      	cmp	r3, #6
 80095c8:	d9ef      	bls.n	80095aa <disconnect_hm10_from_bt_address+0xd6>
    }
    #if ETX_OTA_VERBOSE
        printf("DONE: The HM-10 Device has been disconnected from an on-going Bluetooth Connection.\r\n");
    #endif

    return HM10_BT_Connection_Lost;
 80095ca:	2302      	movs	r3, #2
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200004e4 	.word	0x200004e4
 80095d8:	200004e0 	.word	0x200004e0
 80095dc:	20000028 	.word	0x20000028

080095e0 <send_hm10_ota_data>:

HM10_Status send_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	460b      	mov	r3, r1
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Send the requested data Over the Air (OTA) via the HM-10 BT Device. */
	ret = HAL_UART_Transmit(p_huart, ble_ota_data, size, timeout);
 80095ee:	4b0b      	ldr	r3, [pc, #44]	; (800961c <send_hm10_ota_data+0x3c>)
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	897a      	ldrh	r2, [r7, #10]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	f001 ff12 	bl	800b420 <HAL_UART_Transmit>
 80095fc:	4603      	mov	r3, r0
 80095fe:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 8009600:	8afb      	ldrh	r3, [r7, #22]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f845 	bl	8009694 <HAL_ret_handler>
 800960a:	4603      	mov	r3, r0
 800960c:	82fb      	strh	r3, [r7, #22]

	return ret;
 800960e:	8afb      	ldrh	r3, [r7, #22]
 8009610:	b2db      	uxtb	r3, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200004e0 	.word	0x200004e0

08009620 <get_hm10_ota_data>:

HM10_Status get_hm10_ota_data(uint8_t *ble_ota_data, uint16_t size, uint32_t timeout)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	460b      	mov	r3, r1
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	817b      	strh	r3, [r7, #10]
	/** <b>Local variable ret:</b> Return value of either a HAL function or a @ref HM10_Status function type. */
	int16_t  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, ble_ota_data, size, timeout);
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <get_hm10_ota_data+0x3c>)
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	897a      	ldrh	r2, [r7, #10]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	f001 ff75 	bl	800b526 <HAL_UART_Receive>
 800963c:	4603      	mov	r3, r0
 800963e:	82fb      	strh	r3, [r7, #22]
	ret = HAL_ret_handler(ret);
 8009640:	8afb      	ldrh	r3, [r7, #22]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f825 	bl	8009694 <HAL_ret_handler>
 800964a:	4603      	mov	r3, r0
 800964c:	82fb      	strh	r3, [r7, #22]

	return ret;
 800964e:	8afb      	ldrh	r3, [r7, #22]
 8009650:	b2db      	uxtb	r3, r3
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	200004e0 	.word	0x200004e0

08009660 <HAL_uart_rx_flush>:

static void HAL_uart_rx_flush()
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
	/** <b>Local variable ret:</b> Return value of either a HAL function type. */
	HAL_StatusTypeDef  ret;

	/* Receive the HM-10 Device's BT data that is received Over the Air (OTA), if there is any. */
	ret = HAL_UART_Receive(p_huart, TxRx_Buffer, 1, HM10_CUSTOM_HAL_TIMEOUT);
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <HAL_uart_rx_flush+0x2c>)
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800966e:	2201      	movs	r2, #1
 8009670:	4907      	ldr	r1, [pc, #28]	; (8009690 <HAL_uart_rx_flush+0x30>)
 8009672:	f001 ff58 	bl	800b526 <HAL_UART_Receive>
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_TIMEOUT)
 800967a:	79fb      	ldrb	r3, [r7, #7]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d001      	beq.n	8009684 <HAL_uart_rx_flush+0x24>
	{
		HAL_uart_rx_flush();
 8009680:	f7ff ffee 	bl	8009660 <HAL_uart_rx_flush>
	}
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	200004e0 	.word	0x200004e0
 8009690:	200004e4 	.word	0x200004e4

08009694 <HAL_ret_handler>:

static HM10_Status HAL_ret_handler(HAL_StatusTypeDef HAL_status)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	71fb      	strb	r3, [r7, #7]
  switch (HAL_status)
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d006      	beq.n	80096b2 <HAL_ret_handler+0x1e>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd06      	ble.n	80096b6 <HAL_ret_handler+0x22>
 80096a8:	3b02      	subs	r3, #2
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d803      	bhi.n	80096b6 <HAL_ret_handler+0x22>
    {
  	  case HAL_BUSY:
	  case HAL_TIMEOUT:
		return HM10_EC_NR;
 80096ae:	2302      	movs	r3, #2
 80096b0:	e002      	b.n	80096b8 <HAL_ret_handler+0x24>
	  case HAL_ERROR:
		return HM10_EC_ERR;
 80096b2:	2304      	movs	r3, #4
 80096b4:	e000      	b.n	80096b8 <HAL_ret_handler+0x24>
	  default:
		return HAL_status;
 80096b6:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc80      	pop	{r7}
 80096c0:	4770      	bx	lr
	...

080096c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80096c8:	f000 fcc2 	bl	800a050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80096cc:	f000 f81c 	bl	8009708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80096d0:	f000 f8d2 	bl	8009878 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80096d4:	f000 f852 	bl	800977c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80096d8:	f000 f87a 	bl	80097d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80096dc:	f000 f8a2 	bl	8009824 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    /* Send a message from the Application showing the current Application version there. */
  	printf("Starting Application v%d.%d\r\n", APP_version[0], APP_version[1]);
 80096e0:	2300      	movs	r3, #0
 80096e2:	2204      	movs	r2, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4806      	ldr	r0, [pc, #24]	; (8009700 <main+0x3c>)
 80096e8:	f002 fe04 	bl	800c2f4 <iprintf>

    /* We initialize the Firmware Update Configurations sub-module and the ETX OTA Firmware Update module, and also validate the currently installed Application Firmware in our MCU/MPU. */
    // NOTE: These initializations must be made in that order. After those, you may call the initialization functions of your actual application.
    custom_firmware_update_config_init();
 80096ec:	f000 f93a 	bl	8009964 <custom_firmware_update_config_init>
    custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol_BT, &huart3);
 80096f0:	4904      	ldr	r1, [pc, #16]	; (8009704 <main+0x40>)
 80096f2:	2001      	movs	r0, #1
 80096f4:	f000 f982 	bl	80099fc <custom_init_etx_ota_protocol_module>
    validate_application_firmware();
 80096f8:	f000 f9ba 	bl	8009a70 <validate_application_firmware>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80096fc:	e7fe      	b.n	80096fc <main+0x38>
 80096fe:	bf00      	nop
 8009700:	0800d0e8 	.word	0x0800d0e8
 8009704:	20000588 	.word	0x20000588

08009708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b090      	sub	sp, #64	; 0x40
 800970c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800970e:	f107 0318 	add.w	r3, r7, #24
 8009712:	2228      	movs	r2, #40	; 0x28
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f002 ff32 	bl	800c580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	605a      	str	r2, [r3, #4]
 8009724:	609a      	str	r2, [r3, #8]
 8009726:	60da      	str	r2, [r3, #12]
 8009728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800972a:	2301      	movs	r3, #1
 800972c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800972e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009734:	2300      	movs	r3, #0
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009738:	f107 0318 	add.w	r3, r7, #24
 800973c:	4618      	mov	r0, r3
 800973e:	f001 fa0f 	bl	800ab60 <HAL_RCC_OscConfig>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8009748:	f000 fa7a 	bl	8009c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800974c:	230f      	movs	r3, #15
 800974e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009750:	2301      	movs	r3, #1
 8009752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8009754:	2390      	movs	r3, #144	; 0x90
 8009756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009758:	2300      	movs	r3, #0
 800975a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	2100      	movs	r1, #0
 8009764:	4618      	mov	r0, r3
 8009766:	f001 fc7d 	bl	800b064 <HAL_RCC_ClockConfig>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8009770:	f000 fa66 	bl	8009c40 <Error_Handler>
  }
}
 8009774:	bf00      	nop
 8009776:	3740      	adds	r7, #64	; 0x40
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009780:	4b11      	ldr	r3, [pc, #68]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 8009782:	4a12      	ldr	r2, [pc, #72]	; (80097cc <MX_USART1_UART_Init+0x50>)
 8009784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009786:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 8009788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800978c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800978e:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 8009790:	2200      	movs	r2, #0
 8009792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 8009796:	2200      	movs	r2, #0
 8009798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 800979c:	2200      	movs	r2, #0
 800979e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80097a0:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 80097a2:	220c      	movs	r2, #12
 80097a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097a6:	4b08      	ldr	r3, [pc, #32]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80097b2:	4805      	ldr	r0, [pc, #20]	; (80097c8 <MX_USART1_UART_Init+0x4c>)
 80097b4:	f001 fde4 	bl	800b380 <HAL_UART_Init>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80097be:	f000 fa3f 	bl	8009c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80097c2:	bf00      	nop
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200004f8 	.word	0x200004f8
 80097cc:	40013800 	.word	0x40013800

080097d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097d6:	4a12      	ldr	r2, [pc, #72]	; (8009820 <MX_USART2_UART_Init+0x50>)
 80097d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80097e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80097e2:	4b0e      	ldr	r3, [pc, #56]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80097ee:	4b0b      	ldr	r3, [pc, #44]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097f6:	220c      	movs	r2, #12
 80097f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097fa:	4b08      	ldr	r3, [pc, #32]	; (800981c <MX_USART2_UART_Init+0x4c>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <MX_USART2_UART_Init+0x4c>)
 8009802:	2200      	movs	r2, #0
 8009804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009806:	4805      	ldr	r0, [pc, #20]	; (800981c <MX_USART2_UART_Init+0x4c>)
 8009808:	f001 fdba 	bl	800b380 <HAL_UART_Init>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009812:	f000 fa15 	bl	8009c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009816:	bf00      	nop
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000540 	.word	0x20000540
 8009820:	40004400 	.word	0x40004400

08009824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009828:	4b11      	ldr	r3, [pc, #68]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 800982a:	4a12      	ldr	r2, [pc, #72]	; (8009874 <MX_USART3_UART_Init+0x50>)
 800982c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800982e:	4b10      	ldr	r3, [pc, #64]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 8009830:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009836:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 8009838:	2200      	movs	r2, #0
 800983a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800983c:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 800983e:	2200      	movs	r2, #0
 8009840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009842:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 8009844:	2200      	movs	r2, #0
 8009846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009848:	4b09      	ldr	r3, [pc, #36]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 800984a:	220c      	movs	r2, #12
 800984c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800984e:	4b08      	ldr	r3, [pc, #32]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 8009850:	2200      	movs	r2, #0
 8009852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 8009856:	2200      	movs	r2, #0
 8009858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800985a:	4805      	ldr	r0, [pc, #20]	; (8009870 <MX_USART3_UART_Init+0x4c>)
 800985c:	f001 fd90 	bl	800b380 <HAL_UART_Init>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009866:	f000 f9eb 	bl	8009c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800986a:	bf00      	nop
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000588 	.word	0x20000588
 8009874:	40004800 	.word	0x40004800

08009878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	605a      	str	r2, [r3, #4]
 8009888:	609a      	str	r2, [r3, #8]
 800988a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800988c:	4b2a      	ldr	r3, [pc, #168]	; (8009938 <MX_GPIO_Init+0xc0>)
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4a29      	ldr	r2, [pc, #164]	; (8009938 <MX_GPIO_Init+0xc0>)
 8009892:	f043 0310 	orr.w	r3, r3, #16
 8009896:	6193      	str	r3, [r2, #24]
 8009898:	4b27      	ldr	r3, [pc, #156]	; (8009938 <MX_GPIO_Init+0xc0>)
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	4a23      	ldr	r2, [pc, #140]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098aa:	f043 0320 	orr.w	r3, r3, #32
 80098ae:	6193      	str	r3, [r2, #24]
 80098b0:	4b21      	ldr	r3, [pc, #132]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	60bb      	str	r3, [r7, #8]
 80098ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	4a1d      	ldr	r2, [pc, #116]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098c2:	f043 0304 	orr.w	r3, r3, #4
 80098c6:	6193      	str	r3, [r2, #24]
 80098c8:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80098d4:	4b18      	ldr	r3, [pc, #96]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	4a17      	ldr	r2, [pc, #92]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098da:	f043 0308 	orr.w	r3, r3, #8
 80098de:	6193      	str	r3, [r2, #24]
 80098e0:	4b15      	ldr	r3, [pc, #84]	; (8009938 <MX_GPIO_Init+0xc0>)
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	603b      	str	r3, [r7, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80098ec:	2201      	movs	r2, #1
 80098ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098f2:	4812      	ldr	r0, [pc, #72]	; (800993c <MX_GPIO_Init+0xc4>)
 80098f4:	f001 f91b 	bl	800ab2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80098f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098fe:	2301      	movs	r3, #1
 8009900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009902:	2300      	movs	r3, #0
 8009904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009906:	2302      	movs	r3, #2
 8009908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800990a:	f107 0310 	add.w	r3, r7, #16
 800990e:	4619      	mov	r1, r3
 8009910:	480a      	ldr	r0, [pc, #40]	; (800993c <MX_GPIO_Init+0xc4>)
 8009912:	f000 ff71 	bl	800a7f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800991a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009920:	2302      	movs	r3, #2
 8009922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009924:	f107 0310 	add.w	r3, r7, #16
 8009928:	4619      	mov	r1, r3
 800992a:	4804      	ldr	r0, [pc, #16]	; (800993c <MX_GPIO_Init+0xc4>)
 800992c:	f000 ff64 	bl	800a7f8 <HAL_GPIO_Init>

}
 8009930:	bf00      	nop
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40021000 	.word	0x40021000
 800993c:	40011000 	.word	0x40011000

08009940 <__io_putchar>:
/* With GCC, small printf (option LD Linker->Libraries->Small printf set to 'Yes') calls __io_putchar(). */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here. */
	/* NOTE: The characters written into the UART1 Protocol will be looped until the end of transmission. */
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8009948:	1d39      	adds	r1, r7, #4
 800994a:	f04f 33ff 	mov.w	r3, #4294967295
 800994e:	2201      	movs	r2, #1
 8009950:	4803      	ldr	r0, [pc, #12]	; (8009960 <__io_putchar+0x20>)
 8009952:	f001 fd65 	bl	800b420 <HAL_UART_Transmit>
	return ch;
 8009956:	687b      	ldr	r3, [r7, #4]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	200004f8 	.word	0x200004f8

08009964 <custom_firmware_update_config_init>:

static void custom_firmware_update_config_init()
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
    /** <b>Local variable ret:</b> Return value of a @ref FirmUpdConf_Status function type. */
    int16_t ret;
    /** <b>Local variable attempts:</b> Counter for the number of attempts to initialize the Firmware Update Configurations sub-module. */
    uint8_t attempts = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
    /** <b>Local variable end_tick:</b> Defines the HAL Tick that our MCU/MPU needs to reach so that 0.5 seconds have passed with respect to each attempt to initialize the @ref firmware_update_config . */
    uint32_t end_tick;
    /** <b>Local variable current_tick:</b> Current HAL Tick in our MCU/MPU. */
    uint32_t current_tick;

    printf("Initializing the Firmware Update Configurations sub-module...\r\n");
 800996e:	481d      	ldr	r0, [pc, #116]	; (80099e4 <custom_firmware_update_config_init+0x80>)
 8009970:	f002 fd26 	bl	800c3c0 <puts>
    do
    {
        /* Delay of 500 milliseconds. */
        end_tick = HAL_GetTick() + 500;
 8009974:	f000 fbc4 	bl	800a100 <HAL_GetTick>
 8009978:	4603      	mov	r3, r0
 800997a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800997e:	607b      	str	r3, [r7, #4]
        current_tick = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	60bb      	str	r3, [r7, #8]
        while (current_tick < end_tick)
 8009984:	e002      	b.n	800998c <custom_firmware_update_config_init+0x28>
        {
            current_tick = HAL_GetTick();
 8009986:	f000 fbbb 	bl	800a100 <HAL_GetTick>
 800998a:	60b8      	str	r0, [r7, #8]
        while (current_tick < end_tick)
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d3f8      	bcc.n	8009986 <custom_firmware_update_config_init+0x22>
        }

        /* We attempt to initialize the Firmware Update Configurations sub-module. */
        ret = firmware_update_configurations_init();
 8009994:	f7ff f86e 	bl	8008a74 <firmware_update_configurations_init>
 8009998:	4603      	mov	r3, r0
 800999a:	807b      	strh	r3, [r7, #2]
        attempts++;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	3301      	adds	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
        if (ret == FIRM_UPDT_CONF_EC_OK)
 80099a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <custom_firmware_update_config_init+0x54>
        {
            /* We read the latest data that has been written into the Firmware Update Configurations sub-module. */
            firmware_update_configurations_read(&fw_config);
 80099aa:	480f      	ldr	r0, [pc, #60]	; (80099e8 <custom_firmware_update_config_init+0x84>)
 80099ac:	f7ff f8bc 	bl	8008b28 <firmware_update_configurations_read>
            printf("DONE: Firmware Update Configurations sub-module has been successfully initialized.\r\n");
 80099b0:	480e      	ldr	r0, [pc, #56]	; (80099ec <custom_firmware_update_config_init+0x88>)
 80099b2:	f002 fd05 	bl	800c3c0 <puts>

            return;
 80099b6:	e011      	b.n	80099dc <custom_firmware_update_config_init+0x78>
        }
        printf("WARNING: The Firmware Update Configurations sub-module could not be initialized at attempt %d...\r\n", attempts);
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4619      	mov	r1, r3
 80099bc:	480c      	ldr	r0, [pc, #48]	; (80099f0 <custom_firmware_update_config_init+0x8c>)
 80099be:	f002 fc99 	bl	800c2f4 <iprintf>
    }
    while(attempts < 3);
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d9d5      	bls.n	8009974 <custom_firmware_update_config_init+0x10>

    printf("ERROR: The Firmware Update Configurations sub-module could not be initialized. Our MCU/MPU will halt!.\r\n");
 80099c8:	480a      	ldr	r0, [pc, #40]	; (80099f4 <custom_firmware_update_config_init+0x90>)
 80099ca:	f002 fcf9 	bl	800c3c0 <puts>
    HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 80099ce:	2200      	movs	r2, #0
 80099d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099d4:	4808      	ldr	r0, [pc, #32]	; (80099f8 <custom_firmware_update_config_init+0x94>)
 80099d6:	f001 f8aa 	bl	800ab2e <HAL_GPIO_WritePin>
    while (1);
 80099da:	e7fe      	b.n	80099da <custom_firmware_update_config_init+0x76>
}
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	0800d108 	.word	0x0800d108
 80099e8:	200005d0 	.word	0x200005d0
 80099ec:	0800d148 	.word	0x0800d148
 80099f0:	0800d19c 	.word	0x0800d19c
 80099f4:	0800d200 	.word	0x0800d200
 80099f8:	40011000 	.word	0x40011000

080099fc <custom_init_etx_ota_protocol_module>:

static void custom_init_etx_ota_protocol_module(ETX_OTA_hw_Protocol hw_protocol, UART_HandleTypeDef *p_huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	4603      	mov	r3, r0
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	71fb      	strb	r3, [r7, #7]
    /** <b>Local variable ret:</b> Used to hold the exception code value returned by a @ref ETX_OTA_Status function type. */
    ETX_OTA_Status ret;

    printf("Initializing the ETX OTA Firmware Update Module.\r\n");
 8009a08:	4813      	ldr	r0, [pc, #76]	; (8009a58 <custom_init_etx_ota_protocol_module+0x5c>)
 8009a0a:	f002 fcd9 	bl	800c3c0 <puts>
    /** <b>Local variable GPIO_is_hm10_default_settings:</b> Used to hold the GPIO pin parameters of the Input Mode GPIO Pin to be used so that our MCU can know whether the user wants it to set the default configuration settings in the HM-10 BT Device or not. */
    HM10_GPIO_def_t GPIO_is_hm10_default_settings;
    GPIO_is_hm10_default_settings.GPIO_Port = GPIO_is_hm10_default_settings_Port;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <custom_init_etx_ota_protocol_module+0x60>)
 8009a10:	60bb      	str	r3, [r7, #8]
    GPIO_is_hm10_default_settings.GPIO_Pin = GPIO_is_hm10_default_settings_Pin;
 8009a12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a16:	81bb      	strh	r3, [r7, #12]

    ret = init_firmware_update_module(hw_protocol, p_huart, &fw_config, &GPIO_is_hm10_default_settings, &etx_ota_custom_data);
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	79f8      	ldrb	r0, [r7, #7]
 8009a1e:	4a10      	ldr	r2, [pc, #64]	; (8009a60 <custom_init_etx_ota_protocol_module+0x64>)
 8009a20:	9200      	str	r2, [sp, #0]
 8009a22:	4a10      	ldr	r2, [pc, #64]	; (8009a64 <custom_init_etx_ota_protocol_module+0x68>)
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	f7fe fb91 	bl	800814c <init_firmware_update_module>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
    if (ret != ETX_OTA_EC_OK)
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <custom_init_etx_ota_protocol_module+0x4c>
    {
    	printf("ERROR: The ETX OTA Firmware Update Module could not be initialized. Our MCU/MPU will halt!.\r\n");
 8009a34:	480c      	ldr	r0, [pc, #48]	; (8009a68 <custom_init_etx_ota_protocol_module+0x6c>)
 8009a36:	f002 fcc3 	bl	800c3c0 <puts>
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a40:	4806      	ldr	r0, [pc, #24]	; (8009a5c <custom_init_etx_ota_protocol_module+0x60>)
 8009a42:	f001 f874 	bl	800ab2e <HAL_GPIO_WritePin>
        while (1);
 8009a46:	e7fe      	b.n	8009a46 <custom_init_etx_ota_protocol_module+0x4a>
    }
    printf("DONE: The ETX OTA Firmware Update Module has been successfully initialized.\r\n");
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <custom_init_etx_ota_protocol_module+0x70>)
 8009a4a:	f002 fcb9 	bl	800c3c0 <puts>
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	0800d268 	.word	0x0800d268
 8009a5c:	40011000 	.word	0x40011000
 8009a60:	200005e8 	.word	0x200005e8
 8009a64:	200005d0 	.word	0x200005d0
 8009a68:	0800d29c 	.word	0x0800d29c
 8009a6c:	0800d2fc 	.word	0x0800d2fc

08009a70 <validate_application_firmware>:

static void validate_application_firmware()
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
	printf("Validating currently installed Application Firmware in our MCU/MPU...\r\n");
 8009a76:	4823      	ldr	r0, [pc, #140]	; (8009b04 <validate_application_firmware+0x94>)
 8009a78:	f002 fca2 	bl	800c3c0 <puts>
    if ((fw_config.App_fw_size==DATA_BLOCK_32BIT_ERASED_VALUE) || (fw_config.App_fw_size==0x00000000))
 8009a7c:	4b22      	ldr	r3, [pc, #136]	; (8009b08 <validate_application_firmware+0x98>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a84:	d003      	beq.n	8009a8e <validate_application_firmware+0x1e>
 8009a86:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <validate_application_firmware+0x98>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <validate_application_firmware+0x32>
	{
    	printf("ERROR: No Application Firmware has been identified to be installed in our MCU/MPU.\r\n");
 8009a8e:	481f      	ldr	r0, [pc, #124]	; (8009b0c <validate_application_firmware+0x9c>)
 8009a90:	f002 fc96 	bl	800c3c0 <puts>
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8009a94:	2200      	movs	r2, #0
 8009a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a9a:	481d      	ldr	r0, [pc, #116]	; (8009b10 <validate_application_firmware+0xa0>)
 8009a9c:	f001 f847 	bl	800ab2e <HAL_GPIO_WritePin>
        while (1);
 8009aa0:	e7fe      	b.n	8009aa0 <validate_application_firmware+0x30>
	}

    if (fw_config.App_fw_rec_crc == DATA_BLOCK_32BIT_ERASED_VALUE)
 8009aa2:	4b19      	ldr	r3, [pc, #100]	; (8009b08 <validate_application_firmware+0x98>)
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d109      	bne.n	8009ac0 <validate_application_firmware+0x50>
    {
    	printf("ERROR: The recorded 32-bit CRC of the installed Application Firmware has no value in it.\r\n");
 8009aac:	4819      	ldr	r0, [pc, #100]	; (8009b14 <validate_application_firmware+0xa4>)
 8009aae:	f002 fc87 	bl	800c3c0 <puts>
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ab8:	4815      	ldr	r0, [pc, #84]	; (8009b10 <validate_application_firmware+0xa0>)
 8009aba:	f001 f838 	bl	800ab2e <HAL_GPIO_WritePin>
        while (1);
 8009abe:	e7fe      	b.n	8009abe <validate_application_firmware+0x4e>
    }

    /** <b>Local variable cal_crc:</b> Value holder for the calculated 32-bit CRC of our MCU/MPU's current Application Firmware. */
	uint32_t cal_crc = crc32_mpeg2((uint8_t *) APLICATION_FIRMWARE_ADDRESS, fw_config.App_fw_size);
 8009ac0:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <validate_application_firmware+0x98>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4814      	ldr	r0, [pc, #80]	; (8009b18 <validate_application_firmware+0xa8>)
 8009ac8:	f7fe ffa2 	bl	8008a10 <crc32_mpeg2>
 8009acc:	6078      	str	r0, [r7, #4]

    if (cal_crc != fw_config.App_fw_rec_crc)
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <validate_application_firmware+0x98>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d00d      	beq.n	8009af4 <validate_application_firmware+0x84>
    {
    	printf("ERROR: The recorded 32-bit CRC of the installed Application Firmware Image mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
    			(unsigned int) cal_crc, (unsigned int) fw_config.App_fw_rec_crc);
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <validate_application_firmware+0x98>)
 8009ada:	68db      	ldr	r3, [r3, #12]
    	printf("ERROR: The recorded 32-bit CRC of the installed Application Firmware Image mismatches with the calculated one: [Calculated CRC = 0x%08X] [Recorded CRC = 0x%08X]\r\n",
 8009adc:	461a      	mov	r2, r3
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	480e      	ldr	r0, [pc, #56]	; (8009b1c <validate_application_firmware+0xac>)
 8009ae2:	f002 fc07 	bl	800c2f4 <iprintf>
        HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009aec:	4808      	ldr	r0, [pc, #32]	; (8009b10 <validate_application_firmware+0xa0>)
 8009aee:	f001 f81e 	bl	800ab2e <HAL_GPIO_WritePin>
        while (1);
 8009af2:	e7fe      	b.n	8009af2 <validate_application_firmware+0x82>
    }
    printf("DONE: The currently installed Application Firmware in our MCU/MPU has been successfully validated.\r\n");
 8009af4:	480a      	ldr	r0, [pc, #40]	; (8009b20 <validate_application_firmware+0xb0>)
 8009af6:	f002 fc63 	bl	800c3c0 <puts>
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	0800d34c 	.word	0x0800d34c
 8009b08:	200005d0 	.word	0x200005d0
 8009b0c:	0800d394 	.word	0x0800d394
 8009b10:	40011000 	.word	0x40011000
 8009b14:	0800d3e8 	.word	0x0800d3e8
 8009b18:	08008000 	.word	0x08008000
 8009b1c:	0800d444 	.word	0x0800d444
 8009b20:	0800d4e8 	.word	0x0800d4e8

08009b24 <etx_ota_pre_transaction_handler>:

void etx_ota_pre_transaction_handler()
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
	// NOTE: The code contained is this function is what you should substitute with whatever you wish to do or to stop doing before an ETX OTA Transaction gives place.
	printf("An ETX OTA Transaction is about to give place.\r\n");
 8009b28:	4803      	ldr	r0, [pc, #12]	; (8009b38 <etx_ota_pre_transaction_handler+0x14>)
 8009b2a:	f002 fc49 	bl	800c3c0 <puts>
	printf("Finishing or stopping a certain task before proceeding with the ETX OTA Transaction...\r\n");
 8009b2e:	4803      	ldr	r0, [pc, #12]	; (8009b3c <etx_ota_pre_transaction_handler+0x18>)
 8009b30:	f002 fc46 	bl	800c3c0 <puts>
}
 8009b34:	bf00      	nop
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	0800d54c 	.word	0x0800d54c
 8009b3c:	0800d57c 	.word	0x0800d57c

08009b40 <etx_ota_status_resp_handler>:

void etx_ota_status_resp_handler(ETX_OTA_Status resp)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
    switch (resp)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d84e      	bhi.n	8009bee <etx_ota_status_resp_handler+0xae>
 8009b50:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <etx_ota_status_resp_handler+0x18>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009b6d 	.word	0x08009b6d
 8009b5c:	08009bc5 	.word	0x08009bc5
 8009b60:	08009c07 	.word	0x08009c07
 8009b64:	08009bd1 	.word	0x08009bd1
 8009b68:	08009be3 	.word	0x08009be3
    {
        case ETX_OTA_EC_OK:
        	// NOTE: The whole code of this case is what you should substitute with whatever you wish to do with the received ETX OTA Custom Data.
        	printf("DONE: An ETX OTA Transaction has been successfully completed.\r\n");
 8009b6c:	4829      	ldr	r0, [pc, #164]	; (8009c14 <etx_ota_status_resp_handler+0xd4>)
 8009b6e:	f002 fc27 	bl	800c3c0 <puts>
        	printf("Showing the ETX OTA Custom Data that was received: [\r\n");
 8009b72:	4829      	ldr	r0, [pc, #164]	; (8009c18 <etx_ota_status_resp_handler+0xd8>)
 8009b74:	f002 fc24 	bl	800c3c0 <puts>
        	for (int i=0; i<etx_ota_custom_data.size-1; i++)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e00b      	b.n	8009b96 <etx_ota_status_resp_handler+0x56>
        	{
        		printf("%d, ", etx_ota_custom_data.data[i]);
 8009b7e:	4a27      	ldr	r2, [pc, #156]	; (8009c1c <etx_ota_status_resp_handler+0xdc>)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	3308      	adds	r3, #8
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4825      	ldr	r0, [pc, #148]	; (8009c20 <etx_ota_status_resp_handler+0xe0>)
 8009b8c:	f002 fbb2 	bl	800c2f4 <iprintf>
        	for (int i=0; i<etx_ota_custom_data.size-1; i++)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3301      	adds	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	4b21      	ldr	r3, [pc, #132]	; (8009c1c <etx_ota_status_resp_handler+0xdc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	1e5a      	subs	r2, r3, #1
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d8ed      	bhi.n	8009b7e <etx_ota_status_resp_handler+0x3e>
        	}
        	printf("%d]\r\n", etx_ota_custom_data.data[etx_ota_custom_data.size-1]);
 8009ba2:	4b1e      	ldr	r3, [pc, #120]	; (8009c1c <etx_ota_status_resp_handler+0xdc>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <etx_ota_status_resp_handler+0xdc>)
 8009baa:	4413      	add	r3, r2
 8009bac:	7a1b      	ldrb	r3, [r3, #8]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	481c      	ldr	r0, [pc, #112]	; (8009c24 <etx_ota_status_resp_handler+0xe4>)
 8009bb2:	f002 fb9f 	bl	800c2f4 <iprintf>
        	// NOTE: The following if-code that stops ETX OTA Transactions is just to display an example on a possible way to use/call the @ref stop_etx_ota function, but must not be taken as something that must always be made whenever using this ETX OTA Protocol library.
        	if (etx_ota_custom_data.data[0] == 0xFF)
 8009bb6:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <etx_ota_status_resp_handler+0xdc>)
 8009bb8:	7a1b      	ldrb	r3, [r3, #8]
 8009bba:	2bff      	cmp	r3, #255	; 0xff
 8009bbc:	d125      	bne.n	8009c0a <etx_ota_status_resp_handler+0xca>
        	{
        		stop_etx_ota();
 8009bbe:	f7fe fb87 	bl	80082d0 <stop_etx_ota>
        	}
	    	break;
 8009bc2:	e022      	b.n	8009c0a <etx_ota_status_resp_handler+0xca>
        case ETX_OTA_EC_STOP:
        	printf("DONE: ETX OTA process has been aborted. Try again...\r\n");
 8009bc4:	4818      	ldr	r0, [pc, #96]	; (8009c28 <etx_ota_status_resp_handler+0xe8>)
 8009bc6:	f002 fbfb 	bl	800c3c0 <puts>
			start_etx_ota();
 8009bca:	f7fe fb6d 	bl	80082a8 <start_etx_ota>
	    	break;
 8009bce:	e01d      	b.n	8009c0c <etx_ota_status_resp_handler+0xcc>
        case ETX_OTA_EC_NR:
            // No response was received from host. Therefore, try hearing for a response from the host again in case our MCU/MPU is still in DFU mode.
            break;
        case ETX_OTA_EC_NA:
        	printf("WARNING: A Firmware Image Update has been request.\r\n");
 8009bd0:	4816      	ldr	r0, [pc, #88]	; (8009c2c <etx_ota_status_resp_handler+0xec>)
 8009bd2:	f002 fbf5 	bl	800c3c0 <puts>
        	printf("Resetting our MCU/MPU to jump into its Bootloader Firmware to receive the desired Firmware Image there and then try again...\r\n");
 8009bd6:	4816      	ldr	r0, [pc, #88]	; (8009c30 <etx_ota_status_resp_handler+0xf0>)
 8009bd8:	f002 fbf2 	bl	800c3c0 <puts>
			HAL_NVIC_SystemReset(); // We reset our MCU/MPU to try installing a Firmware Image there.
 8009bdc:	f000 fbd5 	bl	800a38a <HAL_NVIC_SystemReset>
	    	break;
 8009be0:	e014      	b.n	8009c0c <etx_ota_status_resp_handler+0xcc>
        case ETX_OTA_EC_ERR:
        	printf("ERROR: ETX OTA process has failed. Try again...\r\n");
 8009be2:	4814      	ldr	r0, [pc, #80]	; (8009c34 <etx_ota_status_resp_handler+0xf4>)
 8009be4:	f002 fbec 	bl	800c3c0 <puts>
        	start_etx_ota();
 8009be8:	f7fe fb5e 	bl	80082a8 <start_etx_ota>
	    	break;
 8009bec:	e00e      	b.n	8009c0c <etx_ota_status_resp_handler+0xcc>
        default:
        	/* This should never be called. */
        	printf("ERROR: Exception Code received %d is not recognized. Our MCU/MPU will halt!.\r\n", resp);
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4811      	ldr	r0, [pc, #68]	; (8009c38 <etx_ota_status_resp_handler+0xf8>)
 8009bf4:	f002 fb7e 	bl	800c2f4 <iprintf>
			HAL_GPIO_WritePin(GPIOC, GPIO_MCU_LED1_Pin, GPIO_PIN_RESET);
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bfe:	480f      	ldr	r0, [pc, #60]	; (8009c3c <etx_ota_status_resp_handler+0xfc>)
 8009c00:	f000 ff95 	bl	800ab2e <HAL_GPIO_WritePin>
	    	while (1);
 8009c04:	e7fe      	b.n	8009c04 <etx_ota_status_resp_handler+0xc4>
            break;
 8009c06:	bf00      	nop
 8009c08:	e000      	b.n	8009c0c <etx_ota_status_resp_handler+0xcc>
	    	break;
 8009c0a:	bf00      	nop
    }
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	0800d5d4 	.word	0x0800d5d4
 8009c18:	0800d614 	.word	0x0800d614
 8009c1c:	200005e8 	.word	0x200005e8
 8009c20:	0800d64c 	.word	0x0800d64c
 8009c24:	0800d654 	.word	0x0800d654
 8009c28:	0800d65c 	.word	0x0800d65c
 8009c2c:	0800d694 	.word	0x0800d694
 8009c30:	0800d6c8 	.word	0x0800d6c8
 8009c34:	0800d748 	.word	0x0800d748
 8009c38:	0800d77c 	.word	0x0800d77c
 8009c3c:	40011000 	.word	0x40011000

08009c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009c44:	b672      	cpsid	i
}
 8009c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009c48:	e7fe      	b.n	8009c48 <Error_Handler+0x8>
	...

08009c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <HAL_MspInit+0x40>)
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	4a0d      	ldr	r2, [pc, #52]	; (8009c8c <HAL_MspInit+0x40>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	6193      	str	r3, [r2, #24]
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <HAL_MspInit+0x40>)
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c6a:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <HAL_MspInit+0x40>)
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	4a07      	ldr	r2, [pc, #28]	; (8009c8c <HAL_MspInit+0x40>)
 8009c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c74:	61d3      	str	r3, [r2, #28]
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <HAL_MspInit+0x40>)
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c82:	bf00      	nop
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bc80      	pop	{r7}
 8009c8a:	4770      	bx	lr
 8009c8c:	40021000 	.word	0x40021000

08009c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08c      	sub	sp, #48	; 0x30
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c98:	f107 0320 	add.w	r3, r7, #32
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	609a      	str	r2, [r3, #8]
 8009ca4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a5b      	ldr	r2, [pc, #364]	; (8009e18 <HAL_UART_MspInit+0x188>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d132      	bne.n	8009d16 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009cb0:	4b5a      	ldr	r3, [pc, #360]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	4a59      	ldr	r2, [pc, #356]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cba:	6193      	str	r3, [r2, #24]
 8009cbc:	4b57      	ldr	r3, [pc, #348]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cc8:	4b54      	ldr	r3, [pc, #336]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	4a53      	ldr	r2, [pc, #332]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cce:	f043 0304 	orr.w	r3, r3, #4
 8009cd2:	6193      	str	r3, [r2, #24]
 8009cd4:	4b51      	ldr	r3, [pc, #324]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009cea:	2303      	movs	r3, #3
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cee:	f107 0320 	add.w	r3, r7, #32
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	484a      	ldr	r0, [pc, #296]	; (8009e20 <HAL_UART_MspInit+0x190>)
 8009cf6:	f000 fd7f 	bl	800a7f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d00:	2300      	movs	r3, #0
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d08:	f107 0320 	add.w	r3, r7, #32
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4844      	ldr	r0, [pc, #272]	; (8009e20 <HAL_UART_MspInit+0x190>)
 8009d10:	f000 fd72 	bl	800a7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009d14:	e07c      	b.n	8009e10 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a42      	ldr	r2, [pc, #264]	; (8009e24 <HAL_UART_MspInit+0x194>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d138      	bne.n	8009d92 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009d20:	4b3e      	ldr	r3, [pc, #248]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4a3d      	ldr	r2, [pc, #244]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2a:	61d3      	str	r3, [r2, #28]
 8009d2c:	4b3b      	ldr	r3, [pc, #236]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d38:	4b38      	ldr	r3, [pc, #224]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	4a37      	ldr	r2, [pc, #220]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d3e:	f043 0304 	orr.w	r3, r3, #4
 8009d42:	6193      	str	r3, [r2, #24]
 8009d44:	4b35      	ldr	r3, [pc, #212]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	613b      	str	r3, [r7, #16]
 8009d4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009d50:	2304      	movs	r3, #4
 8009d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d54:	2302      	movs	r3, #2
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d5c:	f107 0320 	add.w	r3, r7, #32
 8009d60:	4619      	mov	r1, r3
 8009d62:	482f      	ldr	r0, [pc, #188]	; (8009e20 <HAL_UART_MspInit+0x190>)
 8009d64:	f000 fd48 	bl	800a7f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009d68:	2308      	movs	r3, #8
 8009d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d74:	f107 0320 	add.w	r3, r7, #32
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4829      	ldr	r0, [pc, #164]	; (8009e20 <HAL_UART_MspInit+0x190>)
 8009d7c:	f000 fd3c 	bl	800a7f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009d80:	2200      	movs	r2, #0
 8009d82:	2100      	movs	r1, #0
 8009d84:	2026      	movs	r0, #38	; 0x26
 8009d86:	f000 fad6 	bl	800a336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009d8a:	2026      	movs	r0, #38	; 0x26
 8009d8c:	f000 faef 	bl	800a36e <HAL_NVIC_EnableIRQ>
}
 8009d90:	e03e      	b.n	8009e10 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a24      	ldr	r2, [pc, #144]	; (8009e28 <HAL_UART_MspInit+0x198>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d139      	bne.n	8009e10 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009d9c:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	4a1e      	ldr	r2, [pc, #120]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009da6:	61d3      	str	r3, [r2, #28]
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009db4:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	4a18      	ldr	r2, [pc, #96]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009dba:	f043 0308 	orr.w	r3, r3, #8
 8009dbe:	6193      	str	r3, [r2, #24]
 8009dc0:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <HAL_UART_MspInit+0x18c>)
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	f003 0308 	and.w	r3, r3, #8
 8009dc8:	60bb      	str	r3, [r7, #8]
 8009dca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dda:	f107 0320 	add.w	r3, r7, #32
 8009dde:	4619      	mov	r1, r3
 8009de0:	4812      	ldr	r0, [pc, #72]	; (8009e2c <HAL_UART_MspInit+0x19c>)
 8009de2:	f000 fd09 	bl	800a7f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dec:	2300      	movs	r3, #0
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009df4:	f107 0320 	add.w	r3, r7, #32
 8009df8:	4619      	mov	r1, r3
 8009dfa:	480c      	ldr	r0, [pc, #48]	; (8009e2c <HAL_UART_MspInit+0x19c>)
 8009dfc:	f000 fcfc 	bl	800a7f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009e00:	2200      	movs	r2, #0
 8009e02:	2100      	movs	r1, #0
 8009e04:	2027      	movs	r0, #39	; 0x27
 8009e06:	f000 fa96 	bl	800a336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009e0a:	2027      	movs	r0, #39	; 0x27
 8009e0c:	f000 faaf 	bl	800a36e <HAL_NVIC_EnableIRQ>
}
 8009e10:	bf00      	nop
 8009e12:	3730      	adds	r7, #48	; 0x30
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40013800 	.word	0x40013800
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	40010800 	.word	0x40010800
 8009e24:	40004400 	.word	0x40004400
 8009e28:	40004800 	.word	0x40004800
 8009e2c:	40010c00 	.word	0x40010c00

08009e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e30:	b480      	push	{r7}
 8009e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e34:	e7fe      	b.n	8009e34 <NMI_Handler+0x4>

08009e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e36:	b480      	push	{r7}
 8009e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e3a:	e7fe      	b.n	8009e3a <HardFault_Handler+0x4>

08009e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e40:	e7fe      	b.n	8009e40 <MemManage_Handler+0x4>

08009e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e42:	b480      	push	{r7}
 8009e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e46:	e7fe      	b.n	8009e46 <BusFault_Handler+0x4>

08009e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e4c:	e7fe      	b.n	8009e4c <UsageFault_Handler+0x4>

08009e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009e52:	bf00      	nop
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr

08009e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e5e:	bf00      	nop
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr

08009e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009e66:	b480      	push	{r7}
 8009e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009e6a:	bf00      	nop
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e76:	f000 f931 	bl	800a0dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e7a:	bf00      	nop
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009e84:	4802      	ldr	r0, [pc, #8]	; (8009e90 <USART2_IRQHandler+0x10>)
 8009e86:	f001 fc05 	bl	800b694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000540 	.word	0x20000540

08009e94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009e98:	4802      	ldr	r0, [pc, #8]	; (8009ea4 <USART3_IRQHandler+0x10>)
 8009e9a:	f001 fbfb 	bl	800b694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009e9e:	bf00      	nop
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000588 	.word	0x20000588

08009ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e00a      	b.n	8009ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009eba:	f3af 8000 	nop.w
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	60ba      	str	r2, [r7, #8]
 8009ec6:	b2ca      	uxtb	r2, r1
 8009ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	dbf0      	blt.n	8009eba <_read+0x12>
	}

return len;
 8009ed8:	687b      	ldr	r3, [r7, #4]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e009      	b.n	8009f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	60ba      	str	r2, [r7, #8]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff fd1f 	bl	8009940 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	3301      	adds	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	dbf1      	blt.n	8009ef4 <_write+0x12>
	}
	return len;
 8009f10:	687b      	ldr	r3, [r7, #4]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <_close>:

int _close(int file)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
	return -1;
 8009f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f40:	605a      	str	r2, [r3, #4]
	return 0;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr

08009f4e <_isatty>:

int _isatty(int file)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
	return 1;
 8009f56:	2301      	movs	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b085      	sub	sp, #20
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
	return 0;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr
	...

08009f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009f84:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <_sbrk+0x5c>)
 8009f86:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <_sbrk+0x60>)
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009f90:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <_sbrk+0x64>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <_sbrk+0x64>)
 8009f9a:	4a12      	ldr	r2, [pc, #72]	; (8009fe4 <_sbrk+0x68>)
 8009f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009f9e:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <_sbrk+0x64>)
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d207      	bcs.n	8009fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009fac:	f002 fb36 	bl	800c61c <__errno>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	220c      	movs	r2, #12
 8009fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	e009      	b.n	8009fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009fbc:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <_sbrk+0x64>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009fc2:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <_sbrk+0x64>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4413      	add	r3, r2
 8009fca:	4a05      	ldr	r2, [pc, #20]	; (8009fe0 <_sbrk+0x64>)
 8009fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009fce:	68fb      	ldr	r3, [r7, #12]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20005000 	.word	0x20005000
 8009fdc:	00000400 	.word	0x00000400
 8009fe0:	20000df0 	.word	0x20000df0
 8009fe4:	20000f68 	.word	0x20000f68

08009fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8009fec:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <SystemInit+0x14>)
 8009fee:	4a04      	ldr	r2, [pc, #16]	; (800a000 <SystemInit+0x18>)
 8009ff0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009ff2:	bf00      	nop
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	e000ed00 	.word	0xe000ed00
 800a000:	08008000 	.word	0x08008000

0800a004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a004:	f7ff fff0 	bl	8009fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a008:	480b      	ldr	r0, [pc, #44]	; (800a038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800a00a:	490c      	ldr	r1, [pc, #48]	; (800a03c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800a00c:	4a0c      	ldr	r2, [pc, #48]	; (800a040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800a00e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a010:	e002      	b.n	800a018 <LoopCopyDataInit>

0800a012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a016:	3304      	adds	r3, #4

0800a018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a01a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a01c:	d3f9      	bcc.n	800a012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a01e:	4a09      	ldr	r2, [pc, #36]	; (800a044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800a020:	4c09      	ldr	r4, [pc, #36]	; (800a048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a022:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a024:	e001      	b.n	800a02a <LoopFillZerobss>

0800a026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a028:	3204      	adds	r2, #4

0800a02a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a02a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a02c:	d3fb      	bcc.n	800a026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a02e:	f002 fafb 	bl	800c628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a032:	f7ff fb47 	bl	80096c4 <main>
  bx lr
 800a036:	4770      	bx	lr
  ldr r0, =_sdata
 800a038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a03c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800a040:	0800dc34 	.word	0x0800dc34
  ldr r2, =_sbss
 800a044:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800a048:	20000f64 	.word	0x20000f64

0800a04c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a04c:	e7fe      	b.n	800a04c <ADC1_2_IRQHandler>
	...

0800a050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a054:	4b08      	ldr	r3, [pc, #32]	; (800a078 <HAL_Init+0x28>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a07      	ldr	r2, [pc, #28]	; (800a078 <HAL_Init+0x28>)
 800a05a:	f043 0310 	orr.w	r3, r3, #16
 800a05e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a060:	2003      	movs	r0, #3
 800a062:	f000 f95d 	bl	800a320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a066:	200f      	movs	r0, #15
 800a068:	f000 f808 	bl	800a07c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a06c:	f7ff fdee 	bl	8009c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	40022000 	.word	0x40022000

0800a07c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a084:	4b12      	ldr	r3, [pc, #72]	; (800a0d0 <HAL_InitTick+0x54>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <HAL_InitTick+0x58>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	4619      	mov	r1, r3
 800a08e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a092:	fbb3 f3f1 	udiv	r3, r3, r1
 800a096:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f979 	bl	800a392 <HAL_SYSTICK_Config>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e00e      	b.n	800a0c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b0f      	cmp	r3, #15
 800a0ae:	d80a      	bhi.n	800a0c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	f000 f93d 	bl	800a336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a0bc:	4a06      	ldr	r2, [pc, #24]	; (800a0d8 <HAL_InitTick+0x5c>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e000      	b.n	800a0c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	20000030 	.word	0x20000030
 800a0d4:	20000038 	.word	0x20000038
 800a0d8:	20000034 	.word	0x20000034

0800a0dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <HAL_IncTick+0x1c>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <HAL_IncTick+0x20>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	4a03      	ldr	r2, [pc, #12]	; (800a0fc <HAL_IncTick+0x20>)
 800a0ee:	6013      	str	r3, [r2, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr
 800a0f8:	20000038 	.word	0x20000038
 800a0fc:	20000df4 	.word	0x20000df4

0800a100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
  return uwTick;
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <HAL_GetTick+0x10>)
 800a106:	681b      	ldr	r3, [r3, #0]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr
 800a110:	20000df4 	.word	0x20000df4

0800a114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a11c:	f7ff fff0 	bl	800a100 <HAL_GetTick>
 800a120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d005      	beq.n	800a13a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a12e:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <HAL_Delay+0x44>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a13a:	bf00      	nop
 800a13c:	f7ff ffe0 	bl	800a100 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d8f7      	bhi.n	800a13c <HAL_Delay+0x28>
  {
  }
}
 800a14c:	bf00      	nop
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000038 	.word	0x20000038

0800a15c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a16c:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a178:	4013      	ands	r3, r2
 800a17a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a18c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a18e:	4a04      	ldr	r2, [pc, #16]	; (800a1a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	60d3      	str	r3, [r2, #12]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	e000ed00 	.word	0xe000ed00

0800a1a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <__NVIC_GetPriorityGrouping+0x18>)
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	0a1b      	lsrs	r3, r3, #8
 800a1ae:	f003 0307 	and.w	r3, r3, #7
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bc80      	pop	{r7}
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	e000ed00 	.word	0xe000ed00

0800a1c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	db0b      	blt.n	800a1ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	f003 021f 	and.w	r2, r3, #31
 800a1d8:	4906      	ldr	r1, [pc, #24]	; (800a1f4 <__NVIC_EnableIRQ+0x34>)
 800a1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1de:	095b      	lsrs	r3, r3, #5
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr
 800a1f4:	e000e100 	.word	0xe000e100

0800a1f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db0a      	blt.n	800a222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	490c      	ldr	r1, [pc, #48]	; (800a244 <__NVIC_SetPriority+0x4c>)
 800a212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a216:	0112      	lsls	r2, r2, #4
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	440b      	add	r3, r1
 800a21c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a220:	e00a      	b.n	800a238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	b2da      	uxtb	r2, r3
 800a226:	4908      	ldr	r1, [pc, #32]	; (800a248 <__NVIC_SetPriority+0x50>)
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	f003 030f 	and.w	r3, r3, #15
 800a22e:	3b04      	subs	r3, #4
 800a230:	0112      	lsls	r2, r2, #4
 800a232:	b2d2      	uxtb	r2, r2
 800a234:	440b      	add	r3, r1
 800a236:	761a      	strb	r2, [r3, #24]
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	e000e100 	.word	0xe000e100
 800a248:	e000ed00 	.word	0xe000ed00

0800a24c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b089      	sub	sp, #36	; 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f1c3 0307 	rsb	r3, r3, #7
 800a266:	2b04      	cmp	r3, #4
 800a268:	bf28      	it	cs
 800a26a:	2304      	movcs	r3, #4
 800a26c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	3304      	adds	r3, #4
 800a272:	2b06      	cmp	r3, #6
 800a274:	d902      	bls.n	800a27c <NVIC_EncodePriority+0x30>
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	3b03      	subs	r3, #3
 800a27a:	e000      	b.n	800a27e <NVIC_EncodePriority+0x32>
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a280:	f04f 32ff 	mov.w	r2, #4294967295
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	43da      	mvns	r2, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	401a      	ands	r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a294:	f04f 31ff 	mov.w	r1, #4294967295
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	fa01 f303 	lsl.w	r3, r1, r3
 800a29e:	43d9      	mvns	r1, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2a4:	4313      	orrs	r3, r2
         );
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3724      	adds	r7, #36	; 0x24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a2b4:	f3bf 8f4f 	dsb	sy
}
 800a2b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a2ba:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <__NVIC_SystemReset+0x24>)
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a2c2:	4904      	ldr	r1, [pc, #16]	; (800a2d4 <__NVIC_SystemReset+0x24>)
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <__NVIC_SystemReset+0x28>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a2ca:	f3bf 8f4f 	dsb	sy
}
 800a2ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a2d0:	bf00      	nop
 800a2d2:	e7fd      	b.n	800a2d0 <__NVIC_SystemReset+0x20>
 800a2d4:	e000ed00 	.word	0xe000ed00
 800a2d8:	05fa0004 	.word	0x05fa0004

0800a2dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2ec:	d301      	bcc.n	800a2f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e00f      	b.n	800a312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2f2:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <SysTick_Config+0x40>)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2fa:	210f      	movs	r1, #15
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	f7ff ff7a 	bl	800a1f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <SysTick_Config+0x40>)
 800a306:	2200      	movs	r2, #0
 800a308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a30a:	4b04      	ldr	r3, [pc, #16]	; (800a31c <SysTick_Config+0x40>)
 800a30c:	2207      	movs	r2, #7
 800a30e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	e000e010 	.word	0xe000e010

0800a320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ff17 	bl	800a15c <__NVIC_SetPriorityGrouping>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	4603      	mov	r3, r0
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a344:	2300      	movs	r3, #0
 800a346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a348:	f7ff ff2c 	bl	800a1a4 <__NVIC_GetPriorityGrouping>
 800a34c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	6978      	ldr	r0, [r7, #20]
 800a354:	f7ff ff7a 	bl	800a24c <NVIC_EncodePriority>
 800a358:	4602      	mov	r2, r0
 800a35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7ff ff49 	bl	800a1f8 <__NVIC_SetPriority>
}
 800a366:	bf00      	nop
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	4603      	mov	r3, r0
 800a376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7ff ff1f 	bl	800a1c0 <__NVIC_EnableIRQ>
}
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a38e:	f7ff ff8f 	bl	800a2b0 <__NVIC_SystemReset>

0800a392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff ff9e 	bl	800a2dc <SysTick_Config>
 800a3a0:	4603      	mov	r3, r0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d008      	beq.n	800a3d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e020      	b.n	800a416 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 020e 	bic.w	r2, r2, #14
 800a3e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0201 	bic.w	r2, r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	fa01 f202 	lsl.w	r2, r1, r2
 800a402:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bc80      	pop	{r7}
 800a41e:	4770      	bx	lr

0800a420 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d005      	beq.n	800a444 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2204      	movs	r2, #4
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
 800a442:	e051      	b.n	800a4e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 020e 	bic.w	r2, r2, #14
 800a452:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 0201 	bic.w	r2, r2, #1
 800a462:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a22      	ldr	r2, [pc, #136]	; (800a4f4 <HAL_DMA_Abort_IT+0xd4>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d029      	beq.n	800a4c2 <HAL_DMA_Abort_IT+0xa2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a21      	ldr	r2, [pc, #132]	; (800a4f8 <HAL_DMA_Abort_IT+0xd8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d022      	beq.n	800a4be <HAL_DMA_Abort_IT+0x9e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1f      	ldr	r2, [pc, #124]	; (800a4fc <HAL_DMA_Abort_IT+0xdc>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d01a      	beq.n	800a4b8 <HAL_DMA_Abort_IT+0x98>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1e      	ldr	r2, [pc, #120]	; (800a500 <HAL_DMA_Abort_IT+0xe0>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d012      	beq.n	800a4b2 <HAL_DMA_Abort_IT+0x92>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1c      	ldr	r2, [pc, #112]	; (800a504 <HAL_DMA_Abort_IT+0xe4>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00a      	beq.n	800a4ac <HAL_DMA_Abort_IT+0x8c>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a1b      	ldr	r2, [pc, #108]	; (800a508 <HAL_DMA_Abort_IT+0xe8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d102      	bne.n	800a4a6 <HAL_DMA_Abort_IT+0x86>
 800a4a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4a4:	e00e      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4aa:	e00b      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4b0:	e008      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4b6:	e005      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4bc:	e002      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4be:	2310      	movs	r3, #16
 800a4c0:	e000      	b.n	800a4c4 <HAL_DMA_Abort_IT+0xa4>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4a11      	ldr	r2, [pc, #68]	; (800a50c <HAL_DMA_Abort_IT+0xec>)
 800a4c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
    } 
  }
  return status;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40020008 	.word	0x40020008
 800a4f8:	4002001c 	.word	0x4002001c
 800a4fc:	40020030 	.word	0x40020030
 800a500:	40020044 	.word	0x40020044
 800a504:	40020058 	.word	0x40020058
 800a508:	4002006c 	.word	0x4002006c
 800a50c:	40020000 	.word	0x40020000

0800a510 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <HAL_FLASH_Unlock+0x40>)
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00d      	beq.n	800a542 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <HAL_FLASH_Unlock+0x40>)
 800a528:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <HAL_FLASH_Unlock+0x44>)
 800a52a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a52c:	4b08      	ldr	r3, [pc, #32]	; (800a550 <HAL_FLASH_Unlock+0x40>)
 800a52e:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <HAL_FLASH_Unlock+0x48>)
 800a530:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <HAL_FLASH_Unlock+0x40>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800a542:	79fb      	ldrb	r3, [r7, #7]
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	bc80      	pop	{r7}
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	40022000 	.word	0x40022000
 800a554:	45670123 	.word	0x45670123
 800a558:	cdef89ab 	.word	0xcdef89ab

0800a55c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <HAL_FLASH_Lock+0x1c>)
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	4a04      	ldr	r2, [pc, #16]	; (800a578 <HAL_FLASH_Lock+0x1c>)
 800a566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	40022000 	.word	0x40022000

0800a57c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a584:	f7ff fdbc 	bl	800a100 <HAL_GetTick>
 800a588:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a58a:	e010      	b.n	800a5ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a592:	d00c      	beq.n	800a5ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d007      	beq.n	800a5aa <FLASH_WaitForLastOperation+0x2e>
 800a59a:	f7ff fdb1 	bl	800a100 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d201      	bcs.n	800a5ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e025      	b.n	800a5fa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a5ae:	4b15      	ldr	r3, [pc, #84]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e8      	bne.n	800a58c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a5ba:	4b12      	ldr	r3, [pc, #72]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <FLASH_WaitForLastOperation+0x88>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a5f0:	f000 f80a 	bl	800a608 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	40022000 	.word	0x40022000

0800a608 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a612:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a61e:	4b21      	ldr	r3, [pc, #132]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	f043 0302 	orr.w	r3, r3, #2
 800a626:	4a1f      	ldr	r2, [pc, #124]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a628:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f043 0310 	orr.w	r3, r3, #16
 800a630:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a632:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a63e:	4b19      	ldr	r3, [pc, #100]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	f043 0301 	orr.w	r3, r3, #1
 800a646:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a648:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f043 0304 	orr.w	r3, r3, #4
 800a650:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a652:	4b13      	ldr	r3, [pc, #76]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f043 0304 	orr.w	r3, r3, #4
 800a666:	4a0f      	ldr	r2, [pc, #60]	; (800a6a4 <FLASH_SetErrorCode+0x9c>)
 800a668:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a66a:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	4a0c      	ldr	r2, [pc, #48]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f240 1201 	movw	r2, #257	; 0x101
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d106      	bne.n	800a68e <FLASH_SetErrorCode+0x86>
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	4a06      	ldr	r2, [pc, #24]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a686:	f023 0301 	bic.w	r3, r3, #1
 800a68a:	61d3      	str	r3, [r2, #28]
}  
 800a68c:	e002      	b.n	800a694 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a68e:	4a04      	ldr	r2, [pc, #16]	; (800a6a0 <FLASH_SetErrorCode+0x98>)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60d3      	str	r3, [r2, #12]
}  
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40022000 	.word	0x40022000
 800a6a4:	20000df8 	.word	0x20000df8

0800a6a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6ba:	4b2f      	ldr	r3, [pc, #188]	; (800a778 <HAL_FLASHEx_Erase+0xd0>)
 800a6bc:	7e1b      	ldrb	r3, [r3, #24]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_FLASHEx_Erase+0x1e>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e053      	b.n	800a76e <HAL_FLASHEx_Erase+0xc6>
 800a6c6:	4b2c      	ldr	r3, [pc, #176]	; (800a778 <HAL_FLASHEx_Erase+0xd0>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d116      	bne.n	800a702 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a6d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6d8:	f7ff ff50 	bl	800a57c <FLASH_WaitForLastOperation>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d141      	bne.n	800a766 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	f000 f84c 	bl	800a780 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a6e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6ec:	f7ff ff46 	bl	800a57c <FLASH_WaitForLastOperation>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a6f4:	4b21      	ldr	r3, [pc, #132]	; (800a77c <HAL_FLASHEx_Erase+0xd4>)
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	4a20      	ldr	r2, [pc, #128]	; (800a77c <HAL_FLASHEx_Erase+0xd4>)
 800a6fa:	f023 0304 	bic.w	r3, r3, #4
 800a6fe:	6113      	str	r3, [r2, #16]
 800a700:	e031      	b.n	800a766 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a702:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a706:	f7ff ff39 	bl	800a57c <FLASH_WaitForLastOperation>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d12a      	bne.n	800a766 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	60bb      	str	r3, [r7, #8]
 800a71e:	e019      	b.n	800a754 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800a720:	68b8      	ldr	r0, [r7, #8]
 800a722:	f000 f849 	bl	800a7b8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a726:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a72a:	f7ff ff27 	bl	800a57c <FLASH_WaitForLastOperation>
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a732:	4b12      	ldr	r3, [pc, #72]	; (800a77c <HAL_FLASHEx_Erase+0xd4>)
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4a11      	ldr	r2, [pc, #68]	; (800a77c <HAL_FLASHEx_Erase+0xd4>)
 800a738:	f023 0302 	bic.w	r3, r3, #2
 800a73c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	601a      	str	r2, [r3, #0]
            break;
 800a74a:	e00c      	b.n	800a766 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a752:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	029a      	lsls	r2, r3, #10
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	4413      	add	r3, r2
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	d3dc      	bcc.n	800a720 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a766:	4b04      	ldr	r3, [pc, #16]	; (800a778 <HAL_FLASHEx_Erase+0xd0>)
 800a768:	2200      	movs	r2, #0
 800a76a:	761a      	strb	r2, [r3, #24]

  return status;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000df8 	.word	0x20000df8
 800a77c:	40022000 	.word	0x40022000

0800a780 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a788:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <FLASH_MassErase+0x30>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <FLASH_MassErase+0x34>)
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	4a08      	ldr	r2, [pc, #32]	; (800a7b4 <FLASH_MassErase+0x34>)
 800a794:	f043 0304 	orr.w	r3, r3, #4
 800a798:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a79a:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <FLASH_MassErase+0x34>)
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	4a05      	ldr	r2, [pc, #20]	; (800a7b4 <FLASH_MassErase+0x34>)
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a7a6:	bf00      	nop
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bc80      	pop	{r7}
 800a7ae:	4770      	bx	lr
 800a7b0:	20000df8 	.word	0x20000df8
 800a7b4:	40022000 	.word	0x40022000

0800a7b8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <FLASH_PageErase+0x38>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <FLASH_PageErase+0x3c>)
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	4a0a      	ldr	r2, [pc, #40]	; (800a7f4 <FLASH_PageErase+0x3c>)
 800a7cc:	f043 0302 	orr.w	r3, r3, #2
 800a7d0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a7d2:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <FLASH_PageErase+0x3c>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <FLASH_PageErase+0x3c>)
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	4a05      	ldr	r2, [pc, #20]	; (800a7f4 <FLASH_PageErase+0x3c>)
 800a7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20000df8 	.word	0x20000df8
 800a7f4:	40022000 	.word	0x40022000

0800a7f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b08b      	sub	sp, #44	; 0x2c
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a802:	2300      	movs	r3, #0
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a806:	2300      	movs	r3, #0
 800a808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a80a:	e169      	b.n	800aae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a80c:	2201      	movs	r2, #1
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	4013      	ands	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	429a      	cmp	r2, r3
 800a826:	f040 8158 	bne.w	800aada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	4a9a      	ldr	r2, [pc, #616]	; (800aa98 <HAL_GPIO_Init+0x2a0>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d05e      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
 800a834:	4a98      	ldr	r2, [pc, #608]	; (800aa98 <HAL_GPIO_Init+0x2a0>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d875      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a83a:	4a98      	ldr	r2, [pc, #608]	; (800aa9c <HAL_GPIO_Init+0x2a4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d058      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
 800a840:	4a96      	ldr	r2, [pc, #600]	; (800aa9c <HAL_GPIO_Init+0x2a4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d86f      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a846:	4a96      	ldr	r2, [pc, #600]	; (800aaa0 <HAL_GPIO_Init+0x2a8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d052      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
 800a84c:	4a94      	ldr	r2, [pc, #592]	; (800aaa0 <HAL_GPIO_Init+0x2a8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d869      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a852:	4a94      	ldr	r2, [pc, #592]	; (800aaa4 <HAL_GPIO_Init+0x2ac>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d04c      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
 800a858:	4a92      	ldr	r2, [pc, #584]	; (800aaa4 <HAL_GPIO_Init+0x2ac>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d863      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a85e:	4a92      	ldr	r2, [pc, #584]	; (800aaa8 <HAL_GPIO_Init+0x2b0>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d046      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
 800a864:	4a90      	ldr	r2, [pc, #576]	; (800aaa8 <HAL_GPIO_Init+0x2b0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d85d      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a86a:	2b12      	cmp	r3, #18
 800a86c:	d82a      	bhi.n	800a8c4 <HAL_GPIO_Init+0xcc>
 800a86e:	2b12      	cmp	r3, #18
 800a870:	d859      	bhi.n	800a926 <HAL_GPIO_Init+0x12e>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <HAL_GPIO_Init+0x80>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a8f3 	.word	0x0800a8f3
 800a87c:	0800a8cd 	.word	0x0800a8cd
 800a880:	0800a8df 	.word	0x0800a8df
 800a884:	0800a921 	.word	0x0800a921
 800a888:	0800a927 	.word	0x0800a927
 800a88c:	0800a927 	.word	0x0800a927
 800a890:	0800a927 	.word	0x0800a927
 800a894:	0800a927 	.word	0x0800a927
 800a898:	0800a927 	.word	0x0800a927
 800a89c:	0800a927 	.word	0x0800a927
 800a8a0:	0800a927 	.word	0x0800a927
 800a8a4:	0800a927 	.word	0x0800a927
 800a8a8:	0800a927 	.word	0x0800a927
 800a8ac:	0800a927 	.word	0x0800a927
 800a8b0:	0800a927 	.word	0x0800a927
 800a8b4:	0800a927 	.word	0x0800a927
 800a8b8:	0800a927 	.word	0x0800a927
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8e9 	.word	0x0800a8e9
 800a8c4:	4a79      	ldr	r2, [pc, #484]	; (800aaac <HAL_GPIO_Init+0x2b4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d013      	beq.n	800a8f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a8ca:	e02c      	b.n	800a926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	623b      	str	r3, [r7, #32]
          break;
 800a8d2:	e029      	b.n	800a928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	623b      	str	r3, [r7, #32]
          break;
 800a8dc:	e024      	b.n	800a928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	623b      	str	r3, [r7, #32]
          break;
 800a8e6:	e01f      	b.n	800a928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	330c      	adds	r3, #12
 800a8ee:	623b      	str	r3, [r7, #32]
          break;
 800a8f0:	e01a      	b.n	800a928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a8fa:	2304      	movs	r3, #4
 800a8fc:	623b      	str	r3, [r7, #32]
          break;
 800a8fe:	e013      	b.n	800a928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d105      	bne.n	800a914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a908:	2308      	movs	r3, #8
 800a90a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	611a      	str	r2, [r3, #16]
          break;
 800a912:	e009      	b.n	800a928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a914:	2308      	movs	r3, #8
 800a916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	615a      	str	r2, [r3, #20]
          break;
 800a91e:	e003      	b.n	800a928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a920:	2300      	movs	r3, #0
 800a922:	623b      	str	r3, [r7, #32]
          break;
 800a924:	e000      	b.n	800a928 <HAL_GPIO_Init+0x130>
          break;
 800a926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2bff      	cmp	r3, #255	; 0xff
 800a92c:	d801      	bhi.n	800a932 <HAL_GPIO_Init+0x13a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	e001      	b.n	800a936 <HAL_GPIO_Init+0x13e>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3304      	adds	r3, #4
 800a936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2bff      	cmp	r3, #255	; 0xff
 800a93c:	d802      	bhi.n	800a944 <HAL_GPIO_Init+0x14c>
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	e002      	b.n	800a94a <HAL_GPIO_Init+0x152>
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	3b08      	subs	r3, #8
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	210f      	movs	r1, #15
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	fa01 f303 	lsl.w	r3, r1, r3
 800a958:	43db      	mvns	r3, r3
 800a95a:	401a      	ands	r2, r3
 800a95c:	6a39      	ldr	r1, [r7, #32]
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	431a      	orrs	r2, r3
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 80b1 	beq.w	800aada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a978:	4b4d      	ldr	r3, [pc, #308]	; (800aab0 <HAL_GPIO_Init+0x2b8>)
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	4a4c      	ldr	r2, [pc, #304]	; (800aab0 <HAL_GPIO_Init+0x2b8>)
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	6193      	str	r3, [r2, #24]
 800a984:	4b4a      	ldr	r3, [pc, #296]	; (800aab0 <HAL_GPIO_Init+0x2b8>)
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	60bb      	str	r3, [r7, #8]
 800a98e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a990:	4a48      	ldr	r2, [pc, #288]	; (800aab4 <HAL_GPIO_Init+0x2bc>)
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	089b      	lsrs	r3, r3, #2
 800a996:	3302      	adds	r3, #2
 800a998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a99c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	f003 0303 	and.w	r3, r3, #3
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	220f      	movs	r2, #15
 800a9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a40      	ldr	r2, [pc, #256]	; (800aab8 <HAL_GPIO_Init+0x2c0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d013      	beq.n	800a9e4 <HAL_GPIO_Init+0x1ec>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a3f      	ldr	r2, [pc, #252]	; (800aabc <HAL_GPIO_Init+0x2c4>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00d      	beq.n	800a9e0 <HAL_GPIO_Init+0x1e8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a3e      	ldr	r2, [pc, #248]	; (800aac0 <HAL_GPIO_Init+0x2c8>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d007      	beq.n	800a9dc <HAL_GPIO_Init+0x1e4>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a3d      	ldr	r2, [pc, #244]	; (800aac4 <HAL_GPIO_Init+0x2cc>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d101      	bne.n	800a9d8 <HAL_GPIO_Init+0x1e0>
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e006      	b.n	800a9e6 <HAL_GPIO_Init+0x1ee>
 800a9d8:	2304      	movs	r3, #4
 800a9da:	e004      	b.n	800a9e6 <HAL_GPIO_Init+0x1ee>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e002      	b.n	800a9e6 <HAL_GPIO_Init+0x1ee>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <HAL_GPIO_Init+0x1ee>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e8:	f002 0203 	and.w	r2, r2, #3
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	4093      	lsls	r3, r2
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a9f6:	492f      	ldr	r1, [pc, #188]	; (800aab4 <HAL_GPIO_Init+0x2bc>)
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	089b      	lsrs	r3, r3, #2
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d006      	beq.n	800aa1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800aa10:	4b2d      	ldr	r3, [pc, #180]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	492c      	ldr	r1, [pc, #176]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	608b      	str	r3, [r1, #8]
 800aa1c:	e006      	b.n	800aa2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	43db      	mvns	r3, r3
 800aa26:	4928      	ldr	r1, [pc, #160]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d006      	beq.n	800aa46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800aa38:	4b23      	ldr	r3, [pc, #140]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	4922      	ldr	r1, [pc, #136]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60cb      	str	r3, [r1, #12]
 800aa44:	e006      	b.n	800aa54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800aa46:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	491e      	ldr	r1, [pc, #120]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800aa60:	4b19      	ldr	r3, [pc, #100]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	4918      	ldr	r1, [pc, #96]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	604b      	str	r3, [r1, #4]
 800aa6c:	e006      	b.n	800aa7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800aa6e:	4b16      	ldr	r3, [pc, #88]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	43db      	mvns	r3, r3
 800aa76:	4914      	ldr	r1, [pc, #80]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d021      	beq.n	800aacc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800aa88:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	490e      	ldr	r1, [pc, #56]	; (800aac8 <HAL_GPIO_Init+0x2d0>)
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	600b      	str	r3, [r1, #0]
 800aa94:	e021      	b.n	800aada <HAL_GPIO_Init+0x2e2>
 800aa96:	bf00      	nop
 800aa98:	10320000 	.word	0x10320000
 800aa9c:	10310000 	.word	0x10310000
 800aaa0:	10220000 	.word	0x10220000
 800aaa4:	10210000 	.word	0x10210000
 800aaa8:	10120000 	.word	0x10120000
 800aaac:	10110000 	.word	0x10110000
 800aab0:	40021000 	.word	0x40021000
 800aab4:	40010000 	.word	0x40010000
 800aab8:	40010800 	.word	0x40010800
 800aabc:	40010c00 	.word	0x40010c00
 800aac0:	40011000 	.word	0x40011000
 800aac4:	40011400 	.word	0x40011400
 800aac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <HAL_GPIO_Init+0x304>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	43db      	mvns	r3, r3
 800aad4:	4909      	ldr	r1, [pc, #36]	; (800aafc <HAL_GPIO_Init+0x304>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	3301      	adds	r3, #1
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f47f ae8e 	bne.w	800a80c <HAL_GPIO_Init+0x14>
  }
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	372c      	adds	r7, #44	; 0x2c
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bc80      	pop	{r7}
 800aafa:	4770      	bx	lr
 800aafc:	40010400 	.word	0x40010400

0800ab00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	887b      	ldrh	r3, [r7, #2]
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	73fb      	strb	r3, [r7, #15]
 800ab1c:	e001      	b.n	800ab22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bc80      	pop	{r7}
 800ab2c:	4770      	bx	lr

0800ab2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	807b      	strh	r3, [r7, #2]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab3e:	787b      	ldrb	r3, [r7, #1]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab44:	887a      	ldrh	r2, [r7, #2]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800ab4a:	e003      	b.n	800ab54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ab4c:	887b      	ldrh	r3, [r7, #2]
 800ab4e:	041a      	lsls	r2, r3, #16
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	611a      	str	r2, [r3, #16]
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bc80      	pop	{r7}
 800ab5c:	4770      	bx	lr
	...

0800ab60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e272      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8087 	beq.w	800ac8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab80:	4b92      	ldr	r3, [pc, #584]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f003 030c 	and.w	r3, r3, #12
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d00c      	beq.n	800aba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab8c:	4b8f      	ldr	r3, [pc, #572]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	f003 030c 	and.w	r3, r3, #12
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d112      	bne.n	800abbe <HAL_RCC_OscConfig+0x5e>
 800ab98:	4b8c      	ldr	r3, [pc, #560]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba4:	d10b      	bne.n	800abbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aba6:	4b89      	ldr	r3, [pc, #548]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d06c      	beq.n	800ac8c <HAL_RCC_OscConfig+0x12c>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d168      	bne.n	800ac8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e24c      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc6:	d106      	bne.n	800abd6 <HAL_RCC_OscConfig+0x76>
 800abc8:	4b80      	ldr	r3, [pc, #512]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a7f      	ldr	r2, [pc, #508]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	e02e      	b.n	800ac34 <HAL_RCC_OscConfig+0xd4>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10c      	bne.n	800abf8 <HAL_RCC_OscConfig+0x98>
 800abde:	4b7b      	ldr	r3, [pc, #492]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a7a      	ldr	r2, [pc, #488]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	4b78      	ldr	r3, [pc, #480]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a77      	ldr	r2, [pc, #476]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800abf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	e01d      	b.n	800ac34 <HAL_RCC_OscConfig+0xd4>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac00:	d10c      	bne.n	800ac1c <HAL_RCC_OscConfig+0xbc>
 800ac02:	4b72      	ldr	r3, [pc, #456]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a71      	ldr	r2, [pc, #452]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	4b6f      	ldr	r3, [pc, #444]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a6e      	ldr	r2, [pc, #440]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e00b      	b.n	800ac34 <HAL_RCC_OscConfig+0xd4>
 800ac1c:	4b6b      	ldr	r3, [pc, #428]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a6a      	ldr	r2, [pc, #424]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	4b68      	ldr	r3, [pc, #416]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a67      	ldr	r2, [pc, #412]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d013      	beq.n	800ac64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac3c:	f7ff fa60 	bl	800a100 <HAL_GetTick>
 800ac40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac42:	e008      	b.n	800ac56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac44:	f7ff fa5c 	bl	800a100 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b64      	cmp	r3, #100	; 0x64
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e200      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac56:	4b5d      	ldr	r3, [pc, #372]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0f0      	beq.n	800ac44 <HAL_RCC_OscConfig+0xe4>
 800ac62:	e014      	b.n	800ac8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac64:	f7ff fa4c 	bl	800a100 <HAL_GetTick>
 800ac68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac6a:	e008      	b.n	800ac7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac6c:	f7ff fa48 	bl	800a100 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	2b64      	cmp	r3, #100	; 0x64
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e1ec      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac7e:	4b53      	ldr	r3, [pc, #332]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1f0      	bne.n	800ac6c <HAL_RCC_OscConfig+0x10c>
 800ac8a:	e000      	b.n	800ac8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d063      	beq.n	800ad62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac9a:	4b4c      	ldr	r3, [pc, #304]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f003 030c 	and.w	r3, r3, #12
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aca6:	4b49      	ldr	r3, [pc, #292]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f003 030c 	and.w	r3, r3, #12
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d11c      	bne.n	800acec <HAL_RCC_OscConfig+0x18c>
 800acb2:	4b46      	ldr	r3, [pc, #280]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d116      	bne.n	800acec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acbe:	4b43      	ldr	r3, [pc, #268]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d005      	beq.n	800acd6 <HAL_RCC_OscConfig+0x176>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d001      	beq.n	800acd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e1c0      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acd6:	4b3d      	ldr	r3, [pc, #244]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4939      	ldr	r1, [pc, #228]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acea:	e03a      	b.n	800ad62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d020      	beq.n	800ad36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800acf4:	4b36      	ldr	r3, [pc, #216]	; (800add0 <HAL_RCC_OscConfig+0x270>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acfa:	f7ff fa01 	bl	800a100 <HAL_GetTick>
 800acfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad00:	e008      	b.n	800ad14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad02:	f7ff f9fd 	bl	800a100 <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d901      	bls.n	800ad14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e1a1      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad14:	4b2d      	ldr	r3, [pc, #180]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0f0      	beq.n	800ad02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad20:	4b2a      	ldr	r3, [pc, #168]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	00db      	lsls	r3, r3, #3
 800ad2e:	4927      	ldr	r1, [pc, #156]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	600b      	str	r3, [r1, #0]
 800ad34:	e015      	b.n	800ad62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad36:	4b26      	ldr	r3, [pc, #152]	; (800add0 <HAL_RCC_OscConfig+0x270>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad3c:	f7ff f9e0 	bl	800a100 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad44:	f7ff f9dc 	bl	800a100 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e180      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad56:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f0      	bne.n	800ad44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0308 	and.w	r3, r3, #8
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d03a      	beq.n	800ade4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d019      	beq.n	800adaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad76:	4b17      	ldr	r3, [pc, #92]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad7c:	f7ff f9c0 	bl	800a100 <HAL_GetTick>
 800ad80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad84:	f7ff f9bc 	bl	800a100 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e160      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad96:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <HAL_RCC_OscConfig+0x26c>)
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f0      	beq.n	800ad84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ada2:	2001      	movs	r0, #1
 800ada4:	f000 face 	bl	800b344 <RCC_Delay>
 800ada8:	e01c      	b.n	800ade4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adaa:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <HAL_RCC_OscConfig+0x274>)
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adb0:	f7ff f9a6 	bl	800a100 <HAL_GetTick>
 800adb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adb6:	e00f      	b.n	800add8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adb8:	f7ff f9a2 	bl	800a100 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d908      	bls.n	800add8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e146      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
 800adca:	bf00      	nop
 800adcc:	40021000 	.word	0x40021000
 800add0:	42420000 	.word	0x42420000
 800add4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800add8:	4b92      	ldr	r3, [pc, #584]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e9      	bne.n	800adb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 80a6 	beq.w	800af3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adf6:	4b8b      	ldr	r3, [pc, #556]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10d      	bne.n	800ae1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae02:	4b88      	ldr	r3, [pc, #544]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	4a87      	ldr	r2, [pc, #540]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae0c:	61d3      	str	r3, [r2, #28]
 800ae0e:	4b85      	ldr	r3, [pc, #532]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae16:	60bb      	str	r3, [r7, #8]
 800ae18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae1e:	4b82      	ldr	r3, [pc, #520]	; (800b028 <HAL_RCC_OscConfig+0x4c8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d118      	bne.n	800ae5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae2a:	4b7f      	ldr	r3, [pc, #508]	; (800b028 <HAL_RCC_OscConfig+0x4c8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a7e      	ldr	r2, [pc, #504]	; (800b028 <HAL_RCC_OscConfig+0x4c8>)
 800ae30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae36:	f7ff f963 	bl	800a100 <HAL_GetTick>
 800ae3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae3e:	f7ff f95f 	bl	800a100 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b64      	cmp	r3, #100	; 0x64
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e103      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae50:	4b75      	ldr	r3, [pc, #468]	; (800b028 <HAL_RCC_OscConfig+0x4c8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0f0      	beq.n	800ae3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d106      	bne.n	800ae72 <HAL_RCC_OscConfig+0x312>
 800ae64:	4b6f      	ldr	r3, [pc, #444]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	4a6e      	ldr	r2, [pc, #440]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	6213      	str	r3, [r2, #32]
 800ae70:	e02d      	b.n	800aece <HAL_RCC_OscConfig+0x36e>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10c      	bne.n	800ae94 <HAL_RCC_OscConfig+0x334>
 800ae7a:	4b6a      	ldr	r3, [pc, #424]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	4a69      	ldr	r2, [pc, #420]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	6213      	str	r3, [r2, #32]
 800ae86:	4b67      	ldr	r3, [pc, #412]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	4a66      	ldr	r2, [pc, #408]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae8c:	f023 0304 	bic.w	r3, r3, #4
 800ae90:	6213      	str	r3, [r2, #32]
 800ae92:	e01c      	b.n	800aece <HAL_RCC_OscConfig+0x36e>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	2b05      	cmp	r3, #5
 800ae9a:	d10c      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x356>
 800ae9c:	4b61      	ldr	r3, [pc, #388]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	4a60      	ldr	r2, [pc, #384]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aea2:	f043 0304 	orr.w	r3, r3, #4
 800aea6:	6213      	str	r3, [r2, #32]
 800aea8:	4b5e      	ldr	r3, [pc, #376]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	4a5d      	ldr	r2, [pc, #372]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	6213      	str	r3, [r2, #32]
 800aeb4:	e00b      	b.n	800aece <HAL_RCC_OscConfig+0x36e>
 800aeb6:	4b5b      	ldr	r3, [pc, #364]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	4a5a      	ldr	r2, [pc, #360]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	6213      	str	r3, [r2, #32]
 800aec2:	4b58      	ldr	r3, [pc, #352]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	4a57      	ldr	r2, [pc, #348]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aec8:	f023 0304 	bic.w	r3, r3, #4
 800aecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d015      	beq.n	800af02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aed6:	f7ff f913 	bl	800a100 <HAL_GetTick>
 800aeda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aedc:	e00a      	b.n	800aef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aede:	f7ff f90f 	bl	800a100 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e0b1      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aef4:	4b4b      	ldr	r3, [pc, #300]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0ee      	beq.n	800aede <HAL_RCC_OscConfig+0x37e>
 800af00:	e014      	b.n	800af2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af02:	f7ff f8fd 	bl	800a100 <HAL_GetTick>
 800af06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af08:	e00a      	b.n	800af20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af0a:	f7ff f8f9 	bl	800a100 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	f241 3288 	movw	r2, #5000	; 0x1388
 800af18:	4293      	cmp	r3, r2
 800af1a:	d901      	bls.n	800af20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e09b      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af20:	4b40      	ldr	r3, [pc, #256]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1ee      	bne.n	800af0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d105      	bne.n	800af3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af32:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	4a3b      	ldr	r2, [pc, #236]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 8087 	beq.w	800b056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af48:	4b36      	ldr	r3, [pc, #216]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f003 030c 	and.w	r3, r3, #12
 800af50:	2b08      	cmp	r3, #8
 800af52:	d061      	beq.n	800b018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d146      	bne.n	800afea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af5c:	4b33      	ldr	r3, [pc, #204]	; (800b02c <HAL_RCC_OscConfig+0x4cc>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af62:	f7ff f8cd 	bl	800a100 <HAL_GetTick>
 800af66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af68:	e008      	b.n	800af7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af6a:	f7ff f8c9 	bl	800a100 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2b02      	cmp	r3, #2
 800af76:	d901      	bls.n	800af7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e06d      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af7c:	4b29      	ldr	r3, [pc, #164]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1f0      	bne.n	800af6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af90:	d108      	bne.n	800afa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af92:	4b24      	ldr	r3, [pc, #144]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	4921      	ldr	r1, [pc, #132]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800afa4:	4b1f      	ldr	r3, [pc, #124]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a19      	ldr	r1, [r3, #32]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	430b      	orrs	r3, r1
 800afb6:	491b      	ldr	r1, [pc, #108]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afbc:	4b1b      	ldr	r3, [pc, #108]	; (800b02c <HAL_RCC_OscConfig+0x4cc>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afc2:	f7ff f89d 	bl	800a100 <HAL_GetTick>
 800afc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afc8:	e008      	b.n	800afdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afca:	f7ff f899 	bl	800a100 <HAL_GetTick>
 800afce:	4602      	mov	r2, r0
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d901      	bls.n	800afdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e03d      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afdc:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0f0      	beq.n	800afca <HAL_RCC_OscConfig+0x46a>
 800afe8:	e035      	b.n	800b056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afea:	4b10      	ldr	r3, [pc, #64]	; (800b02c <HAL_RCC_OscConfig+0x4cc>)
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aff0:	f7ff f886 	bl	800a100 <HAL_GetTick>
 800aff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aff6:	e008      	b.n	800b00a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aff8:	f7ff f882 	bl	800a100 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d901      	bls.n	800b00a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e026      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b00a:	4b06      	ldr	r3, [pc, #24]	; (800b024 <HAL_RCC_OscConfig+0x4c4>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f0      	bne.n	800aff8 <HAL_RCC_OscConfig+0x498>
 800b016:	e01e      	b.n	800b056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d107      	bne.n	800b030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e019      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
 800b024:	40021000 	.word	0x40021000
 800b028:	40007000 	.word	0x40007000
 800b02c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b030:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <HAL_RCC_OscConfig+0x500>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	429a      	cmp	r2, r3
 800b042:	d106      	bne.n	800b052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b04e:	429a      	cmp	r2, r3
 800b050:	d001      	beq.n	800b056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40021000 	.word	0x40021000

0800b064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e0d0      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b078:	4b6a      	ldr	r3, [pc, #424]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	d910      	bls.n	800b0a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b086:	4b67      	ldr	r3, [pc, #412]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f023 0207 	bic.w	r2, r3, #7
 800b08e:	4965      	ldr	r1, [pc, #404]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	4313      	orrs	r3, r2
 800b094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b096:	4b63      	ldr	r3, [pc, #396]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d001      	beq.n	800b0a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e0b8      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d020      	beq.n	800b0f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d005      	beq.n	800b0cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0c0:	4b59      	ldr	r3, [pc, #356]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4a58      	ldr	r2, [pc, #352]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0308 	and.w	r3, r3, #8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b0d8:	4b53      	ldr	r3, [pc, #332]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	4a52      	ldr	r2, [pc, #328]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b0e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0e4:	4b50      	ldr	r3, [pc, #320]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	494d      	ldr	r1, [pc, #308]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d040      	beq.n	800b184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d107      	bne.n	800b11a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b10a:	4b47      	ldr	r3, [pc, #284]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d115      	bne.n	800b142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e07f      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d107      	bne.n	800b132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b122:	4b41      	ldr	r3, [pc, #260]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d109      	bne.n	800b142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e073      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b132:	4b3d      	ldr	r3, [pc, #244]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e06b      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b142:	4b39      	ldr	r3, [pc, #228]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f023 0203 	bic.w	r2, r3, #3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4936      	ldr	r1, [pc, #216]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b150:	4313      	orrs	r3, r2
 800b152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b154:	f7fe ffd4 	bl	800a100 <HAL_GetTick>
 800b158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b15a:	e00a      	b.n	800b172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b15c:	f7fe ffd0 	bl	800a100 <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d901      	bls.n	800b172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e053      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b172:	4b2d      	ldr	r3, [pc, #180]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f003 020c 	and.w	r2, r3, #12
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	429a      	cmp	r2, r3
 800b182:	d1eb      	bne.n	800b15c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b184:	4b27      	ldr	r3, [pc, #156]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0307 	and.w	r3, r3, #7
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d210      	bcs.n	800b1b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b192:	4b24      	ldr	r3, [pc, #144]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f023 0207 	bic.w	r2, r3, #7
 800b19a:	4922      	ldr	r1, [pc, #136]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1a2:	4b20      	ldr	r3, [pc, #128]	; (800b224 <HAL_RCC_ClockConfig+0x1c0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d001      	beq.n	800b1b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e032      	b.n	800b21a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d008      	beq.n	800b1d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	4916      	ldr	r1, [pc, #88]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0308 	and.w	r3, r3, #8
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d009      	beq.n	800b1f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	490e      	ldr	r1, [pc, #56]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b1f2:	f000 f821 	bl	800b238 <HAL_RCC_GetSysClockFreq>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <HAL_RCC_ClockConfig+0x1c4>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	091b      	lsrs	r3, r3, #4
 800b1fe:	f003 030f 	and.w	r3, r3, #15
 800b202:	490a      	ldr	r1, [pc, #40]	; (800b22c <HAL_RCC_ClockConfig+0x1c8>)
 800b204:	5ccb      	ldrb	r3, [r1, r3]
 800b206:	fa22 f303 	lsr.w	r3, r2, r3
 800b20a:	4a09      	ldr	r2, [pc, #36]	; (800b230 <HAL_RCC_ClockConfig+0x1cc>)
 800b20c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b20e:	4b09      	ldr	r3, [pc, #36]	; (800b234 <HAL_RCC_ClockConfig+0x1d0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe ff32 	bl	800a07c <HAL_InitTick>

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40022000 	.word	0x40022000
 800b228:	40021000 	.word	0x40021000
 800b22c:	0800dbcc 	.word	0x0800dbcc
 800b230:	20000030 	.word	0x20000030
 800b234:	20000034 	.word	0x20000034

0800b238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	2300      	movs	r3, #0
 800b244:	60bb      	str	r3, [r7, #8]
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
 800b24a:	2300      	movs	r3, #0
 800b24c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b252:	4b1e      	ldr	r3, [pc, #120]	; (800b2cc <HAL_RCC_GetSysClockFreq+0x94>)
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f003 030c 	and.w	r3, r3, #12
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d002      	beq.n	800b268 <HAL_RCC_GetSysClockFreq+0x30>
 800b262:	2b08      	cmp	r3, #8
 800b264:	d003      	beq.n	800b26e <HAL_RCC_GetSysClockFreq+0x36>
 800b266:	e027      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b268:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b26a:	613b      	str	r3, [r7, #16]
      break;
 800b26c:	e027      	b.n	800b2be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	0c9b      	lsrs	r3, r3, #18
 800b272:	f003 030f 	and.w	r3, r3, #15
 800b276:	4a17      	ldr	r2, [pc, #92]	; (800b2d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b278:	5cd3      	ldrb	r3, [r2, r3]
 800b27a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d010      	beq.n	800b2a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b286:	4b11      	ldr	r3, [pc, #68]	; (800b2cc <HAL_RCC_GetSysClockFreq+0x94>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	0c5b      	lsrs	r3, r3, #17
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b292:	5cd3      	ldrb	r3, [r2, r3]
 800b294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a0d      	ldr	r2, [pc, #52]	; (800b2d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b29a:	fb03 f202 	mul.w	r2, r3, r2
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a4:	617b      	str	r3, [r7, #20]
 800b2a6:	e004      	b.n	800b2b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a0c      	ldr	r2, [pc, #48]	; (800b2dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800b2ac:	fb02 f303 	mul.w	r3, r2, r3
 800b2b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	613b      	str	r3, [r7, #16]
      break;
 800b2b6:	e002      	b.n	800b2be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b2ba:	613b      	str	r3, [r7, #16]
      break;
 800b2bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2be:	693b      	ldr	r3, [r7, #16]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	371c      	adds	r7, #28
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bc80      	pop	{r7}
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	40021000 	.word	0x40021000
 800b2d0:	007a1200 	.word	0x007a1200
 800b2d4:	0800dbe4 	.word	0x0800dbe4
 800b2d8:	0800dbf4 	.word	0x0800dbf4
 800b2dc:	003d0900 	.word	0x003d0900

0800b2e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr
 800b2f0:	20000030 	.word	0x20000030

0800b2f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2f8:	f7ff fff2 	bl	800b2e0 <HAL_RCC_GetHCLKFreq>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	0a1b      	lsrs	r3, r3, #8
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	4903      	ldr	r1, [pc, #12]	; (800b318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b30a:	5ccb      	ldrb	r3, [r1, r3]
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b310:	4618      	mov	r0, r3
 800b312:	bd80      	pop	{r7, pc}
 800b314:	40021000 	.word	0x40021000
 800b318:	0800dbdc 	.word	0x0800dbdc

0800b31c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b320:	f7ff ffde 	bl	800b2e0 <HAL_RCC_GetHCLKFreq>
 800b324:	4602      	mov	r2, r0
 800b326:	4b05      	ldr	r3, [pc, #20]	; (800b33c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	0adb      	lsrs	r3, r3, #11
 800b32c:	f003 0307 	and.w	r3, r3, #7
 800b330:	4903      	ldr	r1, [pc, #12]	; (800b340 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b332:	5ccb      	ldrb	r3, [r1, r3]
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b338:	4618      	mov	r0, r3
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	40021000 	.word	0x40021000
 800b340:	0800dbdc 	.word	0x0800dbdc

0800b344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <RCC_Delay+0x34>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <RCC_Delay+0x38>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	0a5b      	lsrs	r3, r3, #9
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	fb02 f303 	mul.w	r3, r2, r3
 800b35e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b360:	bf00      	nop
  }
  while (Delay --);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	60fa      	str	r2, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1f9      	bne.n	800b360 <RCC_Delay+0x1c>
}
 800b36c:	bf00      	nop
 800b36e:	bf00      	nop
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	bc80      	pop	{r7}
 800b376:	4770      	bx	lr
 800b378:	20000030 	.word	0x20000030
 800b37c:	10624dd3 	.word	0x10624dd3

0800b380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e042      	b.n	800b418 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7fe fc72 	bl	8009c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2224      	movs	r2, #36	; 0x24
 800b3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fe57 	bl	800c078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	691a      	ldr	r2, [r3, #16]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	695a      	ldr	r2, [r3, #20]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68da      	ldr	r2, [r3, #12]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2220      	movs	r2, #32
 800b404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b430:	2300      	movs	r3, #0
 800b432:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b20      	cmp	r3, #32
 800b43e:	d16d      	bne.n	800b51c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <HAL_UART_Transmit+0x2c>
 800b446:	88fb      	ldrh	r3, [r7, #6]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e066      	b.n	800b51e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2221      	movs	r2, #33	; 0x21
 800b45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b45e:	f7fe fe4f 	bl	800a100 <HAL_GetTick>
 800b462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	88fa      	ldrh	r2, [r7, #6]
 800b468:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	88fa      	ldrh	r2, [r7, #6]
 800b46e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b478:	d108      	bne.n	800b48c <HAL_UART_Transmit+0x6c>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d104      	bne.n	800b48c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	61bb      	str	r3, [r7, #24]
 800b48a:	e003      	b.n	800b494 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b490:	2300      	movs	r3, #0
 800b492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b494:	e02a      	b.n	800b4ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2200      	movs	r2, #0
 800b49e:	2180      	movs	r1, #128	; 0x80
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f000 fba6 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e036      	b.n	800b51e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10b      	bne.n	800b4ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	61bb      	str	r3, [r7, #24]
 800b4cc:	e007      	b.n	800b4de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1cf      	bne.n	800b496 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	2140      	movs	r1, #64	; 0x40
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fb76 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e006      	b.n	800b51e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2220      	movs	r2, #32
 800b514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	e000      	b.n	800b51e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b51c:	2302      	movs	r3, #2
  }
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b08a      	sub	sp, #40	; 0x28
 800b52a:	af02      	add	r7, sp, #8
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	603b      	str	r3, [r7, #0]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b20      	cmp	r3, #32
 800b544:	d17c      	bne.n	800b640 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <HAL_UART_Receive+0x2c>
 800b54c:	88fb      	ldrh	r3, [r7, #6]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e075      	b.n	800b642 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2222      	movs	r2, #34	; 0x22
 800b560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b56a:	f7fe fdc9 	bl	800a100 <HAL_GetTick>
 800b56e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	88fa      	ldrh	r2, [r7, #6]
 800b574:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	88fa      	ldrh	r2, [r7, #6]
 800b57a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b584:	d108      	bne.n	800b598 <HAL_UART_Receive+0x72>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d104      	bne.n	800b598 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	61bb      	str	r3, [r7, #24]
 800b596:	e003      	b.n	800b5a0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b5a0:	e043      	b.n	800b62a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2120      	movs	r1, #32
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fb20 	bl	800bbf2 <UART_WaitOnFlagUntilTimeout>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e042      	b.n	800b642 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10c      	bne.n	800b5dc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	61bb      	str	r3, [r7, #24]
 800b5da:	e01f      	b.n	800b61c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e4:	d007      	beq.n	800b5f6 <HAL_UART_Receive+0xd0>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <HAL_UART_Receive+0xde>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e008      	b.n	800b616 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b610:	b2da      	uxtb	r2, r3
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3301      	adds	r3, #1
 800b61a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b620:	b29b      	uxth	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1b6      	bne.n	800b5a2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2220      	movs	r2, #32
 800b638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	e000      	b.n	800b642 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b640:	2302      	movs	r3, #2
  }
}
 800b642:	4618      	mov	r0, r3
 800b644:	3720      	adds	r7, #32
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	4613      	mov	r3, r2
 800b656:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b20      	cmp	r3, #32
 800b662:	d112      	bne.n	800b68a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <HAL_UART_Receive_IT+0x26>
 800b66a:	88fb      	ldrh	r3, [r7, #6]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e00b      	b.n	800b68c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b67a:	88fb      	ldrh	r3, [r7, #6]
 800b67c:	461a      	mov	r2, r3
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f000 fb24 	bl	800bcce <UART_Start_Receive_IT>
 800b686:	4603      	mov	r3, r0
 800b688:	e000      	b.n	800b68c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b68a:	2302      	movs	r3, #2
  }
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b0ba      	sub	sp, #232	; 0xe8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b6d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10f      	bne.n	800b6fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <HAL_UART_IRQHandler+0x66>
 800b6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ea:	f003 0320 	and.w	r3, r3, #32
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fc01 	bl	800befa <UART_Receive_IT>
      return;
 800b6f8:	e25b      	b.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 80de 	beq.w	800b8c0 <HAL_UART_IRQHandler+0x22c>
 800b704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d106      	bne.n	800b71e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80d1 	beq.w	800b8c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00b      	beq.n	800b742 <HAL_UART_IRQHandler+0xae>
 800b72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b73a:	f043 0201 	orr.w	r2, r3, #1
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b746:	f003 0304 	and.w	r3, r3, #4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00b      	beq.n	800b766 <HAL_UART_IRQHandler+0xd2>
 800b74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75e:	f043 0202 	orr.w	r2, r3, #2
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <HAL_UART_IRQHandler+0xf6>
 800b772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b782:	f043 0204 	orr.w	r2, r3, #4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b78e:	f003 0308 	and.w	r3, r3, #8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d011      	beq.n	800b7ba <HAL_UART_IRQHandler+0x126>
 800b796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b79a:	f003 0320 	and.w	r3, r3, #32
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d105      	bne.n	800b7ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	f043 0208 	orr.w	r2, r3, #8
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 81f2 	beq.w	800bba8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c8:	f003 0320 	and.w	r3, r3, #32
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d008      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x14e>
 800b7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fb8c 	bl	800befa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bf14      	ite	ne
 800b7f0:	2301      	movne	r3, #1
 800b7f2:	2300      	moveq	r3, #0
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	f003 0308 	and.w	r3, r3, #8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d103      	bne.n	800b80e <HAL_UART_IRQHandler+0x17a>
 800b806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d04f      	beq.n	800b8ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fa96 	bl	800bd40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d041      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3314      	adds	r3, #20
 800b828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b83c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3314      	adds	r3, #20
 800b84a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b84e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b85a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1d9      	bne.n	800b822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d013      	beq.n	800b89e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	4a7e      	ldr	r2, [pc, #504]	; (800ba74 <HAL_UART_IRQHandler+0x3e0>)
 800b87c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fdcc 	bl	800a420 <HAL_DMA_Abort_IT>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d016      	beq.n	800b8bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b89c:	e00e      	b.n	800b8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f993 	bl	800bbca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a4:	e00a      	b.n	800b8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f98f 	bl	800bbca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ac:	e006      	b.n	800b8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f98b 	bl	800bbca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b8ba:	e175      	b.n	800bba8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	bf00      	nop
    return;
 800b8be:	e173      	b.n	800bba8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	f040 814f 	bne.w	800bb68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ce:	f003 0310 	and.w	r3, r3, #16
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 8148 	beq.w	800bb68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8dc:	f003 0310 	and.w	r3, r3, #16
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8141 	beq.w	800bb68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60bb      	str	r3, [r7, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	60bb      	str	r3, [r7, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	60bb      	str	r3, [r7, #8]
 800b8fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 80b6 	beq.w	800ba78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8145 	beq.w	800bbac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b92a:	429a      	cmp	r2, r3
 800b92c:	f080 813e 	bcs.w	800bbac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	2b20      	cmp	r3, #32
 800b940:	f000 8088 	beq.w	800ba54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	330c      	adds	r3, #12
 800b94a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b95a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b95e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	330c      	adds	r3, #12
 800b96c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b970:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b97c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1d9      	bne.n	800b944 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3314      	adds	r3, #20
 800b996:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3314      	adds	r3, #20
 800b9b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9c0:	e841 2300 	strex	r3, r2, [r1]
 800b9c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1e1      	bne.n	800b990 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3314      	adds	r3, #20
 800b9ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e3      	bne.n	800b9cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	330c      	adds	r3, #12
 800ba18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba24:	f023 0310 	bic.w	r3, r3, #16
 800ba28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba36:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba38:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e3      	bne.n	800ba12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fcab 	bl	800a3aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f8b6 	bl	800bbdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba70:	e09c      	b.n	800bbac <HAL_UART_IRQHandler+0x518>
 800ba72:	bf00      	nop
 800ba74:	0800be05 	.word	0x0800be05
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 808e 	beq.w	800bbb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ba94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 8089 	beq.w	800bbb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	330c      	adds	r3, #12
 800baa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800baae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	330c      	adds	r3, #12
 800babe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bac2:	647a      	str	r2, [r7, #68]	; 0x44
 800bac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e3      	bne.n	800ba9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3314      	adds	r3, #20
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	623b      	str	r3, [r7, #32]
   return(result);
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	f023 0301 	bic.w	r3, r3, #1
 800baec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3314      	adds	r3, #20
 800baf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bafa:	633a      	str	r2, [r7, #48]	; 0x30
 800bafc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e3      	bne.n	800bad6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2220      	movs	r2, #32
 800bb12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	330c      	adds	r3, #12
 800bb22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	e853 3f00 	ldrex	r3, [r3]
 800bb2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0310 	bic.w	r3, r3, #16
 800bb32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	330c      	adds	r3, #12
 800bb3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb40:	61fa      	str	r2, [r7, #28]
 800bb42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	69b9      	ldr	r1, [r7, #24]
 800bb46:	69fa      	ldr	r2, [r7, #28]
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e3      	bne.n	800bb1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f83b 	bl	800bbdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb66:	e023      	b.n	800bbb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d009      	beq.n	800bb88 <HAL_UART_IRQHandler+0x4f4>
 800bb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f953 	bl	800be2c <UART_Transmit_IT>
    return;
 800bb86:	e014      	b.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00e      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d008      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f992 	bl	800beca <UART_EndTransmit_IT>
    return;
 800bba6:	e004      	b.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bba8:	bf00      	nop
 800bbaa:	e002      	b.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bbac:	bf00      	nop
 800bbae:	e000      	b.n	800bbb2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bbb0:	bf00      	nop
  }
}
 800bbb2:	37e8      	adds	r7, #232	; 0xe8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bc80      	pop	{r7}
 800bbc8:	4770      	bx	lr

0800bbca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bc80      	pop	{r7}
 800bbda:	4770      	bx	lr

0800bbdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bc80      	pop	{r7}
 800bbf0:	4770      	bx	lr

0800bbf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b090      	sub	sp, #64	; 0x40
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	603b      	str	r3, [r7, #0]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc02:	e050      	b.n	800bca6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d04c      	beq.n	800bca6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bc0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc12:	f7fe fa75 	bl	800a100 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d241      	bcs.n	800bca6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	330c      	adds	r3, #12
 800bc28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	330c      	adds	r3, #12
 800bc40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc42:	637a      	str	r2, [r7, #52]	; 0x34
 800bc44:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e5      	bne.n	800bc22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	e853 3f00 	ldrex	r3, [r3]
 800bc64:	613b      	str	r3, [r7, #16]
   return(result);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f023 0301 	bic.w	r3, r3, #1
 800bc6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3314      	adds	r3, #20
 800bc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc76:	623a      	str	r2, [r7, #32]
 800bc78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	69f9      	ldr	r1, [r7, #28]
 800bc7c:	6a3a      	ldr	r2, [r7, #32]
 800bc7e:	e841 2300 	strex	r3, r2, [r1]
 800bc82:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e5      	bne.n	800bc56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2220      	movs	r2, #32
 800bc96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e00f      	b.n	800bcc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	4013      	ands	r3, r2
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	bf0c      	ite	eq
 800bcb6:	2301      	moveq	r3, #1
 800bcb8:	2300      	movne	r3, #0
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d09f      	beq.n	800bc04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3740      	adds	r7, #64	; 0x40
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	88fa      	ldrh	r2, [r7, #6]
 800bce6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	88fa      	ldrh	r2, [r7, #6]
 800bcec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2222      	movs	r2, #34	; 0x22
 800bcf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	695a      	ldr	r2, [r3, #20]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f042 0220 	orr.w	r2, r2, #32
 800bd32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bc80      	pop	{r7}
 800bd3e:	4770      	bx	lr

0800bd40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b095      	sub	sp, #84	; 0x54
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	330c      	adds	r3, #12
 800bd4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	e853 3f00 	ldrex	r3, [r3]
 800bd56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	330c      	adds	r3, #12
 800bd66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd68:	643a      	str	r2, [r7, #64]	; 0x40
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e5      	bne.n	800bd48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3314      	adds	r3, #20
 800bd82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3314      	adds	r3, #20
 800bd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda4:	e841 2300 	strex	r3, r2, [r1]
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e5      	bne.n	800bd7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d119      	bne.n	800bdec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0310 	bic.w	r3, r3, #16
 800bdce:	647b      	str	r3, [r7, #68]	; 0x44
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	330c      	adds	r3, #12
 800bdd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdd8:	61ba      	str	r2, [r7, #24]
 800bdda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	6979      	ldr	r1, [r7, #20]
 800bdde:	69ba      	ldr	r2, [r7, #24]
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	613b      	str	r3, [r7, #16]
   return(result);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e5      	bne.n	800bdb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdfa:	bf00      	nop
 800bdfc:	3754      	adds	r7, #84	; 0x54
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bc80      	pop	{r7}
 800be02:	4770      	bx	lr

0800be04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7ff fed3 	bl	800bbca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be24:	bf00      	nop
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b21      	cmp	r3, #33	; 0x21
 800be3e:	d13e      	bne.n	800bebe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be48:	d114      	bne.n	800be74 <UART_Transmit_IT+0x48>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d110      	bne.n	800be74 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	461a      	mov	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	1c9a      	adds	r2, r3, #2
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	621a      	str	r2, [r3, #32]
 800be72:	e008      	b.n	800be86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a1b      	ldr	r3, [r3, #32]
 800be78:	1c59      	adds	r1, r3, #1
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6211      	str	r1, [r2, #32]
 800be7e:	781a      	ldrb	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29b      	uxth	r3, r3
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	4619      	mov	r1, r3
 800be94:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10f      	bne.n	800beba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68da      	ldr	r2, [r3, #12]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bea8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	e000      	b.n	800bec0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bebe:	2302      	movs	r3, #2
  }
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bc80      	pop	{r7}
 800bec8:	4770      	bx	lr

0800beca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fe64 	bl	800bbb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b08c      	sub	sp, #48	; 0x30
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b22      	cmp	r3, #34	; 0x22
 800bf0c:	f040 80ae 	bne.w	800c06c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf18:	d117      	bne.n	800bf4a <UART_Receive_IT+0x50>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d113      	bne.n	800bf4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	1c9a      	adds	r2, r3, #2
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	629a      	str	r2, [r3, #40]	; 0x28
 800bf48:	e026      	b.n	800bf98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf5c:	d007      	beq.n	800bf6e <UART_Receive_IT+0x74>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <UART_Receive_IT+0x82>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	e008      	b.n	800bf8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d15d      	bne.n	800c068 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68da      	ldr	r2, [r3, #12]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f022 0220 	bic.w	r2, r2, #32
 800bfba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695a      	ldr	r2, [r3, #20]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0201 	bic.w	r2, r2, #1
 800bfda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d135      	bne.n	800c05e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	613b      	str	r3, [r7, #16]
   return(result);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f023 0310 	bic.w	r3, r3, #16
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	330c      	adds	r3, #12
 800c016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c018:	623a      	str	r2, [r7, #32]
 800c01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	69f9      	ldr	r1, [r7, #28]
 800c01e:	6a3a      	ldr	r2, [r7, #32]
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	61bb      	str	r3, [r7, #24]
   return(result);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e5      	bne.n	800bff8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b10      	cmp	r3, #16
 800c038:	d10a      	bne.n	800c050 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60fb      	str	r3, [r7, #12]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff fdc0 	bl	800bbdc <HAL_UARTEx_RxEventCallback>
 800c05c:	e002      	b.n	800c064 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7fc f942 	bl	80082e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	e002      	b.n	800c06e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	e000      	b.n	800c06e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c06c:	2302      	movs	r3, #2
  }
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3730      	adds	r7, #48	; 0x30
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
	...

0800c078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c0b2:	f023 030c 	bic.w	r3, r3, #12
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	699a      	ldr	r2, [r3, #24]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a2c      	ldr	r2, [pc, #176]	; (800c18c <UART_SetConfig+0x114>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d103      	bne.n	800c0e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c0e0:	f7ff f91c 	bl	800b31c <HAL_RCC_GetPCLK2Freq>
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	e002      	b.n	800c0ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c0e8:	f7ff f904 	bl	800b2f4 <HAL_RCC_GetPCLK1Freq>
 800c0ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009a      	lsls	r2, r3, #2
 800c0f8:	441a      	add	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	fbb2 f3f3 	udiv	r3, r2, r3
 800c104:	4a22      	ldr	r2, [pc, #136]	; (800c190 <UART_SetConfig+0x118>)
 800c106:	fba2 2303 	umull	r2, r3, r2, r3
 800c10a:	095b      	lsrs	r3, r3, #5
 800c10c:	0119      	lsls	r1, r3, #4
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009a      	lsls	r2, r3, #2
 800c118:	441a      	add	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	fbb2 f2f3 	udiv	r2, r2, r3
 800c124:	4b1a      	ldr	r3, [pc, #104]	; (800c190 <UART_SetConfig+0x118>)
 800c126:	fba3 0302 	umull	r0, r3, r3, r2
 800c12a:	095b      	lsrs	r3, r3, #5
 800c12c:	2064      	movs	r0, #100	; 0x64
 800c12e:	fb00 f303 	mul.w	r3, r0, r3
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	3332      	adds	r3, #50	; 0x32
 800c138:	4a15      	ldr	r2, [pc, #84]	; (800c190 <UART_SetConfig+0x118>)
 800c13a:	fba2 2303 	umull	r2, r3, r2, r3
 800c13e:	095b      	lsrs	r3, r3, #5
 800c140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c144:	4419      	add	r1, r3
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	4613      	mov	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	009a      	lsls	r2, r3, #2
 800c150:	441a      	add	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	fbb2 f2f3 	udiv	r2, r2, r3
 800c15c:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <UART_SetConfig+0x118>)
 800c15e:	fba3 0302 	umull	r0, r3, r3, r2
 800c162:	095b      	lsrs	r3, r3, #5
 800c164:	2064      	movs	r0, #100	; 0x64
 800c166:	fb00 f303 	mul.w	r3, r0, r3
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	3332      	adds	r3, #50	; 0x32
 800c170:	4a07      	ldr	r2, [pc, #28]	; (800c190 <UART_SetConfig+0x118>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	f003 020f 	and.w	r2, r3, #15
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	440a      	add	r2, r1
 800c182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c184:	bf00      	nop
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	40013800 	.word	0x40013800
 800c190:	51eb851f 	.word	0x51eb851f

0800c194 <std>:
 800c194:	2300      	movs	r3, #0
 800c196:	b510      	push	{r4, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	e9c0 3300 	strd	r3, r3, [r0]
 800c19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1a2:	6083      	str	r3, [r0, #8]
 800c1a4:	8181      	strh	r1, [r0, #12]
 800c1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c1a8:	81c2      	strh	r2, [r0, #14]
 800c1aa:	6183      	str	r3, [r0, #24]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	2208      	movs	r2, #8
 800c1b0:	305c      	adds	r0, #92	; 0x5c
 800c1b2:	f000 f9e5 	bl	800c580 <memset>
 800c1b6:	4b05      	ldr	r3, [pc, #20]	; (800c1cc <std+0x38>)
 800c1b8:	6224      	str	r4, [r4, #32]
 800c1ba:	6263      	str	r3, [r4, #36]	; 0x24
 800c1bc:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <std+0x3c>)
 800c1be:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1c0:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <std+0x40>)
 800c1c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1c4:	4b04      	ldr	r3, [pc, #16]	; (800c1d8 <std+0x44>)
 800c1c6:	6323      	str	r3, [r4, #48]	; 0x30
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0800c3d1 	.word	0x0800c3d1
 800c1d0:	0800c3f3 	.word	0x0800c3f3
 800c1d4:	0800c42b 	.word	0x0800c42b
 800c1d8:	0800c44f 	.word	0x0800c44f

0800c1dc <stdio_exit_handler>:
 800c1dc:	4a02      	ldr	r2, [pc, #8]	; (800c1e8 <stdio_exit_handler+0xc>)
 800c1de:	4903      	ldr	r1, [pc, #12]	; (800c1ec <stdio_exit_handler+0x10>)
 800c1e0:	4803      	ldr	r0, [pc, #12]	; (800c1f0 <stdio_exit_handler+0x14>)
 800c1e2:	f000 b869 	b.w	800c2b8 <_fwalk_sglue>
 800c1e6:	bf00      	nop
 800c1e8:	2000003c 	.word	0x2000003c
 800c1ec:	0800cf29 	.word	0x0800cf29
 800c1f0:	20000048 	.word	0x20000048

0800c1f4 <cleanup_stdio>:
 800c1f4:	6841      	ldr	r1, [r0, #4]
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <cleanup_stdio+0x34>)
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	d001      	beq.n	800c204 <cleanup_stdio+0x10>
 800c200:	f000 fe92 	bl	800cf28 <_fflush_r>
 800c204:	68a1      	ldr	r1, [r4, #8]
 800c206:	4b09      	ldr	r3, [pc, #36]	; (800c22c <cleanup_stdio+0x38>)
 800c208:	4299      	cmp	r1, r3
 800c20a:	d002      	beq.n	800c212 <cleanup_stdio+0x1e>
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fe8b 	bl	800cf28 <_fflush_r>
 800c212:	68e1      	ldr	r1, [r4, #12]
 800c214:	4b06      	ldr	r3, [pc, #24]	; (800c230 <cleanup_stdio+0x3c>)
 800c216:	4299      	cmp	r1, r3
 800c218:	d004      	beq.n	800c224 <cleanup_stdio+0x30>
 800c21a:	4620      	mov	r0, r4
 800c21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c220:	f000 be82 	b.w	800cf28 <_fflush_r>
 800c224:	bd10      	pop	{r4, pc}
 800c226:	bf00      	nop
 800c228:	20000e18 	.word	0x20000e18
 800c22c:	20000e80 	.word	0x20000e80
 800c230:	20000ee8 	.word	0x20000ee8

0800c234 <global_stdio_init.part.0>:
 800c234:	b510      	push	{r4, lr}
 800c236:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <global_stdio_init.part.0+0x30>)
 800c238:	4c0b      	ldr	r4, [pc, #44]	; (800c268 <global_stdio_init.part.0+0x34>)
 800c23a:	4a0c      	ldr	r2, [pc, #48]	; (800c26c <global_stdio_init.part.0+0x38>)
 800c23c:	4620      	mov	r0, r4
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	2104      	movs	r1, #4
 800c242:	2200      	movs	r2, #0
 800c244:	f7ff ffa6 	bl	800c194 <std>
 800c248:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c24c:	2201      	movs	r2, #1
 800c24e:	2109      	movs	r1, #9
 800c250:	f7ff ffa0 	bl	800c194 <std>
 800c254:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c258:	2202      	movs	r2, #2
 800c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c25e:	2112      	movs	r1, #18
 800c260:	f7ff bf98 	b.w	800c194 <std>
 800c264:	20000f50 	.word	0x20000f50
 800c268:	20000e18 	.word	0x20000e18
 800c26c:	0800c1dd 	.word	0x0800c1dd

0800c270 <__sfp_lock_acquire>:
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <__sfp_lock_acquire+0x8>)
 800c272:	f000 b9fd 	b.w	800c670 <__retarget_lock_acquire_recursive>
 800c276:	bf00      	nop
 800c278:	20000f59 	.word	0x20000f59

0800c27c <__sfp_lock_release>:
 800c27c:	4801      	ldr	r0, [pc, #4]	; (800c284 <__sfp_lock_release+0x8>)
 800c27e:	f000 b9f8 	b.w	800c672 <__retarget_lock_release_recursive>
 800c282:	bf00      	nop
 800c284:	20000f59 	.word	0x20000f59

0800c288 <__sinit>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	4604      	mov	r4, r0
 800c28c:	f7ff fff0 	bl	800c270 <__sfp_lock_acquire>
 800c290:	6a23      	ldr	r3, [r4, #32]
 800c292:	b11b      	cbz	r3, 800c29c <__sinit+0x14>
 800c294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c298:	f7ff bff0 	b.w	800c27c <__sfp_lock_release>
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <__sinit+0x28>)
 800c29e:	6223      	str	r3, [r4, #32]
 800c2a0:	4b04      	ldr	r3, [pc, #16]	; (800c2b4 <__sinit+0x2c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1f5      	bne.n	800c294 <__sinit+0xc>
 800c2a8:	f7ff ffc4 	bl	800c234 <global_stdio_init.part.0>
 800c2ac:	e7f2      	b.n	800c294 <__sinit+0xc>
 800c2ae:	bf00      	nop
 800c2b0:	0800c1f5 	.word	0x0800c1f5
 800c2b4:	20000f50 	.word	0x20000f50

0800c2b8 <_fwalk_sglue>:
 800c2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2bc:	4607      	mov	r7, r0
 800c2be:	4688      	mov	r8, r1
 800c2c0:	4614      	mov	r4, r2
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2c8:	f1b9 0901 	subs.w	r9, r9, #1
 800c2cc:	d505      	bpl.n	800c2da <_fwalk_sglue+0x22>
 800c2ce:	6824      	ldr	r4, [r4, #0]
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d1f7      	bne.n	800c2c4 <_fwalk_sglue+0xc>
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2da:	89ab      	ldrh	r3, [r5, #12]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d907      	bls.n	800c2f0 <_fwalk_sglue+0x38>
 800c2e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	d003      	beq.n	800c2f0 <_fwalk_sglue+0x38>
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	47c0      	blx	r8
 800c2ee:	4306      	orrs	r6, r0
 800c2f0:	3568      	adds	r5, #104	; 0x68
 800c2f2:	e7e9      	b.n	800c2c8 <_fwalk_sglue+0x10>

0800c2f4 <iprintf>:
 800c2f4:	b40f      	push	{r0, r1, r2, r3}
 800c2f6:	b507      	push	{r0, r1, r2, lr}
 800c2f8:	4906      	ldr	r1, [pc, #24]	; (800c314 <iprintf+0x20>)
 800c2fa:	ab04      	add	r3, sp, #16
 800c2fc:	6808      	ldr	r0, [r1, #0]
 800c2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c302:	6881      	ldr	r1, [r0, #8]
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	f000 fadf 	bl	800c8c8 <_vfiprintf_r>
 800c30a:	b003      	add	sp, #12
 800c30c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c310:	b004      	add	sp, #16
 800c312:	4770      	bx	lr
 800c314:	20000094 	.word	0x20000094

0800c318 <_puts_r>:
 800c318:	6a03      	ldr	r3, [r0, #32]
 800c31a:	b570      	push	{r4, r5, r6, lr}
 800c31c:	4605      	mov	r5, r0
 800c31e:	460e      	mov	r6, r1
 800c320:	6884      	ldr	r4, [r0, #8]
 800c322:	b90b      	cbnz	r3, 800c328 <_puts_r+0x10>
 800c324:	f7ff ffb0 	bl	800c288 <__sinit>
 800c328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c32a:	07db      	lsls	r3, r3, #31
 800c32c:	d405      	bmi.n	800c33a <_puts_r+0x22>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	0598      	lsls	r0, r3, #22
 800c332:	d402      	bmi.n	800c33a <_puts_r+0x22>
 800c334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c336:	f000 f99b 	bl	800c670 <__retarget_lock_acquire_recursive>
 800c33a:	89a3      	ldrh	r3, [r4, #12]
 800c33c:	0719      	lsls	r1, r3, #28
 800c33e:	d513      	bpl.n	800c368 <_puts_r+0x50>
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	b18b      	cbz	r3, 800c368 <_puts_r+0x50>
 800c344:	3e01      	subs	r6, #1
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c34c:	3b01      	subs	r3, #1
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	b9e9      	cbnz	r1, 800c38e <_puts_r+0x76>
 800c352:	2b00      	cmp	r3, #0
 800c354:	da2e      	bge.n	800c3b4 <_puts_r+0x9c>
 800c356:	4622      	mov	r2, r4
 800c358:	210a      	movs	r1, #10
 800c35a:	4628      	mov	r0, r5
 800c35c:	f000 f87b 	bl	800c456 <__swbuf_r>
 800c360:	3001      	adds	r0, #1
 800c362:	d007      	beq.n	800c374 <_puts_r+0x5c>
 800c364:	250a      	movs	r5, #10
 800c366:	e007      	b.n	800c378 <_puts_r+0x60>
 800c368:	4621      	mov	r1, r4
 800c36a:	4628      	mov	r0, r5
 800c36c:	f000 f8b0 	bl	800c4d0 <__swsetup_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	d0e7      	beq.n	800c344 <_puts_r+0x2c>
 800c374:	f04f 35ff 	mov.w	r5, #4294967295
 800c378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c37a:	07da      	lsls	r2, r3, #31
 800c37c:	d405      	bmi.n	800c38a <_puts_r+0x72>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	059b      	lsls	r3, r3, #22
 800c382:	d402      	bmi.n	800c38a <_puts_r+0x72>
 800c384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c386:	f000 f974 	bl	800c672 <__retarget_lock_release_recursive>
 800c38a:	4628      	mov	r0, r5
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da04      	bge.n	800c39c <_puts_r+0x84>
 800c392:	69a2      	ldr	r2, [r4, #24]
 800c394:	429a      	cmp	r2, r3
 800c396:	dc06      	bgt.n	800c3a6 <_puts_r+0x8e>
 800c398:	290a      	cmp	r1, #10
 800c39a:	d004      	beq.n	800c3a6 <_puts_r+0x8e>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	6022      	str	r2, [r4, #0]
 800c3a2:	7019      	strb	r1, [r3, #0]
 800c3a4:	e7cf      	b.n	800c346 <_puts_r+0x2e>
 800c3a6:	4622      	mov	r2, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f000 f854 	bl	800c456 <__swbuf_r>
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	d1c9      	bne.n	800c346 <_puts_r+0x2e>
 800c3b2:	e7df      	b.n	800c374 <_puts_r+0x5c>
 800c3b4:	250a      	movs	r5, #10
 800c3b6:	6823      	ldr	r3, [r4, #0]
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	6022      	str	r2, [r4, #0]
 800c3bc:	701d      	strb	r5, [r3, #0]
 800c3be:	e7db      	b.n	800c378 <_puts_r+0x60>

0800c3c0 <puts>:
 800c3c0:	4b02      	ldr	r3, [pc, #8]	; (800c3cc <puts+0xc>)
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	6818      	ldr	r0, [r3, #0]
 800c3c6:	f7ff bfa7 	b.w	800c318 <_puts_r>
 800c3ca:	bf00      	nop
 800c3cc:	20000094 	.word	0x20000094

0800c3d0 <__sread>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d8:	f000 f8fc 	bl	800c5d4 <_read_r>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	bfab      	itete	ge
 800c3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c3e4:	181b      	addge	r3, r3, r0
 800c3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3ea:	bfac      	ite	ge
 800c3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3ee:	81a3      	strhlt	r3, [r4, #12]
 800c3f0:	bd10      	pop	{r4, pc}

0800c3f2 <__swrite>:
 800c3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f6:	461f      	mov	r7, r3
 800c3f8:	898b      	ldrh	r3, [r1, #12]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	05db      	lsls	r3, r3, #23
 800c3fe:	460c      	mov	r4, r1
 800c400:	4616      	mov	r6, r2
 800c402:	d505      	bpl.n	800c410 <__swrite+0x1e>
 800c404:	2302      	movs	r3, #2
 800c406:	2200      	movs	r2, #0
 800c408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40c:	f000 f8d0 	bl	800c5b0 <_lseek_r>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	4632      	mov	r2, r6
 800c414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	4628      	mov	r0, r5
 800c41c:	463b      	mov	r3, r7
 800c41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c426:	f000 b8e7 	b.w	800c5f8 <_write_r>

0800c42a <__sseek>:
 800c42a:	b510      	push	{r4, lr}
 800c42c:	460c      	mov	r4, r1
 800c42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c432:	f000 f8bd 	bl	800c5b0 <_lseek_r>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	bf15      	itete	ne
 800c43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c446:	81a3      	strheq	r3, [r4, #12]
 800c448:	bf18      	it	ne
 800c44a:	81a3      	strhne	r3, [r4, #12]
 800c44c:	bd10      	pop	{r4, pc}

0800c44e <__sclose>:
 800c44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c452:	f000 b89d 	b.w	800c590 <_close_r>

0800c456 <__swbuf_r>:
 800c456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c458:	460e      	mov	r6, r1
 800c45a:	4614      	mov	r4, r2
 800c45c:	4605      	mov	r5, r0
 800c45e:	b118      	cbz	r0, 800c468 <__swbuf_r+0x12>
 800c460:	6a03      	ldr	r3, [r0, #32]
 800c462:	b90b      	cbnz	r3, 800c468 <__swbuf_r+0x12>
 800c464:	f7ff ff10 	bl	800c288 <__sinit>
 800c468:	69a3      	ldr	r3, [r4, #24]
 800c46a:	60a3      	str	r3, [r4, #8]
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	071a      	lsls	r2, r3, #28
 800c470:	d525      	bpl.n	800c4be <__swbuf_r+0x68>
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	b31b      	cbz	r3, 800c4be <__swbuf_r+0x68>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	6922      	ldr	r2, [r4, #16]
 800c47a:	b2f6      	uxtb	r6, r6
 800c47c:	1a98      	subs	r0, r3, r2
 800c47e:	6963      	ldr	r3, [r4, #20]
 800c480:	4637      	mov	r7, r6
 800c482:	4283      	cmp	r3, r0
 800c484:	dc04      	bgt.n	800c490 <__swbuf_r+0x3a>
 800c486:	4621      	mov	r1, r4
 800c488:	4628      	mov	r0, r5
 800c48a:	f000 fd4d 	bl	800cf28 <_fflush_r>
 800c48e:	b9e0      	cbnz	r0, 800c4ca <__swbuf_r+0x74>
 800c490:	68a3      	ldr	r3, [r4, #8]
 800c492:	3b01      	subs	r3, #1
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	701e      	strb	r6, [r3, #0]
 800c49e:	6962      	ldr	r2, [r4, #20]
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d004      	beq.n	800c4b0 <__swbuf_r+0x5a>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	07db      	lsls	r3, r3, #31
 800c4aa:	d506      	bpl.n	800c4ba <__swbuf_r+0x64>
 800c4ac:	2e0a      	cmp	r6, #10
 800c4ae:	d104      	bne.n	800c4ba <__swbuf_r+0x64>
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 fd38 	bl	800cf28 <_fflush_r>
 800c4b8:	b938      	cbnz	r0, 800c4ca <__swbuf_r+0x74>
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f000 f805 	bl	800c4d0 <__swsetup_r>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d0d5      	beq.n	800c476 <__swbuf_r+0x20>
 800c4ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c4ce:	e7f4      	b.n	800c4ba <__swbuf_r+0x64>

0800c4d0 <__swsetup_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <__swsetup_r+0xac>)
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	6818      	ldr	r0, [r3, #0]
 800c4d8:	460c      	mov	r4, r1
 800c4da:	b118      	cbz	r0, 800c4e4 <__swsetup_r+0x14>
 800c4dc:	6a03      	ldr	r3, [r0, #32]
 800c4de:	b90b      	cbnz	r3, 800c4e4 <__swsetup_r+0x14>
 800c4e0:	f7ff fed2 	bl	800c288 <__sinit>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ea:	0718      	lsls	r0, r3, #28
 800c4ec:	d422      	bmi.n	800c534 <__swsetup_r+0x64>
 800c4ee:	06d9      	lsls	r1, r3, #27
 800c4f0:	d407      	bmi.n	800c502 <__swsetup_r+0x32>
 800c4f2:	2309      	movs	r3, #9
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	e034      	b.n	800c56c <__swsetup_r+0x9c>
 800c502:	0758      	lsls	r0, r3, #29
 800c504:	d512      	bpl.n	800c52c <__swsetup_r+0x5c>
 800c506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c508:	b141      	cbz	r1, 800c51c <__swsetup_r+0x4c>
 800c50a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50e:	4299      	cmp	r1, r3
 800c510:	d002      	beq.n	800c518 <__swsetup_r+0x48>
 800c512:	4628      	mov	r0, r5
 800c514:	f000 f8bc 	bl	800c690 <_free_r>
 800c518:	2300      	movs	r3, #0
 800c51a:	6363      	str	r3, [r4, #52]	; 0x34
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	2300      	movs	r3, #0
 800c526:	6063      	str	r3, [r4, #4]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	6023      	str	r3, [r4, #0]
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f043 0308 	orr.w	r3, r3, #8
 800c532:	81a3      	strh	r3, [r4, #12]
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	b94b      	cbnz	r3, 800c54c <__swsetup_r+0x7c>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c542:	d003      	beq.n	800c54c <__swsetup_r+0x7c>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 fd3b 	bl	800cfc2 <__smakebuf_r>
 800c54c:	89a0      	ldrh	r0, [r4, #12]
 800c54e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c552:	f010 0301 	ands.w	r3, r0, #1
 800c556:	d00a      	beq.n	800c56e <__swsetup_r+0x9e>
 800c558:	2300      	movs	r3, #0
 800c55a:	60a3      	str	r3, [r4, #8]
 800c55c:	6963      	ldr	r3, [r4, #20]
 800c55e:	425b      	negs	r3, r3
 800c560:	61a3      	str	r3, [r4, #24]
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	b943      	cbnz	r3, 800c578 <__swsetup_r+0xa8>
 800c566:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c56a:	d1c4      	bne.n	800c4f6 <__swsetup_r+0x26>
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	0781      	lsls	r1, r0, #30
 800c570:	bf58      	it	pl
 800c572:	6963      	ldrpl	r3, [r4, #20]
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	e7f4      	b.n	800c562 <__swsetup_r+0x92>
 800c578:	2000      	movs	r0, #0
 800c57a:	e7f7      	b.n	800c56c <__swsetup_r+0x9c>
 800c57c:	20000094 	.word	0x20000094

0800c580 <memset>:
 800c580:	4603      	mov	r3, r0
 800c582:	4402      	add	r2, r0
 800c584:	4293      	cmp	r3, r2
 800c586:	d100      	bne.n	800c58a <memset+0xa>
 800c588:	4770      	bx	lr
 800c58a:	f803 1b01 	strb.w	r1, [r3], #1
 800c58e:	e7f9      	b.n	800c584 <memset+0x4>

0800c590 <_close_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	2300      	movs	r3, #0
 800c594:	4d05      	ldr	r5, [pc, #20]	; (800c5ac <_close_r+0x1c>)
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7fd fcbd 	bl	8009f1a <_close>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_close_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_close_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20000f54 	.word	0x20000f54

0800c5b0 <_lseek_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	4d05      	ldr	r5, [pc, #20]	; (800c5d0 <_lseek_r+0x20>)
 800c5bc:	602a      	str	r2, [r5, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f7fd fccf 	bl	8009f62 <_lseek>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_lseek_r+0x1e>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_lseek_r+0x1e>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20000f54 	.word	0x20000f54

0800c5d4 <_read_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	4608      	mov	r0, r1
 800c5da:	4611      	mov	r1, r2
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4d05      	ldr	r5, [pc, #20]	; (800c5f4 <_read_r+0x20>)
 800c5e0:	602a      	str	r2, [r5, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f7fd fc60 	bl	8009ea8 <_read>
 800c5e8:	1c43      	adds	r3, r0, #1
 800c5ea:	d102      	bne.n	800c5f2 <_read_r+0x1e>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	b103      	cbz	r3, 800c5f2 <_read_r+0x1e>
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	20000f54 	.word	0x20000f54

0800c5f8 <_write_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	2200      	movs	r2, #0
 800c602:	4d05      	ldr	r5, [pc, #20]	; (800c618 <_write_r+0x20>)
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f7fd fc6b 	bl	8009ee2 <_write>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_write_r+0x1e>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_write_r+0x1e>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	20000f54 	.word	0x20000f54

0800c61c <__errno>:
 800c61c:	4b01      	ldr	r3, [pc, #4]	; (800c624 <__errno+0x8>)
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20000094 	.word	0x20000094

0800c628 <__libc_init_array>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	2600      	movs	r6, #0
 800c62c:	4d0c      	ldr	r5, [pc, #48]	; (800c660 <__libc_init_array+0x38>)
 800c62e:	4c0d      	ldr	r4, [pc, #52]	; (800c664 <__libc_init_array+0x3c>)
 800c630:	1b64      	subs	r4, r4, r5
 800c632:	10a4      	asrs	r4, r4, #2
 800c634:	42a6      	cmp	r6, r4
 800c636:	d109      	bne.n	800c64c <__libc_init_array+0x24>
 800c638:	f000 fd40 	bl	800d0bc <_init>
 800c63c:	2600      	movs	r6, #0
 800c63e:	4d0a      	ldr	r5, [pc, #40]	; (800c668 <__libc_init_array+0x40>)
 800c640:	4c0a      	ldr	r4, [pc, #40]	; (800c66c <__libc_init_array+0x44>)
 800c642:	1b64      	subs	r4, r4, r5
 800c644:	10a4      	asrs	r4, r4, #2
 800c646:	42a6      	cmp	r6, r4
 800c648:	d105      	bne.n	800c656 <__libc_init_array+0x2e>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c650:	4798      	blx	r3
 800c652:	3601      	adds	r6, #1
 800c654:	e7ee      	b.n	800c634 <__libc_init_array+0xc>
 800c656:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65a:	4798      	blx	r3
 800c65c:	3601      	adds	r6, #1
 800c65e:	e7f2      	b.n	800c646 <__libc_init_array+0x1e>
 800c660:	0800dc2c 	.word	0x0800dc2c
 800c664:	0800dc2c 	.word	0x0800dc2c
 800c668:	0800dc2c 	.word	0x0800dc2c
 800c66c:	0800dc30 	.word	0x0800dc30

0800c670 <__retarget_lock_acquire_recursive>:
 800c670:	4770      	bx	lr

0800c672 <__retarget_lock_release_recursive>:
 800c672:	4770      	bx	lr

0800c674 <memcpy>:
 800c674:	440a      	add	r2, r1
 800c676:	4291      	cmp	r1, r2
 800c678:	f100 33ff 	add.w	r3, r0, #4294967295
 800c67c:	d100      	bne.n	800c680 <memcpy+0xc>
 800c67e:	4770      	bx	lr
 800c680:	b510      	push	{r4, lr}
 800c682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c686:	4291      	cmp	r1, r2
 800c688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c68c:	d1f9      	bne.n	800c682 <memcpy+0xe>
 800c68e:	bd10      	pop	{r4, pc}

0800c690 <_free_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4605      	mov	r5, r0
 800c694:	2900      	cmp	r1, #0
 800c696:	d040      	beq.n	800c71a <_free_r+0x8a>
 800c698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69c:	1f0c      	subs	r4, r1, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfb8      	it	lt
 800c6a2:	18e4      	addlt	r4, r4, r3
 800c6a4:	f000 f8dc 	bl	800c860 <__malloc_lock>
 800c6a8:	4a1c      	ldr	r2, [pc, #112]	; (800c71c <_free_r+0x8c>)
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	b933      	cbnz	r3, 800c6bc <_free_r+0x2c>
 800c6ae:	6063      	str	r3, [r4, #4]
 800c6b0:	6014      	str	r4, [r2, #0]
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b8:	f000 b8d8 	b.w	800c86c <__malloc_unlock>
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	d908      	bls.n	800c6d2 <_free_r+0x42>
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	1821      	adds	r1, r4, r0
 800c6c4:	428b      	cmp	r3, r1
 800c6c6:	bf01      	itttt	eq
 800c6c8:	6819      	ldreq	r1, [r3, #0]
 800c6ca:	685b      	ldreq	r3, [r3, #4]
 800c6cc:	1809      	addeq	r1, r1, r0
 800c6ce:	6021      	streq	r1, [r4, #0]
 800c6d0:	e7ed      	b.n	800c6ae <_free_r+0x1e>
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	b10b      	cbz	r3, 800c6dc <_free_r+0x4c>
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d9fa      	bls.n	800c6d2 <_free_r+0x42>
 800c6dc:	6811      	ldr	r1, [r2, #0]
 800c6de:	1850      	adds	r0, r2, r1
 800c6e0:	42a0      	cmp	r0, r4
 800c6e2:	d10b      	bne.n	800c6fc <_free_r+0x6c>
 800c6e4:	6820      	ldr	r0, [r4, #0]
 800c6e6:	4401      	add	r1, r0
 800c6e8:	1850      	adds	r0, r2, r1
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	6011      	str	r1, [r2, #0]
 800c6ee:	d1e0      	bne.n	800c6b2 <_free_r+0x22>
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	4408      	add	r0, r1
 800c6f6:	6010      	str	r0, [r2, #0]
 800c6f8:	6053      	str	r3, [r2, #4]
 800c6fa:	e7da      	b.n	800c6b2 <_free_r+0x22>
 800c6fc:	d902      	bls.n	800c704 <_free_r+0x74>
 800c6fe:	230c      	movs	r3, #12
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	e7d6      	b.n	800c6b2 <_free_r+0x22>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	1821      	adds	r1, r4, r0
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf01      	itttt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	1809      	addeq	r1, r1, r0
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	6063      	str	r3, [r4, #4]
 800c716:	6054      	str	r4, [r2, #4]
 800c718:	e7cb      	b.n	800c6b2 <_free_r+0x22>
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	20000f5c 	.word	0x20000f5c

0800c720 <sbrk_aligned>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	4e0e      	ldr	r6, [pc, #56]	; (800c75c <sbrk_aligned+0x3c>)
 800c724:	460c      	mov	r4, r1
 800c726:	6831      	ldr	r1, [r6, #0]
 800c728:	4605      	mov	r5, r0
 800c72a:	b911      	cbnz	r1, 800c732 <sbrk_aligned+0x12>
 800c72c:	f000 fca8 	bl	800d080 <_sbrk_r>
 800c730:	6030      	str	r0, [r6, #0]
 800c732:	4621      	mov	r1, r4
 800c734:	4628      	mov	r0, r5
 800c736:	f000 fca3 	bl	800d080 <_sbrk_r>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d00a      	beq.n	800c754 <sbrk_aligned+0x34>
 800c73e:	1cc4      	adds	r4, r0, #3
 800c740:	f024 0403 	bic.w	r4, r4, #3
 800c744:	42a0      	cmp	r0, r4
 800c746:	d007      	beq.n	800c758 <sbrk_aligned+0x38>
 800c748:	1a21      	subs	r1, r4, r0
 800c74a:	4628      	mov	r0, r5
 800c74c:	f000 fc98 	bl	800d080 <_sbrk_r>
 800c750:	3001      	adds	r0, #1
 800c752:	d101      	bne.n	800c758 <sbrk_aligned+0x38>
 800c754:	f04f 34ff 	mov.w	r4, #4294967295
 800c758:	4620      	mov	r0, r4
 800c75a:	bd70      	pop	{r4, r5, r6, pc}
 800c75c:	20000f60 	.word	0x20000f60

0800c760 <_malloc_r>:
 800c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c764:	1ccd      	adds	r5, r1, #3
 800c766:	f025 0503 	bic.w	r5, r5, #3
 800c76a:	3508      	adds	r5, #8
 800c76c:	2d0c      	cmp	r5, #12
 800c76e:	bf38      	it	cc
 800c770:	250c      	movcc	r5, #12
 800c772:	2d00      	cmp	r5, #0
 800c774:	4607      	mov	r7, r0
 800c776:	db01      	blt.n	800c77c <_malloc_r+0x1c>
 800c778:	42a9      	cmp	r1, r5
 800c77a:	d905      	bls.n	800c788 <_malloc_r+0x28>
 800c77c:	230c      	movs	r3, #12
 800c77e:	2600      	movs	r6, #0
 800c780:	603b      	str	r3, [r7, #0]
 800c782:	4630      	mov	r0, r6
 800c784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c788:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c85c <_malloc_r+0xfc>
 800c78c:	f000 f868 	bl	800c860 <__malloc_lock>
 800c790:	f8d8 3000 	ldr.w	r3, [r8]
 800c794:	461c      	mov	r4, r3
 800c796:	bb5c      	cbnz	r4, 800c7f0 <_malloc_r+0x90>
 800c798:	4629      	mov	r1, r5
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7ff ffc0 	bl	800c720 <sbrk_aligned>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	d155      	bne.n	800c852 <_malloc_r+0xf2>
 800c7a6:	f8d8 4000 	ldr.w	r4, [r8]
 800c7aa:	4626      	mov	r6, r4
 800c7ac:	2e00      	cmp	r6, #0
 800c7ae:	d145      	bne.n	800c83c <_malloc_r+0xdc>
 800c7b0:	2c00      	cmp	r4, #0
 800c7b2:	d048      	beq.n	800c846 <_malloc_r+0xe6>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	eb04 0903 	add.w	r9, r4, r3
 800c7be:	f000 fc5f 	bl	800d080 <_sbrk_r>
 800c7c2:	4581      	cmp	r9, r0
 800c7c4:	d13f      	bne.n	800c846 <_malloc_r+0xe6>
 800c7c6:	6821      	ldr	r1, [r4, #0]
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	1a6d      	subs	r5, r5, r1
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	f7ff ffa7 	bl	800c720 <sbrk_aligned>
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	d037      	beq.n	800c846 <_malloc_r+0xe6>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	442b      	add	r3, r5
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d038      	beq.n	800c856 <_malloc_r+0xf6>
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	42a2      	cmp	r2, r4
 800c7e8:	d12b      	bne.n	800c842 <_malloc_r+0xe2>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	605a      	str	r2, [r3, #4]
 800c7ee:	e00f      	b.n	800c810 <_malloc_r+0xb0>
 800c7f0:	6822      	ldr	r2, [r4, #0]
 800c7f2:	1b52      	subs	r2, r2, r5
 800c7f4:	d41f      	bmi.n	800c836 <_malloc_r+0xd6>
 800c7f6:	2a0b      	cmp	r2, #11
 800c7f8:	d917      	bls.n	800c82a <_malloc_r+0xca>
 800c7fa:	1961      	adds	r1, r4, r5
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	6025      	str	r5, [r4, #0]
 800c800:	bf18      	it	ne
 800c802:	6059      	strne	r1, [r3, #4]
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	bf08      	it	eq
 800c808:	f8c8 1000 	streq.w	r1, [r8]
 800c80c:	5162      	str	r2, [r4, r5]
 800c80e:	604b      	str	r3, [r1, #4]
 800c810:	4638      	mov	r0, r7
 800c812:	f104 060b 	add.w	r6, r4, #11
 800c816:	f000 f829 	bl	800c86c <__malloc_unlock>
 800c81a:	f026 0607 	bic.w	r6, r6, #7
 800c81e:	1d23      	adds	r3, r4, #4
 800c820:	1af2      	subs	r2, r6, r3
 800c822:	d0ae      	beq.n	800c782 <_malloc_r+0x22>
 800c824:	1b9b      	subs	r3, r3, r6
 800c826:	50a3      	str	r3, [r4, r2]
 800c828:	e7ab      	b.n	800c782 <_malloc_r+0x22>
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	6862      	ldr	r2, [r4, #4]
 800c82e:	d1dd      	bne.n	800c7ec <_malloc_r+0x8c>
 800c830:	f8c8 2000 	str.w	r2, [r8]
 800c834:	e7ec      	b.n	800c810 <_malloc_r+0xb0>
 800c836:	4623      	mov	r3, r4
 800c838:	6864      	ldr	r4, [r4, #4]
 800c83a:	e7ac      	b.n	800c796 <_malloc_r+0x36>
 800c83c:	4634      	mov	r4, r6
 800c83e:	6876      	ldr	r6, [r6, #4]
 800c840:	e7b4      	b.n	800c7ac <_malloc_r+0x4c>
 800c842:	4613      	mov	r3, r2
 800c844:	e7cc      	b.n	800c7e0 <_malloc_r+0x80>
 800c846:	230c      	movs	r3, #12
 800c848:	4638      	mov	r0, r7
 800c84a:	603b      	str	r3, [r7, #0]
 800c84c:	f000 f80e 	bl	800c86c <__malloc_unlock>
 800c850:	e797      	b.n	800c782 <_malloc_r+0x22>
 800c852:	6025      	str	r5, [r4, #0]
 800c854:	e7dc      	b.n	800c810 <_malloc_r+0xb0>
 800c856:	605b      	str	r3, [r3, #4]
 800c858:	deff      	udf	#255	; 0xff
 800c85a:	bf00      	nop
 800c85c:	20000f5c 	.word	0x20000f5c

0800c860 <__malloc_lock>:
 800c860:	4801      	ldr	r0, [pc, #4]	; (800c868 <__malloc_lock+0x8>)
 800c862:	f7ff bf05 	b.w	800c670 <__retarget_lock_acquire_recursive>
 800c866:	bf00      	nop
 800c868:	20000f58 	.word	0x20000f58

0800c86c <__malloc_unlock>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__malloc_unlock+0x8>)
 800c86e:	f7ff bf00 	b.w	800c672 <__retarget_lock_release_recursive>
 800c872:	bf00      	nop
 800c874:	20000f58 	.word	0x20000f58

0800c878 <__sfputc_r>:
 800c878:	6893      	ldr	r3, [r2, #8]
 800c87a:	b410      	push	{r4}
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	6093      	str	r3, [r2, #8]
 800c882:	da07      	bge.n	800c894 <__sfputc_r+0x1c>
 800c884:	6994      	ldr	r4, [r2, #24]
 800c886:	42a3      	cmp	r3, r4
 800c888:	db01      	blt.n	800c88e <__sfputc_r+0x16>
 800c88a:	290a      	cmp	r1, #10
 800c88c:	d102      	bne.n	800c894 <__sfputc_r+0x1c>
 800c88e:	bc10      	pop	{r4}
 800c890:	f7ff bde1 	b.w	800c456 <__swbuf_r>
 800c894:	6813      	ldr	r3, [r2, #0]
 800c896:	1c58      	adds	r0, r3, #1
 800c898:	6010      	str	r0, [r2, #0]
 800c89a:	7019      	strb	r1, [r3, #0]
 800c89c:	4608      	mov	r0, r1
 800c89e:	bc10      	pop	{r4}
 800c8a0:	4770      	bx	lr

0800c8a2 <__sfputs_r>:
 800c8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	460f      	mov	r7, r1
 800c8a8:	4614      	mov	r4, r2
 800c8aa:	18d5      	adds	r5, r2, r3
 800c8ac:	42ac      	cmp	r4, r5
 800c8ae:	d101      	bne.n	800c8b4 <__sfputs_r+0x12>
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	e007      	b.n	800c8c4 <__sfputs_r+0x22>
 800c8b4:	463a      	mov	r2, r7
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8bc:	f7ff ffdc 	bl	800c878 <__sfputc_r>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d1f3      	bne.n	800c8ac <__sfputs_r+0xa>
 800c8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8c8 <_vfiprintf_r>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	460d      	mov	r5, r1
 800c8ce:	4614      	mov	r4, r2
 800c8d0:	4698      	mov	r8, r3
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	b09d      	sub	sp, #116	; 0x74
 800c8d6:	b118      	cbz	r0, 800c8e0 <_vfiprintf_r+0x18>
 800c8d8:	6a03      	ldr	r3, [r0, #32]
 800c8da:	b90b      	cbnz	r3, 800c8e0 <_vfiprintf_r+0x18>
 800c8dc:	f7ff fcd4 	bl	800c288 <__sinit>
 800c8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8e2:	07d9      	lsls	r1, r3, #31
 800c8e4:	d405      	bmi.n	800c8f2 <_vfiprintf_r+0x2a>
 800c8e6:	89ab      	ldrh	r3, [r5, #12]
 800c8e8:	059a      	lsls	r2, r3, #22
 800c8ea:	d402      	bmi.n	800c8f2 <_vfiprintf_r+0x2a>
 800c8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ee:	f7ff febf 	bl	800c670 <__retarget_lock_acquire_recursive>
 800c8f2:	89ab      	ldrh	r3, [r5, #12]
 800c8f4:	071b      	lsls	r3, r3, #28
 800c8f6:	d501      	bpl.n	800c8fc <_vfiprintf_r+0x34>
 800c8f8:	692b      	ldr	r3, [r5, #16]
 800c8fa:	b99b      	cbnz	r3, 800c924 <_vfiprintf_r+0x5c>
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff fde6 	bl	800c4d0 <__swsetup_r>
 800c904:	b170      	cbz	r0, 800c924 <_vfiprintf_r+0x5c>
 800c906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c908:	07dc      	lsls	r4, r3, #31
 800c90a:	d504      	bpl.n	800c916 <_vfiprintf_r+0x4e>
 800c90c:	f04f 30ff 	mov.w	r0, #4294967295
 800c910:	b01d      	add	sp, #116	; 0x74
 800c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	0598      	lsls	r0, r3, #22
 800c91a:	d4f7      	bmi.n	800c90c <_vfiprintf_r+0x44>
 800c91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c91e:	f7ff fea8 	bl	800c672 <__retarget_lock_release_recursive>
 800c922:	e7f3      	b.n	800c90c <_vfiprintf_r+0x44>
 800c924:	2300      	movs	r3, #0
 800c926:	9309      	str	r3, [sp, #36]	; 0x24
 800c928:	2320      	movs	r3, #32
 800c92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c92e:	2330      	movs	r3, #48	; 0x30
 800c930:	f04f 0901 	mov.w	r9, #1
 800c934:	f8cd 800c 	str.w	r8, [sp, #12]
 800c938:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cae8 <_vfiprintf_r+0x220>
 800c93c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c940:	4623      	mov	r3, r4
 800c942:	469a      	mov	sl, r3
 800c944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c948:	b10a      	cbz	r2, 800c94e <_vfiprintf_r+0x86>
 800c94a:	2a25      	cmp	r2, #37	; 0x25
 800c94c:	d1f9      	bne.n	800c942 <_vfiprintf_r+0x7a>
 800c94e:	ebba 0b04 	subs.w	fp, sl, r4
 800c952:	d00b      	beq.n	800c96c <_vfiprintf_r+0xa4>
 800c954:	465b      	mov	r3, fp
 800c956:	4622      	mov	r2, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7ff ffa1 	bl	800c8a2 <__sfputs_r>
 800c960:	3001      	adds	r0, #1
 800c962:	f000 80a9 	beq.w	800cab8 <_vfiprintf_r+0x1f0>
 800c966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c968:	445a      	add	r2, fp
 800c96a:	9209      	str	r2, [sp, #36]	; 0x24
 800c96c:	f89a 3000 	ldrb.w	r3, [sl]
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 80a1 	beq.w	800cab8 <_vfiprintf_r+0x1f0>
 800c976:	2300      	movs	r3, #0
 800c978:	f04f 32ff 	mov.w	r2, #4294967295
 800c97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c980:	f10a 0a01 	add.w	sl, sl, #1
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	9307      	str	r3, [sp, #28]
 800c988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c98c:	931a      	str	r3, [sp, #104]	; 0x68
 800c98e:	4654      	mov	r4, sl
 800c990:	2205      	movs	r2, #5
 800c992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c996:	4854      	ldr	r0, [pc, #336]	; (800cae8 <_vfiprintf_r+0x220>)
 800c998:	f000 fb82 	bl	800d0a0 <memchr>
 800c99c:	9a04      	ldr	r2, [sp, #16]
 800c99e:	b9d8      	cbnz	r0, 800c9d8 <_vfiprintf_r+0x110>
 800c9a0:	06d1      	lsls	r1, r2, #27
 800c9a2:	bf44      	itt	mi
 800c9a4:	2320      	movmi	r3, #32
 800c9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9aa:	0713      	lsls	r3, r2, #28
 800c9ac:	bf44      	itt	mi
 800c9ae:	232b      	movmi	r3, #43	; 0x2b
 800c9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ba:	d015      	beq.n	800c9e8 <_vfiprintf_r+0x120>
 800c9bc:	4654      	mov	r4, sl
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f04f 0c0a 	mov.w	ip, #10
 800c9c4:	9a07      	ldr	r2, [sp, #28]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9cc:	3b30      	subs	r3, #48	; 0x30
 800c9ce:	2b09      	cmp	r3, #9
 800c9d0:	d94d      	bls.n	800ca6e <_vfiprintf_r+0x1a6>
 800c9d2:	b1b0      	cbz	r0, 800ca02 <_vfiprintf_r+0x13a>
 800c9d4:	9207      	str	r2, [sp, #28]
 800c9d6:	e014      	b.n	800ca02 <_vfiprintf_r+0x13a>
 800c9d8:	eba0 0308 	sub.w	r3, r0, r8
 800c9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	46a2      	mov	sl, r4
 800c9e4:	9304      	str	r3, [sp, #16]
 800c9e6:	e7d2      	b.n	800c98e <_vfiprintf_r+0xc6>
 800c9e8:	9b03      	ldr	r3, [sp, #12]
 800c9ea:	1d19      	adds	r1, r3, #4
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	9103      	str	r1, [sp, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bfbb      	ittet	lt
 800c9f4:	425b      	neglt	r3, r3
 800c9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c9fa:	9307      	strge	r3, [sp, #28]
 800c9fc:	9307      	strlt	r3, [sp, #28]
 800c9fe:	bfb8      	it	lt
 800ca00:	9204      	strlt	r2, [sp, #16]
 800ca02:	7823      	ldrb	r3, [r4, #0]
 800ca04:	2b2e      	cmp	r3, #46	; 0x2e
 800ca06:	d10c      	bne.n	800ca22 <_vfiprintf_r+0x15a>
 800ca08:	7863      	ldrb	r3, [r4, #1]
 800ca0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca0c:	d134      	bne.n	800ca78 <_vfiprintf_r+0x1b0>
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	3402      	adds	r4, #2
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	9203      	str	r2, [sp, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfb8      	it	lt
 800ca1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca20:	9305      	str	r3, [sp, #20]
 800ca22:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800caec <_vfiprintf_r+0x224>
 800ca26:	2203      	movs	r2, #3
 800ca28:	4650      	mov	r0, sl
 800ca2a:	7821      	ldrb	r1, [r4, #0]
 800ca2c:	f000 fb38 	bl	800d0a0 <memchr>
 800ca30:	b138      	cbz	r0, 800ca42 <_vfiprintf_r+0x17a>
 800ca32:	2240      	movs	r2, #64	; 0x40
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	eba0 000a 	sub.w	r0, r0, sl
 800ca3a:	4082      	lsls	r2, r0
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	3401      	adds	r4, #1
 800ca40:	9304      	str	r3, [sp, #16]
 800ca42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca46:	2206      	movs	r2, #6
 800ca48:	4829      	ldr	r0, [pc, #164]	; (800caf0 <_vfiprintf_r+0x228>)
 800ca4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca4e:	f000 fb27 	bl	800d0a0 <memchr>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d03f      	beq.n	800cad6 <_vfiprintf_r+0x20e>
 800ca56:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <_vfiprintf_r+0x22c>)
 800ca58:	bb1b      	cbnz	r3, 800caa2 <_vfiprintf_r+0x1da>
 800ca5a:	9b03      	ldr	r3, [sp, #12]
 800ca5c:	3307      	adds	r3, #7
 800ca5e:	f023 0307 	bic.w	r3, r3, #7
 800ca62:	3308      	adds	r3, #8
 800ca64:	9303      	str	r3, [sp, #12]
 800ca66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca68:	443b      	add	r3, r7
 800ca6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca6c:	e768      	b.n	800c940 <_vfiprintf_r+0x78>
 800ca6e:	460c      	mov	r4, r1
 800ca70:	2001      	movs	r0, #1
 800ca72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca76:	e7a6      	b.n	800c9c6 <_vfiprintf_r+0xfe>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f04f 0c0a 	mov.w	ip, #10
 800ca7e:	4619      	mov	r1, r3
 800ca80:	3401      	adds	r4, #1
 800ca82:	9305      	str	r3, [sp, #20]
 800ca84:	4620      	mov	r0, r4
 800ca86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca8a:	3a30      	subs	r2, #48	; 0x30
 800ca8c:	2a09      	cmp	r2, #9
 800ca8e:	d903      	bls.n	800ca98 <_vfiprintf_r+0x1d0>
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d0c6      	beq.n	800ca22 <_vfiprintf_r+0x15a>
 800ca94:	9105      	str	r1, [sp, #20]
 800ca96:	e7c4      	b.n	800ca22 <_vfiprintf_r+0x15a>
 800ca98:	4604      	mov	r4, r0
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800caa0:	e7f0      	b.n	800ca84 <_vfiprintf_r+0x1bc>
 800caa2:	ab03      	add	r3, sp, #12
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	462a      	mov	r2, r5
 800caa8:	4630      	mov	r0, r6
 800caaa:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <_vfiprintf_r+0x230>)
 800caac:	a904      	add	r1, sp, #16
 800caae:	f3af 8000 	nop.w
 800cab2:	4607      	mov	r7, r0
 800cab4:	1c78      	adds	r0, r7, #1
 800cab6:	d1d6      	bne.n	800ca66 <_vfiprintf_r+0x19e>
 800cab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caba:	07d9      	lsls	r1, r3, #31
 800cabc:	d405      	bmi.n	800caca <_vfiprintf_r+0x202>
 800cabe:	89ab      	ldrh	r3, [r5, #12]
 800cac0:	059a      	lsls	r2, r3, #22
 800cac2:	d402      	bmi.n	800caca <_vfiprintf_r+0x202>
 800cac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cac6:	f7ff fdd4 	bl	800c672 <__retarget_lock_release_recursive>
 800caca:	89ab      	ldrh	r3, [r5, #12]
 800cacc:	065b      	lsls	r3, r3, #25
 800cace:	f53f af1d 	bmi.w	800c90c <_vfiprintf_r+0x44>
 800cad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cad4:	e71c      	b.n	800c910 <_vfiprintf_r+0x48>
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	462a      	mov	r2, r5
 800cadc:	4630      	mov	r0, r6
 800cade:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <_vfiprintf_r+0x230>)
 800cae0:	a904      	add	r1, sp, #16
 800cae2:	f000 f87d 	bl	800cbe0 <_printf_i>
 800cae6:	e7e4      	b.n	800cab2 <_vfiprintf_r+0x1ea>
 800cae8:	0800dbf6 	.word	0x0800dbf6
 800caec:	0800dbfc 	.word	0x0800dbfc
 800caf0:	0800dc00 	.word	0x0800dc00
 800caf4:	00000000 	.word	0x00000000
 800caf8:	0800c8a3 	.word	0x0800c8a3

0800cafc <_printf_common>:
 800cafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb00:	4616      	mov	r6, r2
 800cb02:	4699      	mov	r9, r3
 800cb04:	688a      	ldr	r2, [r1, #8]
 800cb06:	690b      	ldr	r3, [r1, #16]
 800cb08:	4607      	mov	r7, r0
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	bfb8      	it	lt
 800cb0e:	4613      	movlt	r3, r2
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb16:	460c      	mov	r4, r1
 800cb18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb1c:	b10a      	cbz	r2, 800cb22 <_printf_common+0x26>
 800cb1e:	3301      	adds	r3, #1
 800cb20:	6033      	str	r3, [r6, #0]
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	0699      	lsls	r1, r3, #26
 800cb26:	bf42      	ittt	mi
 800cb28:	6833      	ldrmi	r3, [r6, #0]
 800cb2a:	3302      	addmi	r3, #2
 800cb2c:	6033      	strmi	r3, [r6, #0]
 800cb2e:	6825      	ldr	r5, [r4, #0]
 800cb30:	f015 0506 	ands.w	r5, r5, #6
 800cb34:	d106      	bne.n	800cb44 <_printf_common+0x48>
 800cb36:	f104 0a19 	add.w	sl, r4, #25
 800cb3a:	68e3      	ldr	r3, [r4, #12]
 800cb3c:	6832      	ldr	r2, [r6, #0]
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dc2b      	bgt.n	800cb9c <_printf_common+0xa0>
 800cb44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb48:	1e13      	subs	r3, r2, #0
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	2301      	movne	r3, #1
 800cb50:	0692      	lsls	r2, r2, #26
 800cb52:	d430      	bmi.n	800cbb6 <_printf_common+0xba>
 800cb54:	4649      	mov	r1, r9
 800cb56:	4638      	mov	r0, r7
 800cb58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb5c:	47c0      	blx	r8
 800cb5e:	3001      	adds	r0, #1
 800cb60:	d023      	beq.n	800cbaa <_printf_common+0xae>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	6922      	ldr	r2, [r4, #16]
 800cb66:	f003 0306 	and.w	r3, r3, #6
 800cb6a:	2b04      	cmp	r3, #4
 800cb6c:	bf14      	ite	ne
 800cb6e:	2500      	movne	r5, #0
 800cb70:	6833      	ldreq	r3, [r6, #0]
 800cb72:	f04f 0600 	mov.w	r6, #0
 800cb76:	bf08      	it	eq
 800cb78:	68e5      	ldreq	r5, [r4, #12]
 800cb7a:	f104 041a 	add.w	r4, r4, #26
 800cb7e:	bf08      	it	eq
 800cb80:	1aed      	subeq	r5, r5, r3
 800cb82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb86:	bf08      	it	eq
 800cb88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	bfc4      	itt	gt
 800cb90:	1a9b      	subgt	r3, r3, r2
 800cb92:	18ed      	addgt	r5, r5, r3
 800cb94:	42b5      	cmp	r5, r6
 800cb96:	d11a      	bne.n	800cbce <_printf_common+0xd2>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e008      	b.n	800cbae <_printf_common+0xb2>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	4652      	mov	r2, sl
 800cba0:	4649      	mov	r1, r9
 800cba2:	4638      	mov	r0, r7
 800cba4:	47c0      	blx	r8
 800cba6:	3001      	adds	r0, #1
 800cba8:	d103      	bne.n	800cbb2 <_printf_common+0xb6>
 800cbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb2:	3501      	adds	r5, #1
 800cbb4:	e7c1      	b.n	800cb3a <_printf_common+0x3e>
 800cbb6:	2030      	movs	r0, #48	; 0x30
 800cbb8:	18e1      	adds	r1, r4, r3
 800cbba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbc4:	4422      	add	r2, r4
 800cbc6:	3302      	adds	r3, #2
 800cbc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbcc:	e7c2      	b.n	800cb54 <_printf_common+0x58>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	4622      	mov	r2, r4
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	47c0      	blx	r8
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d0e6      	beq.n	800cbaa <_printf_common+0xae>
 800cbdc:	3601      	adds	r6, #1
 800cbde:	e7d9      	b.n	800cb94 <_printf_common+0x98>

0800cbe0 <_printf_i>:
 800cbe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe4:	7e0f      	ldrb	r7, [r1, #24]
 800cbe6:	4691      	mov	r9, r2
 800cbe8:	2f78      	cmp	r7, #120	; 0x78
 800cbea:	4680      	mov	r8, r0
 800cbec:	460c      	mov	r4, r1
 800cbee:	469a      	mov	sl, r3
 800cbf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbf6:	d807      	bhi.n	800cc08 <_printf_i+0x28>
 800cbf8:	2f62      	cmp	r7, #98	; 0x62
 800cbfa:	d80a      	bhi.n	800cc12 <_printf_i+0x32>
 800cbfc:	2f00      	cmp	r7, #0
 800cbfe:	f000 80d5 	beq.w	800cdac <_printf_i+0x1cc>
 800cc02:	2f58      	cmp	r7, #88	; 0x58
 800cc04:	f000 80c1 	beq.w	800cd8a <_printf_i+0x1aa>
 800cc08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc10:	e03a      	b.n	800cc88 <_printf_i+0xa8>
 800cc12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc16:	2b15      	cmp	r3, #21
 800cc18:	d8f6      	bhi.n	800cc08 <_printf_i+0x28>
 800cc1a:	a101      	add	r1, pc, #4	; (adr r1, 800cc20 <_printf_i+0x40>)
 800cc1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc20:	0800cc79 	.word	0x0800cc79
 800cc24:	0800cc8d 	.word	0x0800cc8d
 800cc28:	0800cc09 	.word	0x0800cc09
 800cc2c:	0800cc09 	.word	0x0800cc09
 800cc30:	0800cc09 	.word	0x0800cc09
 800cc34:	0800cc09 	.word	0x0800cc09
 800cc38:	0800cc8d 	.word	0x0800cc8d
 800cc3c:	0800cc09 	.word	0x0800cc09
 800cc40:	0800cc09 	.word	0x0800cc09
 800cc44:	0800cc09 	.word	0x0800cc09
 800cc48:	0800cc09 	.word	0x0800cc09
 800cc4c:	0800cd93 	.word	0x0800cd93
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800cd4d 	.word	0x0800cd4d
 800cc58:	0800cc09 	.word	0x0800cc09
 800cc5c:	0800cc09 	.word	0x0800cc09
 800cc60:	0800cdb5 	.word	0x0800cdb5
 800cc64:	0800cc09 	.word	0x0800cc09
 800cc68:	0800ccb9 	.word	0x0800ccb9
 800cc6c:	0800cc09 	.word	0x0800cc09
 800cc70:	0800cc09 	.word	0x0800cc09
 800cc74:	0800cd55 	.word	0x0800cd55
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	1d1a      	adds	r2, r3, #4
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	602a      	str	r2, [r5, #0]
 800cc80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e0a0      	b.n	800cdce <_printf_i+0x1ee>
 800cc8c:	6820      	ldr	r0, [r4, #0]
 800cc8e:	682b      	ldr	r3, [r5, #0]
 800cc90:	0607      	lsls	r7, r0, #24
 800cc92:	f103 0104 	add.w	r1, r3, #4
 800cc96:	6029      	str	r1, [r5, #0]
 800cc98:	d501      	bpl.n	800cc9e <_printf_i+0xbe>
 800cc9a:	681e      	ldr	r6, [r3, #0]
 800cc9c:	e003      	b.n	800cca6 <_printf_i+0xc6>
 800cc9e:	0646      	lsls	r6, r0, #25
 800cca0:	d5fb      	bpl.n	800cc9a <_printf_i+0xba>
 800cca2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	da03      	bge.n	800ccb2 <_printf_i+0xd2>
 800ccaa:	232d      	movs	r3, #45	; 0x2d
 800ccac:	4276      	negs	r6, r6
 800ccae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccb2:	230a      	movs	r3, #10
 800ccb4:	4859      	ldr	r0, [pc, #356]	; (800ce1c <_printf_i+0x23c>)
 800ccb6:	e012      	b.n	800ccde <_printf_i+0xfe>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	6820      	ldr	r0, [r4, #0]
 800ccbc:	1d19      	adds	r1, r3, #4
 800ccbe:	6029      	str	r1, [r5, #0]
 800ccc0:	0605      	lsls	r5, r0, #24
 800ccc2:	d501      	bpl.n	800ccc8 <_printf_i+0xe8>
 800ccc4:	681e      	ldr	r6, [r3, #0]
 800ccc6:	e002      	b.n	800ccce <_printf_i+0xee>
 800ccc8:	0641      	lsls	r1, r0, #25
 800ccca:	d5fb      	bpl.n	800ccc4 <_printf_i+0xe4>
 800cccc:	881e      	ldrh	r6, [r3, #0]
 800ccce:	2f6f      	cmp	r7, #111	; 0x6f
 800ccd0:	bf0c      	ite	eq
 800ccd2:	2308      	moveq	r3, #8
 800ccd4:	230a      	movne	r3, #10
 800ccd6:	4851      	ldr	r0, [pc, #324]	; (800ce1c <_printf_i+0x23c>)
 800ccd8:	2100      	movs	r1, #0
 800ccda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccde:	6865      	ldr	r5, [r4, #4]
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	bfa8      	it	ge
 800cce4:	6821      	ldrge	r1, [r4, #0]
 800cce6:	60a5      	str	r5, [r4, #8]
 800cce8:	bfa4      	itt	ge
 800ccea:	f021 0104 	bicge.w	r1, r1, #4
 800ccee:	6021      	strge	r1, [r4, #0]
 800ccf0:	b90e      	cbnz	r6, 800ccf6 <_printf_i+0x116>
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	d04b      	beq.n	800cd8e <_printf_i+0x1ae>
 800ccf6:	4615      	mov	r5, r2
 800ccf8:	fbb6 f1f3 	udiv	r1, r6, r3
 800ccfc:	fb03 6711 	mls	r7, r3, r1, r6
 800cd00:	5dc7      	ldrb	r7, [r0, r7]
 800cd02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd06:	4637      	mov	r7, r6
 800cd08:	42bb      	cmp	r3, r7
 800cd0a:	460e      	mov	r6, r1
 800cd0c:	d9f4      	bls.n	800ccf8 <_printf_i+0x118>
 800cd0e:	2b08      	cmp	r3, #8
 800cd10:	d10b      	bne.n	800cd2a <_printf_i+0x14a>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	07de      	lsls	r6, r3, #31
 800cd16:	d508      	bpl.n	800cd2a <_printf_i+0x14a>
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	6861      	ldr	r1, [r4, #4]
 800cd1c:	4299      	cmp	r1, r3
 800cd1e:	bfde      	ittt	le
 800cd20:	2330      	movle	r3, #48	; 0x30
 800cd22:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd26:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd2a:	1b52      	subs	r2, r2, r5
 800cd2c:	6122      	str	r2, [r4, #16]
 800cd2e:	464b      	mov	r3, r9
 800cd30:	4621      	mov	r1, r4
 800cd32:	4640      	mov	r0, r8
 800cd34:	f8cd a000 	str.w	sl, [sp]
 800cd38:	aa03      	add	r2, sp, #12
 800cd3a:	f7ff fedf 	bl	800cafc <_printf_common>
 800cd3e:	3001      	adds	r0, #1
 800cd40:	d14a      	bne.n	800cdd8 <_printf_i+0x1f8>
 800cd42:	f04f 30ff 	mov.w	r0, #4294967295
 800cd46:	b004      	add	sp, #16
 800cd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	f043 0320 	orr.w	r3, r3, #32
 800cd52:	6023      	str	r3, [r4, #0]
 800cd54:	2778      	movs	r7, #120	; 0x78
 800cd56:	4832      	ldr	r0, [pc, #200]	; (800ce20 <_printf_i+0x240>)
 800cd58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	6829      	ldr	r1, [r5, #0]
 800cd60:	061f      	lsls	r7, r3, #24
 800cd62:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd66:	d402      	bmi.n	800cd6e <_printf_i+0x18e>
 800cd68:	065f      	lsls	r7, r3, #25
 800cd6a:	bf48      	it	mi
 800cd6c:	b2b6      	uxthmi	r6, r6
 800cd6e:	07df      	lsls	r7, r3, #31
 800cd70:	bf48      	it	mi
 800cd72:	f043 0320 	orrmi.w	r3, r3, #32
 800cd76:	6029      	str	r1, [r5, #0]
 800cd78:	bf48      	it	mi
 800cd7a:	6023      	strmi	r3, [r4, #0]
 800cd7c:	b91e      	cbnz	r6, 800cd86 <_printf_i+0x1a6>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	f023 0320 	bic.w	r3, r3, #32
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	2310      	movs	r3, #16
 800cd88:	e7a6      	b.n	800ccd8 <_printf_i+0xf8>
 800cd8a:	4824      	ldr	r0, [pc, #144]	; (800ce1c <_printf_i+0x23c>)
 800cd8c:	e7e4      	b.n	800cd58 <_printf_i+0x178>
 800cd8e:	4615      	mov	r5, r2
 800cd90:	e7bd      	b.n	800cd0e <_printf_i+0x12e>
 800cd92:	682b      	ldr	r3, [r5, #0]
 800cd94:	6826      	ldr	r6, [r4, #0]
 800cd96:	1d18      	adds	r0, r3, #4
 800cd98:	6961      	ldr	r1, [r4, #20]
 800cd9a:	6028      	str	r0, [r5, #0]
 800cd9c:	0635      	lsls	r5, r6, #24
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	d501      	bpl.n	800cda6 <_printf_i+0x1c6>
 800cda2:	6019      	str	r1, [r3, #0]
 800cda4:	e002      	b.n	800cdac <_printf_i+0x1cc>
 800cda6:	0670      	lsls	r0, r6, #25
 800cda8:	d5fb      	bpl.n	800cda2 <_printf_i+0x1c2>
 800cdaa:	8019      	strh	r1, [r3, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	4615      	mov	r5, r2
 800cdb0:	6123      	str	r3, [r4, #16]
 800cdb2:	e7bc      	b.n	800cd2e <_printf_i+0x14e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	1d1a      	adds	r2, r3, #4
 800cdba:	602a      	str	r2, [r5, #0]
 800cdbc:	681d      	ldr	r5, [r3, #0]
 800cdbe:	6862      	ldr	r2, [r4, #4]
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 f96d 	bl	800d0a0 <memchr>
 800cdc6:	b108      	cbz	r0, 800cdcc <_printf_i+0x1ec>
 800cdc8:	1b40      	subs	r0, r0, r5
 800cdca:	6060      	str	r0, [r4, #4]
 800cdcc:	6863      	ldr	r3, [r4, #4]
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd6:	e7aa      	b.n	800cd2e <_printf_i+0x14e>
 800cdd8:	462a      	mov	r2, r5
 800cdda:	4649      	mov	r1, r9
 800cddc:	4640      	mov	r0, r8
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	47d0      	blx	sl
 800cde2:	3001      	adds	r0, #1
 800cde4:	d0ad      	beq.n	800cd42 <_printf_i+0x162>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	079b      	lsls	r3, r3, #30
 800cdea:	d413      	bmi.n	800ce14 <_printf_i+0x234>
 800cdec:	68e0      	ldr	r0, [r4, #12]
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	4298      	cmp	r0, r3
 800cdf2:	bfb8      	it	lt
 800cdf4:	4618      	movlt	r0, r3
 800cdf6:	e7a6      	b.n	800cd46 <_printf_i+0x166>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	4632      	mov	r2, r6
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	4640      	mov	r0, r8
 800ce00:	47d0      	blx	sl
 800ce02:	3001      	adds	r0, #1
 800ce04:	d09d      	beq.n	800cd42 <_printf_i+0x162>
 800ce06:	3501      	adds	r5, #1
 800ce08:	68e3      	ldr	r3, [r4, #12]
 800ce0a:	9903      	ldr	r1, [sp, #12]
 800ce0c:	1a5b      	subs	r3, r3, r1
 800ce0e:	42ab      	cmp	r3, r5
 800ce10:	dcf2      	bgt.n	800cdf8 <_printf_i+0x218>
 800ce12:	e7eb      	b.n	800cdec <_printf_i+0x20c>
 800ce14:	2500      	movs	r5, #0
 800ce16:	f104 0619 	add.w	r6, r4, #25
 800ce1a:	e7f5      	b.n	800ce08 <_printf_i+0x228>
 800ce1c:	0800dc07 	.word	0x0800dc07
 800ce20:	0800dc18 	.word	0x0800dc18

0800ce24 <__sflush_r>:
 800ce24:	898a      	ldrh	r2, [r1, #12]
 800ce26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce28:	4605      	mov	r5, r0
 800ce2a:	0710      	lsls	r0, r2, #28
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	d457      	bmi.n	800cee0 <__sflush_r+0xbc>
 800ce30:	684b      	ldr	r3, [r1, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dc04      	bgt.n	800ce40 <__sflush_r+0x1c>
 800ce36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc01      	bgt.n	800ce40 <__sflush_r+0x1c>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	d0fa      	beq.n	800ce3c <__sflush_r+0x18>
 800ce46:	2300      	movs	r3, #0
 800ce48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce4c:	682f      	ldr	r7, [r5, #0]
 800ce4e:	6a21      	ldr	r1, [r4, #32]
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	d032      	beq.n	800ceba <__sflush_r+0x96>
 800ce54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	075a      	lsls	r2, r3, #29
 800ce5a:	d505      	bpl.n	800ce68 <__sflush_r+0x44>
 800ce5c:	6863      	ldr	r3, [r4, #4]
 800ce5e:	1ac0      	subs	r0, r0, r3
 800ce60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce62:	b10b      	cbz	r3, 800ce68 <__sflush_r+0x44>
 800ce64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce66:	1ac0      	subs	r0, r0, r3
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6e:	4628      	mov	r0, r5
 800ce70:	6a21      	ldr	r1, [r4, #32]
 800ce72:	47b0      	blx	r6
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	d106      	bne.n	800ce88 <__sflush_r+0x64>
 800ce7a:	6829      	ldr	r1, [r5, #0]
 800ce7c:	291d      	cmp	r1, #29
 800ce7e:	d82b      	bhi.n	800ced8 <__sflush_r+0xb4>
 800ce80:	4a28      	ldr	r2, [pc, #160]	; (800cf24 <__sflush_r+0x100>)
 800ce82:	410a      	asrs	r2, r1
 800ce84:	07d6      	lsls	r6, r2, #31
 800ce86:	d427      	bmi.n	800ced8 <__sflush_r+0xb4>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	6062      	str	r2, [r4, #4]
 800ce8c:	6922      	ldr	r2, [r4, #16]
 800ce8e:	04d9      	lsls	r1, r3, #19
 800ce90:	6022      	str	r2, [r4, #0]
 800ce92:	d504      	bpl.n	800ce9e <__sflush_r+0x7a>
 800ce94:	1c42      	adds	r2, r0, #1
 800ce96:	d101      	bne.n	800ce9c <__sflush_r+0x78>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b903      	cbnz	r3, 800ce9e <__sflush_r+0x7a>
 800ce9c:	6560      	str	r0, [r4, #84]	; 0x54
 800ce9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cea0:	602f      	str	r7, [r5, #0]
 800cea2:	2900      	cmp	r1, #0
 800cea4:	d0ca      	beq.n	800ce3c <__sflush_r+0x18>
 800cea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceaa:	4299      	cmp	r1, r3
 800ceac:	d002      	beq.n	800ceb4 <__sflush_r+0x90>
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f7ff fbee 	bl	800c690 <_free_r>
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	6360      	str	r0, [r4, #52]	; 0x34
 800ceb8:	e7c1      	b.n	800ce3e <__sflush_r+0x1a>
 800ceba:	2301      	movs	r3, #1
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b0      	blx	r6
 800cec0:	1c41      	adds	r1, r0, #1
 800cec2:	d1c8      	bne.n	800ce56 <__sflush_r+0x32>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0c5      	beq.n	800ce56 <__sflush_r+0x32>
 800ceca:	2b1d      	cmp	r3, #29
 800cecc:	d001      	beq.n	800ced2 <__sflush_r+0xae>
 800cece:	2b16      	cmp	r3, #22
 800ced0:	d101      	bne.n	800ced6 <__sflush_r+0xb2>
 800ced2:	602f      	str	r7, [r5, #0]
 800ced4:	e7b2      	b.n	800ce3c <__sflush_r+0x18>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	e7ae      	b.n	800ce3e <__sflush_r+0x1a>
 800cee0:	690f      	ldr	r7, [r1, #16]
 800cee2:	2f00      	cmp	r7, #0
 800cee4:	d0aa      	beq.n	800ce3c <__sflush_r+0x18>
 800cee6:	0793      	lsls	r3, r2, #30
 800cee8:	bf18      	it	ne
 800ceea:	2300      	movne	r3, #0
 800ceec:	680e      	ldr	r6, [r1, #0]
 800ceee:	bf08      	it	eq
 800cef0:	694b      	ldreq	r3, [r1, #20]
 800cef2:	1bf6      	subs	r6, r6, r7
 800cef4:	600f      	str	r7, [r1, #0]
 800cef6:	608b      	str	r3, [r1, #8]
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	dd9f      	ble.n	800ce3c <__sflush_r+0x18>
 800cefc:	4633      	mov	r3, r6
 800cefe:	463a      	mov	r2, r7
 800cf00:	4628      	mov	r0, r5
 800cf02:	6a21      	ldr	r1, [r4, #32]
 800cf04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cf08:	47e0      	blx	ip
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	dc06      	bgt.n	800cf1c <__sflush_r+0xf8>
 800cf0e:	89a3      	ldrh	r3, [r4, #12]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	e790      	b.n	800ce3e <__sflush_r+0x1a>
 800cf1c:	4407      	add	r7, r0
 800cf1e:	1a36      	subs	r6, r6, r0
 800cf20:	e7ea      	b.n	800cef8 <__sflush_r+0xd4>
 800cf22:	bf00      	nop
 800cf24:	dfbffffe 	.word	0xdfbffffe

0800cf28 <_fflush_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	690b      	ldr	r3, [r1, #16]
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	460c      	mov	r4, r1
 800cf30:	b913      	cbnz	r3, 800cf38 <_fflush_r+0x10>
 800cf32:	2500      	movs	r5, #0
 800cf34:	4628      	mov	r0, r5
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	b118      	cbz	r0, 800cf42 <_fflush_r+0x1a>
 800cf3a:	6a03      	ldr	r3, [r0, #32]
 800cf3c:	b90b      	cbnz	r3, 800cf42 <_fflush_r+0x1a>
 800cf3e:	f7ff f9a3 	bl	800c288 <__sinit>
 800cf42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0f3      	beq.n	800cf32 <_fflush_r+0xa>
 800cf4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf4c:	07d0      	lsls	r0, r2, #31
 800cf4e:	d404      	bmi.n	800cf5a <_fflush_r+0x32>
 800cf50:	0599      	lsls	r1, r3, #22
 800cf52:	d402      	bmi.n	800cf5a <_fflush_r+0x32>
 800cf54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf56:	f7ff fb8b 	bl	800c670 <__retarget_lock_acquire_recursive>
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	f7ff ff61 	bl	800ce24 <__sflush_r>
 800cf62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf64:	4605      	mov	r5, r0
 800cf66:	07da      	lsls	r2, r3, #31
 800cf68:	d4e4      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	059b      	lsls	r3, r3, #22
 800cf6e:	d4e1      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf72:	f7ff fb7e 	bl	800c672 <__retarget_lock_release_recursive>
 800cf76:	e7dd      	b.n	800cf34 <_fflush_r+0xc>

0800cf78 <__swhatbuf_r>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf80:	4615      	mov	r5, r2
 800cf82:	2900      	cmp	r1, #0
 800cf84:	461e      	mov	r6, r3
 800cf86:	b096      	sub	sp, #88	; 0x58
 800cf88:	da0c      	bge.n	800cfa4 <__swhatbuf_r+0x2c>
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cf92:	bf0c      	ite	eq
 800cf94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cf98:	2340      	movne	r3, #64	; 0x40
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	6031      	str	r1, [r6, #0]
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	b016      	add	sp, #88	; 0x58
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	466a      	mov	r2, sp
 800cfa6:	f000 f849 	bl	800d03c <_fstat_r>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	dbed      	blt.n	800cf8a <__swhatbuf_r+0x12>
 800cfae:	9901      	ldr	r1, [sp, #4]
 800cfb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cfb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cfb8:	4259      	negs	r1, r3
 800cfba:	4159      	adcs	r1, r3
 800cfbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfc0:	e7eb      	b.n	800cf9a <__swhatbuf_r+0x22>

0800cfc2 <__smakebuf_r>:
 800cfc2:	898b      	ldrh	r3, [r1, #12]
 800cfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfc6:	079d      	lsls	r5, r3, #30
 800cfc8:	4606      	mov	r6, r0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	d507      	bpl.n	800cfde <__smakebuf_r+0x1c>
 800cfce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfd2:	6023      	str	r3, [r4, #0]
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	6163      	str	r3, [r4, #20]
 800cfda:	b002      	add	sp, #8
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
 800cfde:	466a      	mov	r2, sp
 800cfe0:	ab01      	add	r3, sp, #4
 800cfe2:	f7ff ffc9 	bl	800cf78 <__swhatbuf_r>
 800cfe6:	9900      	ldr	r1, [sp, #0]
 800cfe8:	4605      	mov	r5, r0
 800cfea:	4630      	mov	r0, r6
 800cfec:	f7ff fbb8 	bl	800c760 <_malloc_r>
 800cff0:	b948      	cbnz	r0, 800d006 <__smakebuf_r+0x44>
 800cff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff6:	059a      	lsls	r2, r3, #22
 800cff8:	d4ef      	bmi.n	800cfda <__smakebuf_r+0x18>
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	f043 0302 	orr.w	r3, r3, #2
 800d002:	81a3      	strh	r3, [r4, #12]
 800d004:	e7e3      	b.n	800cfce <__smakebuf_r+0xc>
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	6020      	str	r0, [r4, #0]
 800d00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d00e:	81a3      	strh	r3, [r4, #12]
 800d010:	9b00      	ldr	r3, [sp, #0]
 800d012:	6120      	str	r0, [r4, #16]
 800d014:	6163      	str	r3, [r4, #20]
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	b15b      	cbz	r3, 800d032 <__smakebuf_r+0x70>
 800d01a:	4630      	mov	r0, r6
 800d01c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d020:	f000 f81e 	bl	800d060 <_isatty_r>
 800d024:	b128      	cbz	r0, 800d032 <__smakebuf_r+0x70>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f023 0303 	bic.w	r3, r3, #3
 800d02c:	f043 0301 	orr.w	r3, r3, #1
 800d030:	81a3      	strh	r3, [r4, #12]
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	431d      	orrs	r5, r3
 800d036:	81a5      	strh	r5, [r4, #12]
 800d038:	e7cf      	b.n	800cfda <__smakebuf_r+0x18>
	...

0800d03c <_fstat_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	2300      	movs	r3, #0
 800d040:	4d06      	ldr	r5, [pc, #24]	; (800d05c <_fstat_r+0x20>)
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	4611      	mov	r1, r2
 800d048:	602b      	str	r3, [r5, #0]
 800d04a:	f7fc ff71 	bl	8009f30 <_fstat>
 800d04e:	1c43      	adds	r3, r0, #1
 800d050:	d102      	bne.n	800d058 <_fstat_r+0x1c>
 800d052:	682b      	ldr	r3, [r5, #0]
 800d054:	b103      	cbz	r3, 800d058 <_fstat_r+0x1c>
 800d056:	6023      	str	r3, [r4, #0]
 800d058:	bd38      	pop	{r3, r4, r5, pc}
 800d05a:	bf00      	nop
 800d05c:	20000f54 	.word	0x20000f54

0800d060 <_isatty_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	2300      	movs	r3, #0
 800d064:	4d05      	ldr	r5, [pc, #20]	; (800d07c <_isatty_r+0x1c>)
 800d066:	4604      	mov	r4, r0
 800d068:	4608      	mov	r0, r1
 800d06a:	602b      	str	r3, [r5, #0]
 800d06c:	f7fc ff6f 	bl	8009f4e <_isatty>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_isatty_r+0x1a>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	b103      	cbz	r3, 800d07a <_isatty_r+0x1a>
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	20000f54 	.word	0x20000f54

0800d080 <_sbrk_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	2300      	movs	r3, #0
 800d084:	4d05      	ldr	r5, [pc, #20]	; (800d09c <_sbrk_r+0x1c>)
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	602b      	str	r3, [r5, #0]
 800d08c:	f7fc ff76 	bl	8009f7c <_sbrk>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d102      	bne.n	800d09a <_sbrk_r+0x1a>
 800d094:	682b      	ldr	r3, [r5, #0]
 800d096:	b103      	cbz	r3, 800d09a <_sbrk_r+0x1a>
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	20000f54 	.word	0x20000f54

0800d0a0 <memchr>:
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	b2c9      	uxtb	r1, r1
 800d0a6:	4402      	add	r2, r0
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	d101      	bne.n	800d0b2 <memchr+0x12>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	e003      	b.n	800d0ba <memchr+0x1a>
 800d0b2:	7804      	ldrb	r4, [r0, #0]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	428c      	cmp	r4, r1
 800d0b8:	d1f6      	bne.n	800d0a8 <memchr+0x8>
 800d0ba:	bd10      	pop	{r4, pc}

0800d0bc <_init>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	bf00      	nop
 800d0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c2:	bc08      	pop	{r3}
 800d0c4:	469e      	mov	lr, r3
 800d0c6:	4770      	bx	lr

0800d0c8 <_fini>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	bf00      	nop
 800d0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ce:	bc08      	pop	{r3}
 800d0d0:	469e      	mov	lr, r3
 800d0d2:	4770      	bx	lr
